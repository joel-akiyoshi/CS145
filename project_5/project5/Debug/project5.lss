
project5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000930  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000930  000009a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a14  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001582  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a40  00000000  00000000  000020da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000953  00000000  00000000  00002b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002cc  00000000  00000000  00003470  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000484  00000000  00000000  0000373c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ae8  00000000  00000000  00003bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  000046a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
  7a:	0c 94 96 04 	jmp	0x92c	; 0x92c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <is_pressed>:
	}
}

int is_pressed(int r, int c)
{
	CLR_BIT(PORTA, 0);
  82:	9b b3       	in	r25, 0x1b	; 27
  84:	9e 7f       	andi	r25, 0xFE	; 254
  86:	9b bb       	out	0x1b, r25	; 27
	// set all GPIO to 0
	DDRC = 0;
  88:	14 ba       	out	0x14, r1	; 20
	PORTC = 0xF0;
  8a:	90 ef       	ldi	r25, 0xF0	; 240
  8c:	95 bb       	out	0x15, r25	; 21

    SET_BIT(DDRC, r);  // set row pin to OUTPUT
  8e:	44 b3       	in	r20, 0x14	; 20
  90:	21 e0       	ldi	r18, 0x01	; 1
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	f9 01       	movw	r30, r18
  96:	02 c0       	rjmp	.+4      	; 0x9c <is_pressed+0x1a>
  98:	ee 0f       	add	r30, r30
  9a:	ff 1f       	adc	r31, r31
  9c:	8a 95       	dec	r24
  9e:	e2 f7       	brpl	.-8      	; 0x98 <is_pressed+0x16>
  a0:	cf 01       	movw	r24, r30
  a2:	4e 2b       	or	r20, r30
  a4:	44 bb       	out	0x14, r20	; 20
	CLR_BIT(PORTC, r);  // write a '0' to PORTC at r
  a6:	95 b3       	in	r25, 0x15	; 21
  a8:	80 95       	com	r24
  aa:	89 23       	and	r24, r25
  ac:	85 bb       	out	0x15, r24	; 21

	SET_BIT(PORTC, c + 4);  // pull up GPIO at col c
  ae:	85 b3       	in	r24, 0x15	; 21
  b0:	6c 5f       	subi	r22, 0xFC	; 252
  b2:	7f 4f       	sbci	r23, 0xFF	; 255
  b4:	06 2e       	mov	r0, r22
  b6:	02 c0       	rjmp	.+4      	; 0xbc <is_pressed+0x3a>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <is_pressed+0x36>
  c0:	28 2b       	or	r18, r24
  c2:	25 bb       	out	0x15, r18	; 21
	
	if (!GET_BIT(PINC, c + 4))  // check to see if PINC is zero at col c
  c4:	83 b3       	in	r24, 0x13	; 19
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <is_pressed+0x4c>
  ca:	95 95       	asr	r25
  cc:	87 95       	ror	r24
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <is_pressed+0x48>
  d2:	80 fd       	sbrc	r24, 0
  d4:	06 c0       	rjmp	.+12     	; 0xe2 <is_pressed+0x60>
	{
		SET_BIT(PORTA, 0);
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	8b bb       	out	0x1b, r24	; 27
		return 1;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	08 95       	ret
	}
	return 0;
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	08 95       	ret

000000e8 <get_key>:
#include "avr.h"
#include "keypad.h"
#include "stdio.h"

int get_key()
{
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
	int i, j;
	for (i = 0; i < 4; ++i)
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	10 e0       	ldi	r17, 0x00	; 0
  f4:	18 c0       	rjmp	.+48     	; 0x126 <get_key+0x3e>
	{
		for (j = 0; j < 4; ++j)
		{
			if (is_pressed(i,j))
  f6:	be 01       	movw	r22, r28
  f8:	c8 01       	movw	r24, r16
  fa:	0e 94 41 00 	call	0x82	; 0x82 <is_pressed>
  fe:	89 2b       	or	r24, r25
 100:	49 f0       	breq	.+18     	; 0x114 <get_key+0x2c>
			{
				return i * 4 + j + 1;
 102:	c8 01       	movw	r24, r16
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	8c 0f       	add	r24, r28
 10e:	9d 1f       	adc	r25, r29
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	0c c0       	rjmp	.+24     	; 0x12c <get_key+0x44>
int get_key()
{
	int i, j;
	for (i = 0; i < 4; ++i)
	{
		for (j = 0; j < 4; ++j)
 114:	21 96       	adiw	r28, 0x01	; 1
 116:	02 c0       	rjmp	.+4      	; 0x11c <get_key+0x34>
 118:	c0 e0       	ldi	r28, 0x00	; 0
 11a:	d0 e0       	ldi	r29, 0x00	; 0
 11c:	c4 30       	cpi	r28, 0x04	; 4
 11e:	d1 05       	cpc	r29, r1
 120:	54 f3       	brlt	.-44     	; 0xf6 <get_key+0xe>
#include "stdio.h"

int get_key()
{
	int i, j;
	for (i = 0; i < 4; ++i)
 122:	0f 5f       	subi	r16, 0xFF	; 255
 124:	1f 4f       	sbci	r17, 0xFF	; 255
 126:	04 30       	cpi	r16, 0x04	; 4
 128:	11 05       	cpc	r17, r1
 12a:	b4 f3       	brlt	.-20     	; 0x118 <get_key+0x30>
			{
				return i * 4 + j + 1;
			}
		}
	}
}
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	08 95       	ret

00000136 <input>:
{
	char c;
	while ((c = pgm_read_byte(s++)) != 0) {
		write(c, 1);
	}
}
 136:	88 23       	and	r24, r24
 138:	21 f0       	breq	.+8      	; 0x142 <input+0xc>
 13a:	88 b3       	in	r24, 0x18	; 24
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	88 bb       	out	0x18, r24	; 24
 140:	03 c0       	rjmp	.+6      	; 0x148 <input+0x12>
 142:	88 b3       	in	r24, 0x18	; 24
 144:	8e 7f       	andi	r24, 0xFE	; 254
 146:	88 bb       	out	0x18, r24	; 24
 148:	88 b3       	in	r24, 0x18	; 24
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	88 bb       	out	0x18, r24	; 24
 14e:	11 ba       	out	0x11, r1	; 17
 150:	80 b3       	in	r24, 0x10	; 16
 152:	88 b3       	in	r24, 0x18	; 24
 154:	84 60       	ori	r24, 0x04	; 4
 156:	88 bb       	out	0x18, r24	; 24
 158:	00 00       	nop
 15a:	00 00       	nop
 15c:	00 00       	nop
 15e:	11 ba       	out	0x11, r1	; 17
 160:	80 b3       	in	r24, 0x10	; 16
 162:	98 b3       	in	r25, 0x18	; 24
 164:	9b 7f       	andi	r25, 0xFB	; 251
 166:	98 bb       	out	0x18, r25	; 24
 168:	08 95       	ret

0000016a <output>:
 16a:	66 23       	and	r22, r22
 16c:	21 f0       	breq	.+8      	; 0x176 <output+0xc>
 16e:	98 b3       	in	r25, 0x18	; 24
 170:	91 60       	ori	r25, 0x01	; 1
 172:	98 bb       	out	0x18, r25	; 24
 174:	03 c0       	rjmp	.+6      	; 0x17c <output+0x12>
 176:	98 b3       	in	r25, 0x18	; 24
 178:	9e 7f       	andi	r25, 0xFE	; 254
 17a:	98 bb       	out	0x18, r25	; 24
 17c:	98 b3       	in	r25, 0x18	; 24
 17e:	9d 7f       	andi	r25, 0xFD	; 253
 180:	98 bb       	out	0x18, r25	; 24
 182:	82 bb       	out	0x12, r24	; 18
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	81 bb       	out	0x11, r24	; 17
 188:	88 b3       	in	r24, 0x18	; 24
 18a:	84 60       	ori	r24, 0x04	; 4
 18c:	88 bb       	out	0x18, r24	; 24
 18e:	00 00       	nop
 190:	00 00       	nop
 192:	00 00       	nop
 194:	88 b3       	in	r24, 0x18	; 24
 196:	8b 7f       	andi	r24, 0xFB	; 251
 198:	88 bb       	out	0x18, r24	; 24
 19a:	08 95       	ret

0000019c <write>:
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	c8 2f       	mov	r28, r24
 1a2:	d6 2f       	mov	r29, r22
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 9b 00 	call	0x136	; 0x136 <input>
 1aa:	88 23       	and	r24, r24
 1ac:	dc f3       	brlt	.-10     	; 0x1a4 <write+0x8>
 1ae:	6d 2f       	mov	r22, r29
 1b0:	8c 2f       	mov	r24, r28
 1b2:	0e 94 b5 00 	call	0x16a	; 0x16a <output>
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <lcd_init>:
 1bc:	87 b3       	in	r24, 0x17	; 23
 1be:	81 60       	ori	r24, 0x01	; 1
 1c0:	87 bb       	out	0x17, r24	; 23
 1c2:	87 b3       	in	r24, 0x17	; 23
 1c4:	82 60       	ori	r24, 0x02	; 2
 1c6:	87 bb       	out	0x17, r24	; 23
 1c8:	87 b3       	in	r24, 0x17	; 23
 1ca:	84 60       	ori	r24, 0x04	; 4
 1cc:	87 bb       	out	0x17, r24	; 23
 1ce:	80 e1       	ldi	r24, 0x10	; 16
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 3d 01 	call	0x27a	; 0x27a <avr_wait>
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	80 e3       	ldi	r24, 0x30	; 48
 1da:	0e 94 b5 00 	call	0x16a	; 0x16a <output>
 1de:	85 e0       	ldi	r24, 0x05	; 5
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 3d 01 	call	0x27a	; 0x27a <avr_wait>
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	80 e3       	ldi	r24, 0x30	; 48
 1ea:	0e 94 b5 00 	call	0x16a	; 0x16a <output>
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 3d 01 	call	0x27a	; 0x27a <avr_wait>
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	8c e3       	ldi	r24, 0x3C	; 60
 1fa:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	8c e0       	ldi	r24, 0x0C	; 12
 202:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	86 e0       	ldi	r24, 0x06	; 6
 20a:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 216:	08 95       	ret

00000218 <lcd_clr>:
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 220:	08 95       	ret

00000222 <lcd_pos>:
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	c6 2f       	mov	r28, r22
 228:	98 e2       	ldi	r25, 0x28	; 40
 22a:	89 9f       	mul	r24, r25
 22c:	c0 0d       	add	r28, r0
 22e:	11 24       	eor	r1, r1
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 238:	05 c0       	rjmp	.+10     	; 0x244 <lcd_pos+0x22>
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	84 e1       	ldi	r24, 0x14	; 20
 23e:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 242:	cd 2f       	mov	r28, r29
 244:	df ef       	ldi	r29, 0xFF	; 255
 246:	dc 0f       	add	r29, r28
 248:	c1 11       	cpse	r28, r1
 24a:	f7 cf       	rjmp	.-18     	; 0x23a <lcd_pos+0x18>
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <lcd_put>:
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 258:	08 95       	ret

0000025a <lcd_puts2>:

void
lcd_puts2(const char *s)
{
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	fc 01       	movw	r30, r24
	char c;
	while ((c = *(s++)) != 0) {
 260:	04 c0       	rjmp	.+8      	; 0x26a <lcd_puts2+0x10>
		write(c, 1);
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	0e 94 ce 00 	call	0x19c	; 0x19c <write>

void
lcd_puts2(const char *s)
{
	char c;
	while ((c = *(s++)) != 0) {
 268:	fe 01       	movw	r30, r28
 26a:	ef 01       	movw	r28, r30
 26c:	21 96       	adiw	r28, 0x01	; 1
 26e:	80 81       	ld	r24, Z
 270:	81 11       	cpse	r24, r1
 272:	f7 cf       	rjmp	.-18     	; 0x262 <lcd_puts2+0x8>
		write(c, 1);
	}
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <avr_wait>:
}

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
 27a:	23 e0       	ldi	r18, 0x03	; 3
 27c:	23 bf       	out	0x33, r18	; 51
	while (msec--) {
 27e:	0a c0       	rjmp	.+20     	; 0x294 <avr_wait+0x1a>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.0001);
 280:	83 ef       	ldi	r24, 0xF3	; 243
 282:	82 bf       	out	0x32, r24	; 50
		SET_BIT(TIFR, TOV0);
 284:	88 b7       	in	r24, 0x38	; 56
 286:	81 60       	ori	r24, 0x01	; 1
 288:	88 bf       	out	0x38, r24	; 56
		WDR();
 28a:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
 28c:	08 b6       	in	r0, 0x38	; 56
 28e:	00 fe       	sbrs	r0, 0
 290:	fd cf       	rjmp	.-6      	; 0x28c <avr_wait+0x12>

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
 292:	c9 01       	movw	r24, r18
 294:	9c 01       	movw	r18, r24
 296:	21 50       	subi	r18, 0x01	; 1
 298:	31 09       	sbc	r19, r1
 29a:	89 2b       	or	r24, r25
 29c:	89 f7       	brne	.-30     	; 0x280 <avr_wait+0x6>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.0001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
 29e:	13 be       	out	0x33, r1	; 51
 2a0:	08 95       	ret

000002a2 <main>:
    		  4, 5, 6, 10,
			  7, 8, 9, 10,
		     10, 0, 10, 10};

int main(void)
{
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
 2aa:	60 97       	sbiw	r28, 0x10	; 16
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	f8 94       	cli
 2b0:	de bf       	out	0x3e, r29	; 62
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	cd bf       	out	0x3d, r28	; 61
	lcd_init();
 2b6:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_init>
	lcd_clr();
 2ba:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_clr>
	lcd_pos(0,0);
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	0e 94 11 01 	call	0x222	; 0x222 <lcd_pos>
	Equation savedEq;
	int attempt = 0;
 2c6:	e1 2c       	mov	r14, r1
 2c8:	f1 2c       	mov	r15, r1
	
    while (1) 
    {
		Equation eq = randomEq(); //continuously randomized
 2ca:	0e 94 ae 01 	call	0x35c	; 0x35c <randomEq>
 2ce:	29 87       	std	Y+9, r18	; 0x09
 2d0:	3a 87       	std	Y+10, r19	; 0x0a
 2d2:	4b 87       	std	Y+11, r20	; 0x0b
 2d4:	5c 87       	std	Y+12, r21	; 0x0c
 2d6:	6d 87       	std	Y+13, r22	; 0x0d
 2d8:	7e 87       	std	Y+14, r23	; 0x0e
 2da:	8f 87       	std	Y+15, r24	; 0x0f
 2dc:	98 8b       	std	Y+16, r25	; 0x10
		
		if (get_key() == 16) //D to display
 2de:	0e 94 74 00 	call	0xe8	; 0xe8 <get_key>
 2e2:	40 97       	sbiw	r24, 0x10	; 16
 2e4:	b1 f5       	brne	.+108    	; 0x352 <main+0xb0>
		{
			lcd_clr();
 2e6:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_clr>
			if (attempt == 0) //first attempt => new question
 2ea:	e1 14       	cp	r14, r1
 2ec:	f1 04       	cpc	r15, r1
 2ee:	49 f4       	brne	.+18     	; 0x302 <main+0x60>
			{
				savedEq = eq;
 2f0:	88 e0       	ldi	r24, 0x08	; 8
 2f2:	fe 01       	movw	r30, r28
 2f4:	39 96       	adiw	r30, 0x09	; 9
 2f6:	de 01       	movw	r26, r28
 2f8:	11 96       	adiw	r26, 0x01	; 1
 2fa:	01 90       	ld	r0, Z+
 2fc:	0d 92       	st	X+, r0
 2fe:	8a 95       	dec	r24
 300:	e1 f7       	brne	.-8      	; 0x2fa <main+0x58>
			}
			printEq(savedEq); //display equation
 302:	29 81       	ldd	r18, Y+1	; 0x01
 304:	3a 81       	ldd	r19, Y+2	; 0x02
 306:	4b 81       	ldd	r20, Y+3	; 0x03
 308:	5c 81       	ldd	r21, Y+4	; 0x04
 30a:	6d 81       	ldd	r22, Y+5	; 0x05
 30c:	7e 81       	ldd	r23, Y+6	; 0x06
 30e:	8f 81       	ldd	r24, Y+7	; 0x07
 310:	98 85       	ldd	r25, Y+8	; 0x08
 312:	0e 94 71 02 	call	0x4e2	; 0x4e2 <printEq>
			int ans = getAns(); //get user answer
 316:	0e 94 b1 02 	call	0x562	; 0x562 <getAns>
			int correct = checkAns(savedEq, ans); //check answer
 31a:	8c 01       	movw	r16, r24
 31c:	29 81       	ldd	r18, Y+1	; 0x01
 31e:	3a 81       	ldd	r19, Y+2	; 0x02
 320:	4b 81       	ldd	r20, Y+3	; 0x03
 322:	5c 81       	ldd	r21, Y+4	; 0x04
 324:	6d 81       	ldd	r22, Y+5	; 0x05
 326:	7e 81       	ldd	r23, Y+6	; 0x06
 328:	8f 81       	ldd	r24, Y+7	; 0x07
 32a:	98 85       	ldd	r25, Y+8	; 0x08
 32c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <checkAns>
			if (correct)
 330:	89 2b       	or	r24, r25
 332:	39 f0       	breq	.+14     	; 0x342 <main+0xa0>
			{
				avr_wait(20000);
 334:	80 e2       	ldi	r24, 0x20	; 32
 336:	9e e4       	ldi	r25, 0x4E	; 78
 338:	0e 94 3d 01 	call	0x27a	; 0x27a <avr_wait>
				lcd_clr();
 33c:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_clr>
 340:	08 c0       	rjmp	.+16     	; 0x352 <main+0xb0>
			} else
			{
				if (attempt == 0)
 342:	ef 28       	or	r14, r15
 344:	21 f4       	brne	.+8      	; 0x34e <main+0xac>
				{
					attempt = 1;
 346:	ee 24       	eor	r14, r14
 348:	e3 94       	inc	r14
 34a:	f1 2c       	mov	r15, r1
 34c:	02 c0       	rjmp	.+4      	; 0x352 <main+0xb0>
				} else //if attempt == 1
				{
					attempt = 0;
 34e:	e1 2c       	mov	r14, r1
 350:	f1 2c       	mov	r15, r1
				}
			}
	
		}
		
		avr_wait(2500);
 352:	84 ec       	ldi	r24, 0xC4	; 196
 354:	99 e0       	ldi	r25, 0x09	; 9
 356:	0e 94 3d 01 	call	0x27a	; 0x27a <avr_wait>
    }
 35a:	b7 cf       	rjmp	.-146    	; 0x2ca <main+0x28>

0000035c <randomEq>:
	}
	
	lcd_put(hun + '0');
	lcd_put(ten + '0');
	lcd_put(ans + '0');
}
 35c:	af 92       	push	r10
 35e:	bf 92       	push	r11
 360:	cf 92       	push	r12
 362:	df 92       	push	r13
 364:	ef 92       	push	r14
 366:	ff 92       	push	r15
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
 374:	60 97       	sbiw	r28, 0x10	; 16
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	f8 94       	cli
 37a:	de bf       	out	0x3e, r29	; 62
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	cd bf       	out	0x3d, r28	; 61
 380:	0e 94 23 04 	call	0x846	; 0x846 <rand>
 384:	0a e0       	ldi	r16, 0x0A	; 10
 386:	10 e0       	ldi	r17, 0x00	; 0
 388:	b8 01       	movw	r22, r16
 38a:	0e 94 af 03 	call	0x75e	; 0x75e <__divmodhi4>
 38e:	5c 01       	movw	r10, r24
 390:	0e 94 23 04 	call	0x846	; 0x846 <rand>
 394:	b8 01       	movw	r22, r16
 396:	0e 94 af 03 	call	0x75e	; 0x75e <__divmodhi4>
 39a:	6c 01       	movw	r12, r24
 39c:	0e 94 23 04 	call	0x846	; 0x846 <rand>
 3a0:	b8 01       	movw	r22, r16
 3a2:	0e 94 af 03 	call	0x75e	; 0x75e <__divmodhi4>
 3a6:	7c 01       	movw	r14, r24
 3a8:	0e 94 23 04 	call	0x846	; 0x846 <rand>
 3ac:	81 70       	andi	r24, 0x01	; 1
 3ae:	90 78       	andi	r25, 0x80	; 128
 3b0:	99 23       	and	r25, r25
 3b2:	24 f4       	brge	.+8      	; 0x3bc <randomEq+0x60>
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	8e 6f       	ori	r24, 0xFE	; 254
 3b8:	9f 6f       	ori	r25, 0xFF	; 255
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	8c 01       	movw	r16, r24
 3be:	0e 94 23 04 	call	0x846	; 0x846 <rand>
 3c2:	81 70       	andi	r24, 0x01	; 1
 3c4:	90 78       	andi	r25, 0x80	; 128
 3c6:	99 23       	and	r25, r25
 3c8:	24 f4       	brge	.+8      	; 0x3d2 <randomEq+0x76>
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	8e 6f       	ori	r24, 0xFE	; 254
 3ce:	9f 6f       	ori	r25, 0xFF	; 255
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	01 2b       	or	r16, r17
 3d6:	09 f0       	breq	.+2      	; 0x3da <randomEq+0x7e>
 3d8:	20 e0       	ldi	r18, 0x00	; 0
 3da:	31 e0       	ldi	r19, 0x01	; 1
 3dc:	89 2b       	or	r24, r25
 3de:	09 f0       	breq	.+2      	; 0x3e2 <randomEq+0x86>
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	ba 86       	std	Y+10, r11	; 0x0a
 3e4:	a9 86       	std	Y+9, r10	; 0x09
 3e6:	dc 86       	std	Y+12, r13	; 0x0c
 3e8:	cb 86       	std	Y+11, r12	; 0x0b
 3ea:	fe 86       	std	Y+14, r15	; 0x0e
 3ec:	ed 86       	std	Y+13, r14	; 0x0d
 3ee:	2f 87       	std	Y+15, r18	; 0x0f
 3f0:	38 8b       	std	Y+16, r19	; 0x10
 3f2:	88 e0       	ldi	r24, 0x08	; 8
 3f4:	fe 01       	movw	r30, r28
 3f6:	39 96       	adiw	r30, 0x09	; 9
 3f8:	de 01       	movw	r26, r28
 3fa:	11 96       	adiw	r26, 0x01	; 1
 3fc:	01 90       	ld	r0, Z+
 3fe:	0d 92       	st	X+, r0
 400:	8a 95       	dec	r24
 402:	e1 f7       	brne	.-8      	; 0x3fc <randomEq+0xa0>
 404:	29 81       	ldd	r18, Y+1	; 0x01
 406:	3a 81       	ldd	r19, Y+2	; 0x02
 408:	4b 81       	ldd	r20, Y+3	; 0x03
 40a:	5c 81       	ldd	r21, Y+4	; 0x04
 40c:	6d 81       	ldd	r22, Y+5	; 0x05
 40e:	7e 81       	ldd	r23, Y+6	; 0x06
 410:	8f 81       	ldd	r24, Y+7	; 0x07
 412:	98 85       	ldd	r25, Y+8	; 0x08
 414:	60 96       	adiw	r28, 0x10	; 16
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	f8 94       	cli
 41a:	de bf       	out	0x3e, r29	; 62
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	cd bf       	out	0x3d, r28	; 61
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	0f 91       	pop	r16
 428:	ff 90       	pop	r15
 42a:	ef 90       	pop	r14
 42c:	df 90       	pop	r13
 42e:	cf 90       	pop	r12
 430:	bf 90       	pop	r11
 432:	af 90       	pop	r10
 434:	08 95       	ret

00000436 <calcEq>:
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	cd b7       	in	r28, 0x3d	; 61
 43c:	de b7       	in	r29, 0x3e	; 62
 43e:	28 97       	sbiw	r28, 0x08	; 8
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	f8 94       	cli
 444:	de bf       	out	0x3e, r29	; 62
 446:	0f be       	out	0x3f, r0	; 63
 448:	cd bf       	out	0x3d, r28	; 61
 44a:	29 83       	std	Y+1, r18	; 0x01
 44c:	3a 83       	std	Y+2, r19	; 0x02
 44e:	4b 83       	std	Y+3, r20	; 0x03
 450:	5c 83       	std	Y+4, r21	; 0x04
 452:	6d 83       	std	Y+5, r22	; 0x05
 454:	7e 83       	std	Y+6, r23	; 0x06
 456:	98 87       	std	Y+8, r25	; 0x08
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	e9 f4       	brne	.+58     	; 0x496 <calcEq+0x60>
 45c:	29 81       	ldd	r18, Y+1	; 0x01
 45e:	3a 81       	ldd	r19, Y+2	; 0x02
 460:	8b 81       	ldd	r24, Y+3	; 0x03
 462:	9c 81       	ldd	r25, Y+4	; 0x04
 464:	28 9f       	mul	r18, r24
 466:	a0 01       	movw	r20, r0
 468:	29 9f       	mul	r18, r25
 46a:	50 0d       	add	r21, r0
 46c:	38 9f       	mul	r19, r24
 46e:	50 0d       	add	r21, r0
 470:	11 24       	eor	r1, r1
 472:	88 85       	ldd	r24, Y+8	; 0x08
 474:	81 30       	cpi	r24, 0x01	; 1
 476:	51 f4       	brne	.+20     	; 0x48c <calcEq+0x56>
 478:	2d 81       	ldd	r18, Y+5	; 0x05
 47a:	3e 81       	ldd	r19, Y+6	; 0x06
 47c:	42 9f       	mul	r20, r18
 47e:	c0 01       	movw	r24, r0
 480:	43 9f       	mul	r20, r19
 482:	90 0d       	add	r25, r0
 484:	52 9f       	mul	r21, r18
 486:	90 0d       	add	r25, r0
 488:	11 24       	eor	r1, r1
 48a:	22 c0       	rjmp	.+68     	; 0x4d0 <calcEq+0x9a>
 48c:	8d 81       	ldd	r24, Y+5	; 0x05
 48e:	9e 81       	ldd	r25, Y+6	; 0x06
 490:	84 0f       	add	r24, r20
 492:	95 1f       	adc	r25, r21
 494:	1d c0       	rjmp	.+58     	; 0x4d0 <calcEq+0x9a>
 496:	88 85       	ldd	r24, Y+8	; 0x08
 498:	81 30       	cpi	r24, 0x01	; 1
 49a:	81 f4       	brne	.+32     	; 0x4bc <calcEq+0x86>
 49c:	4b 81       	ldd	r20, Y+3	; 0x03
 49e:	5c 81       	ldd	r21, Y+4	; 0x04
 4a0:	8d 81       	ldd	r24, Y+5	; 0x05
 4a2:	9e 81       	ldd	r25, Y+6	; 0x06
 4a4:	48 9f       	mul	r20, r24
 4a6:	90 01       	movw	r18, r0
 4a8:	49 9f       	mul	r20, r25
 4aa:	30 0d       	add	r19, r0
 4ac:	58 9f       	mul	r21, r24
 4ae:	30 0d       	add	r19, r0
 4b0:	11 24       	eor	r1, r1
 4b2:	89 81       	ldd	r24, Y+1	; 0x01
 4b4:	9a 81       	ldd	r25, Y+2	; 0x02
 4b6:	82 0f       	add	r24, r18
 4b8:	93 1f       	adc	r25, r19
 4ba:	0a c0       	rjmp	.+20     	; 0x4d0 <calcEq+0x9a>
 4bc:	29 81       	ldd	r18, Y+1	; 0x01
 4be:	3a 81       	ldd	r19, Y+2	; 0x02
 4c0:	8b 81       	ldd	r24, Y+3	; 0x03
 4c2:	9c 81       	ldd	r25, Y+4	; 0x04
 4c4:	82 0f       	add	r24, r18
 4c6:	93 1f       	adc	r25, r19
 4c8:	2d 81       	ldd	r18, Y+5	; 0x05
 4ca:	3e 81       	ldd	r19, Y+6	; 0x06
 4cc:	82 0f       	add	r24, r18
 4ce:	93 1f       	adc	r25, r19
 4d0:	28 96       	adiw	r28, 0x08	; 8
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	f8 94       	cli
 4d6:	de bf       	out	0x3e, r29	; 62
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	cd bf       	out	0x3d, r28	; 61
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	08 95       	ret

000004e2 <printEq>:
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	cd b7       	in	r28, 0x3d	; 61
 4e8:	de b7       	in	r29, 0x3e	; 62
 4ea:	28 97       	sbiw	r28, 0x08	; 8
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	f8 94       	cli
 4f0:	de bf       	out	0x3e, r29	; 62
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	cd bf       	out	0x3d, r28	; 61
 4f6:	29 83       	std	Y+1, r18	; 0x01
 4f8:	3a 83       	std	Y+2, r19	; 0x02
 4fa:	4b 83       	std	Y+3, r20	; 0x03
 4fc:	5c 83       	std	Y+4, r21	; 0x04
 4fe:	6d 83       	std	Y+5, r22	; 0x05
 500:	7e 83       	std	Y+6, r23	; 0x06
 502:	8f 83       	std	Y+7, r24	; 0x07
 504:	98 87       	std	Y+8, r25	; 0x08
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 11 01 	call	0x222	; 0x222 <lcd_pos>
 512:	89 81       	ldd	r24, Y+1	; 0x01
 514:	9a 81       	ldd	r25, Y+2	; 0x02
 516:	c0 96       	adiw	r24, 0x30	; 48
 518:	0e 94 29 01 	call	0x252	; 0x252 <lcd_put>
 51c:	ef 81       	ldd	r30, Y+7	; 0x07
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	e2 56       	subi	r30, 0x62	; 98
 522:	ff 4f       	sbci	r31, 0xFF	; 255
 524:	80 81       	ld	r24, Z
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	0e 94 29 01 	call	0x252	; 0x252 <lcd_put>
 52c:	8b 81       	ldd	r24, Y+3	; 0x03
 52e:	9c 81       	ldd	r25, Y+4	; 0x04
 530:	c0 96       	adiw	r24, 0x30	; 48
 532:	0e 94 29 01 	call	0x252	; 0x252 <lcd_put>
 536:	e8 85       	ldd	r30, Y+8	; 0x08
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	e2 56       	subi	r30, 0x62	; 98
 53c:	ff 4f       	sbci	r31, 0xFF	; 255
 53e:	80 81       	ld	r24, Z
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	0e 94 29 01 	call	0x252	; 0x252 <lcd_put>
 546:	8d 81       	ldd	r24, Y+5	; 0x05
 548:	9e 81       	ldd	r25, Y+6	; 0x06
 54a:	c0 96       	adiw	r24, 0x30	; 48
 54c:	0e 94 29 01 	call	0x252	; 0x252 <lcd_put>
 550:	28 96       	adiw	r28, 0x08	; 8
 552:	0f b6       	in	r0, 0x3f	; 63
 554:	f8 94       	cli
 556:	de bf       	out	0x3e, r29	; 62
 558:	0f be       	out	0x3f, r0	; 63
 55a:	cd bf       	out	0x3d, r28	; 61
 55c:	df 91       	pop	r29
 55e:	cf 91       	pop	r28
 560:	08 95       	ret

00000562 <getAns>:

int getAns(void)
{
 562:	ef 92       	push	r14
 564:	ff 92       	push	r15
 566:	0f 93       	push	r16
 568:	1f 93       	push	r17
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
 56e:	cd b7       	in	r28, 0x3d	; 61
 570:	de b7       	in	r29, 0x3e	; 62
 572:	ac 97       	sbiw	r28, 0x2c	; 44
 574:	0f b6       	in	r0, 0x3f	; 63
 576:	f8 94       	cli
 578:	de bf       	out	0x3e, r29	; 62
 57a:	0f be       	out	0x3f, r0	; 63
 57c:	cd bf       	out	0x3d, r28	; 61
	int keys[] = {1, 2, 3, 10,
 57e:	80 e2       	ldi	r24, 0x20	; 32
 580:	e4 e6       	ldi	r30, 0x64	; 100
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	de 01       	movw	r26, r28
 586:	11 96       	adiw	r26, 0x01	; 1
 588:	01 90       	ld	r0, Z+
 58a:	0d 92       	st	X+, r0
 58c:	8a 95       	dec	r24
 58e:	e1 f7       	brne	.-8      	; 0x588 <getAns+0x26>
				  4, 5, 6, 10,
				  7, 8, 9, 10,
				 10, 0, 10, 10};
	
	lcd_pos(1,0);
 590:	60 e0       	ldi	r22, 0x00	; 0
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	0e 94 11 01 	call	0x222	; 0x222 <lcd_pos>
	char buf[] = "Ans: ";
 59c:	86 e0       	ldi	r24, 0x06	; 6
 59e:	e4 e8       	ldi	r30, 0x84	; 132
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	de 01       	movw	r26, r28
 5a4:	91 96       	adiw	r26, 0x21	; 33
 5a6:	01 90       	ld	r0, Z+
 5a8:	0d 92       	st	X+, r0
 5aa:	8a 95       	dec	r24
 5ac:	e1 f7       	brne	.-8      	; 0x5a6 <getAns+0x44>
	lcd_puts2(buf);
 5ae:	ce 01       	movw	r24, r28
 5b0:	81 96       	adiw	r24, 0x21	; 33
 5b2:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_puts2>
	
	int index = 0;
	int ans[] = {0,0,0};
 5b6:	18 a6       	std	Y+40, r1	; 0x28
 5b8:	1f a2       	std	Y+39, r1	; 0x27
 5ba:	1a a6       	std	Y+42, r1	; 0x2a
 5bc:	19 a6       	std	Y+41, r1	; 0x29
 5be:	1c a6       	std	Y+44, r1	; 0x2c
 5c0:	1b a6       	std	Y+43, r1	; 0x2b
	
	lcd_pos(1,0);
	char buf[] = "Ans: ";
	lcd_puts2(buf);
	
	int index = 0;
 5c2:	00 e0       	ldi	r16, 0x00	; 0
 5c4:	10 e0       	ldi	r17, 0x00	; 0
	int ans[] = {0,0,0};
	
	while(1)
	{
		if (is_pressed(3,3) && index != 0) { break ; } //press D for done
 5c6:	63 e0       	ldi	r22, 0x03	; 3
 5c8:	70 e0       	ldi	r23, 0x00	; 0
 5ca:	83 e0       	ldi	r24, 0x03	; 3
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 41 00 	call	0x82	; 0x82 <is_pressed>
 5d2:	89 2b       	or	r24, r25
 5d4:	19 f0       	breq	.+6      	; 0x5dc <getAns+0x7a>
 5d6:	01 15       	cp	r16, r1
 5d8:	11 05       	cpc	r17, r1
 5da:	c1 f5       	brne	.+112    	; 0x64c <getAns+0xea>
			
		int k = get_key();
 5dc:	0e 94 74 00 	call	0xe8	; 0xe8 <get_key>
		if (k > 0 && k <= 16 && k%4 && k!=13 && k!=15 && index < 3) //key press only numbers up to 3 times
 5e0:	9c 01       	movw	r18, r24
 5e2:	21 50       	subi	r18, 0x01	; 1
 5e4:	31 09       	sbc	r19, r1
 5e6:	20 31       	cpi	r18, 0x10	; 16
 5e8:	31 05       	cpc	r19, r1
 5ea:	58 f5       	brcc	.+86     	; 0x642 <getAns+0xe0>
 5ec:	9c 01       	movw	r18, r24
 5ee:	23 70       	andi	r18, 0x03	; 3
 5f0:	33 27       	eor	r19, r19
 5f2:	23 2b       	or	r18, r19
 5f4:	31 f1       	breq	.+76     	; 0x642 <getAns+0xe0>
 5f6:	8d 30       	cpi	r24, 0x0D	; 13
 5f8:	91 05       	cpc	r25, r1
 5fa:	19 f1       	breq	.+70     	; 0x642 <getAns+0xe0>
 5fc:	8f 30       	cpi	r24, 0x0F	; 15
 5fe:	91 05       	cpc	r25, r1
 600:	01 f1       	breq	.+64     	; 0x642 <getAns+0xe0>
 602:	03 30       	cpi	r16, 0x03	; 3
 604:	11 05       	cpc	r17, r1
 606:	ec f4       	brge	.+58     	; 0x642 <getAns+0xe0>
		{
			int num = keys[k - 1];
 608:	fc 01       	movw	r30, r24
 60a:	31 97       	sbiw	r30, 0x01	; 1
 60c:	ee 0f       	add	r30, r30
 60e:	ff 1f       	adc	r31, r31
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	8c 0f       	add	r24, r28
 616:	9d 1f       	adc	r25, r29
 618:	e8 0f       	add	r30, r24
 61a:	f9 1f       	adc	r31, r25
 61c:	e0 80       	ld	r14, Z
 61e:	f1 80       	ldd	r15, Z+1	; 0x01
			lcd_put(num + '0');
 620:	c7 01       	movw	r24, r14
 622:	c0 96       	adiw	r24, 0x30	; 48
 624:	0e 94 29 01 	call	0x252	; 0x252 <lcd_put>
			ans[index] = num;
 628:	f8 01       	movw	r30, r16
 62a:	ee 0f       	add	r30, r30
 62c:	ff 1f       	adc	r31, r31
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	8c 0f       	add	r24, r28
 634:	9d 1f       	adc	r25, r29
 636:	e8 0f       	add	r30, r24
 638:	f9 1f       	adc	r31, r25
 63a:	f7 a2       	std	Z+39, r15	; 0x27
 63c:	e6 a2       	std	Z+38, r14	; 0x26
			index++;
 63e:	0f 5f       	subi	r16, 0xFF	; 255
 640:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		avr_wait(3000);
 642:	88 eb       	ldi	r24, 0xB8	; 184
 644:	9b e0       	ldi	r25, 0x0B	; 11
 646:	0e 94 3d 01 	call	0x27a	; 0x27a <avr_wait>
	}
 64a:	bd cf       	rjmp	.-134    	; 0x5c6 <getAns+0x64>
	
	lcd_clr();
 64c:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_clr>
	
	if (index == 1)
 650:	01 30       	cpi	r16, 0x01	; 1
 652:	11 05       	cpc	r17, r1
 654:	19 f4       	brne	.+6      	; 0x65c <getAns+0xfa>
	{
		return ans[0];
 656:	8f a1       	ldd	r24, Y+39	; 0x27
 658:	98 a5       	ldd	r25, Y+40	; 0x28
 65a:	33 c0       	rjmp	.+102    	; 0x6c2 <getAns+0x160>
	} else if (index == 2)
 65c:	02 30       	cpi	r16, 0x02	; 2
 65e:	11 05       	cpc	r17, r1
 660:	99 f4       	brne	.+38     	; 0x688 <getAns+0x126>
	{
		return ans[0] * 10 + ans[1];
 662:	4f a1       	ldd	r20, Y+39	; 0x27
 664:	58 a5       	ldd	r21, Y+40	; 0x28
 666:	ca 01       	movw	r24, r20
 668:	88 0f       	add	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	44 0f       	add	r20, r20
 66e:	55 1f       	adc	r21, r21
 670:	44 0f       	add	r20, r20
 672:	55 1f       	adc	r21, r21
 674:	44 0f       	add	r20, r20
 676:	55 1f       	adc	r21, r21
 678:	9c 01       	movw	r18, r24
 67a:	24 0f       	add	r18, r20
 67c:	35 1f       	adc	r19, r21
 67e:	89 a5       	ldd	r24, Y+41	; 0x29
 680:	9a a5       	ldd	r25, Y+42	; 0x2a
 682:	82 0f       	add	r24, r18
 684:	93 1f       	adc	r25, r19
 686:	1d c0       	rjmp	.+58     	; 0x6c2 <getAns+0x160>
	} else //index == 3
	{
		return ans[0] * 100 + ans[1] * 10 + ans[2];
 688:	2f a1       	ldd	r18, Y+39	; 0x27
 68a:	38 a5       	ldd	r19, Y+40	; 0x28
 68c:	44 e6       	ldi	r20, 0x64	; 100
 68e:	42 9f       	mul	r20, r18
 690:	c0 01       	movw	r24, r0
 692:	43 9f       	mul	r20, r19
 694:	90 0d       	add	r25, r0
 696:	11 24       	eor	r1, r1
 698:	29 a5       	ldd	r18, Y+41	; 0x29
 69a:	3a a5       	ldd	r19, Y+42	; 0x2a
 69c:	b9 01       	movw	r22, r18
 69e:	66 0f       	add	r22, r22
 6a0:	77 1f       	adc	r23, r23
 6a2:	a9 01       	movw	r20, r18
 6a4:	44 0f       	add	r20, r20
 6a6:	55 1f       	adc	r21, r21
 6a8:	44 0f       	add	r20, r20
 6aa:	55 1f       	adc	r21, r21
 6ac:	44 0f       	add	r20, r20
 6ae:	55 1f       	adc	r21, r21
 6b0:	9b 01       	movw	r18, r22
 6b2:	24 0f       	add	r18, r20
 6b4:	35 1f       	adc	r19, r21
 6b6:	28 0f       	add	r18, r24
 6b8:	39 1f       	adc	r19, r25
 6ba:	8b a5       	ldd	r24, Y+43	; 0x2b
 6bc:	9c a5       	ldd	r25, Y+44	; 0x2c
 6be:	82 0f       	add	r24, r18
 6c0:	93 1f       	adc	r25, r19
	}
}
 6c2:	ac 96       	adiw	r28, 0x2c	; 44
 6c4:	0f b6       	in	r0, 0x3f	; 63
 6c6:	f8 94       	cli
 6c8:	de bf       	out	0x3e, r29	; 62
 6ca:	0f be       	out	0x3f, r0	; 63
 6cc:	cd bf       	out	0x3d, r28	; 61
 6ce:	df 91       	pop	r29
 6d0:	cf 91       	pop	r28
 6d2:	1f 91       	pop	r17
 6d4:	0f 91       	pop	r16
 6d6:	ff 90       	pop	r15
 6d8:	ef 90       	pop	r14
 6da:	08 95       	ret

000006dc <checkAns>:

int checkAns(Equation eq, int ans)
{
 6dc:	0f 93       	push	r16
 6de:	1f 93       	push	r17
 6e0:	cf 93       	push	r28
 6e2:	df 93       	push	r29
 6e4:	cd b7       	in	r28, 0x3d	; 61
 6e6:	de b7       	in	r29, 0x3e	; 62
 6e8:	28 97       	sbiw	r28, 0x08	; 8
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	f8 94       	cli
 6ee:	de bf       	out	0x3e, r29	; 62
 6f0:	0f be       	out	0x3f, r0	; 63
 6f2:	cd bf       	out	0x3d, r28	; 61
 6f4:	29 83       	std	Y+1, r18	; 0x01
 6f6:	3a 83       	std	Y+2, r19	; 0x02
 6f8:	4b 83       	std	Y+3, r20	; 0x03
 6fa:	5c 83       	std	Y+4, r21	; 0x04
 6fc:	6d 83       	std	Y+5, r22	; 0x05
 6fe:	7e 83       	std	Y+6, r23	; 0x06
 700:	8f 83       	std	Y+7, r24	; 0x07
 702:	98 87       	std	Y+8, r25	; 0x08
	lcd_clr();
 704:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_clr>
	lcd_pos(0,0);
 708:	60 e0       	ldi	r22, 0x00	; 0
 70a:	70 e0       	ldi	r23, 0x00	; 0
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	0e 94 11 01 	call	0x222	; 0x222 <lcd_pos>
	int right = calcEq(eq);
 714:	29 81       	ldd	r18, Y+1	; 0x01
 716:	3a 81       	ldd	r19, Y+2	; 0x02
 718:	4b 81       	ldd	r20, Y+3	; 0x03
 71a:	5c 81       	ldd	r21, Y+4	; 0x04
 71c:	6d 81       	ldd	r22, Y+5	; 0x05
 71e:	7e 81       	ldd	r23, Y+6	; 0x06
 720:	8f 81       	ldd	r24, Y+7	; 0x07
 722:	98 85       	ldd	r25, Y+8	; 0x08
 724:	0e 94 1b 02 	call	0x436	; 0x436 <calcEq>
	if (right == ans)
 728:	80 17       	cp	r24, r16
 72a:	91 07       	cpc	r25, r17
 72c:	39 f4       	brne	.+14     	; 0x73c <checkAns+0x60>
	{
		lcd_puts2("Correct!");
 72e:	8a e8       	ldi	r24, 0x8A	; 138
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_puts2>
		return 1;
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	06 c0       	rjmp	.+12     	; 0x748 <checkAns+0x6c>
	}
	else
	{
		lcd_puts2("Try again.");
 73c:	83 e9       	ldi	r24, 0x93	; 147
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_puts2>
		return 0;
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	90 e0       	ldi	r25, 0x00	; 0
	}
 748:	28 96       	adiw	r28, 0x08	; 8
 74a:	0f b6       	in	r0, 0x3f	; 63
 74c:	f8 94       	cli
 74e:	de bf       	out	0x3e, r29	; 62
 750:	0f be       	out	0x3f, r0	; 63
 752:	cd bf       	out	0x3d, r28	; 61
 754:	df 91       	pop	r29
 756:	cf 91       	pop	r28
 758:	1f 91       	pop	r17
 75a:	0f 91       	pop	r16
 75c:	08 95       	ret

0000075e <__divmodhi4>:
 75e:	97 fb       	bst	r25, 7
 760:	07 2e       	mov	r0, r23
 762:	16 f4       	brtc	.+4      	; 0x768 <__divmodhi4+0xa>
 764:	00 94       	com	r0
 766:	07 d0       	rcall	.+14     	; 0x776 <__divmodhi4_neg1>
 768:	77 fd       	sbrc	r23, 7
 76a:	09 d0       	rcall	.+18     	; 0x77e <__divmodhi4_neg2>
 76c:	0e 94 c3 03 	call	0x786	; 0x786 <__udivmodhi4>
 770:	07 fc       	sbrc	r0, 7
 772:	05 d0       	rcall	.+10     	; 0x77e <__divmodhi4_neg2>
 774:	3e f4       	brtc	.+14     	; 0x784 <__divmodhi4_exit>

00000776 <__divmodhi4_neg1>:
 776:	90 95       	com	r25
 778:	81 95       	neg	r24
 77a:	9f 4f       	sbci	r25, 0xFF	; 255
 77c:	08 95       	ret

0000077e <__divmodhi4_neg2>:
 77e:	70 95       	com	r23
 780:	61 95       	neg	r22
 782:	7f 4f       	sbci	r23, 0xFF	; 255

00000784 <__divmodhi4_exit>:
 784:	08 95       	ret

00000786 <__udivmodhi4>:
 786:	aa 1b       	sub	r26, r26
 788:	bb 1b       	sub	r27, r27
 78a:	51 e1       	ldi	r21, 0x11	; 17
 78c:	07 c0       	rjmp	.+14     	; 0x79c <__udivmodhi4_ep>

0000078e <__udivmodhi4_loop>:
 78e:	aa 1f       	adc	r26, r26
 790:	bb 1f       	adc	r27, r27
 792:	a6 17       	cp	r26, r22
 794:	b7 07       	cpc	r27, r23
 796:	10 f0       	brcs	.+4      	; 0x79c <__udivmodhi4_ep>
 798:	a6 1b       	sub	r26, r22
 79a:	b7 0b       	sbc	r27, r23

0000079c <__udivmodhi4_ep>:
 79c:	88 1f       	adc	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	5a 95       	dec	r21
 7a2:	a9 f7       	brne	.-22     	; 0x78e <__udivmodhi4_loop>
 7a4:	80 95       	com	r24
 7a6:	90 95       	com	r25
 7a8:	bc 01       	movw	r22, r24
 7aa:	cd 01       	movw	r24, r26
 7ac:	08 95       	ret

000007ae <do_rand>:
 7ae:	8f 92       	push	r8
 7b0:	9f 92       	push	r9
 7b2:	af 92       	push	r10
 7b4:	bf 92       	push	r11
 7b6:	cf 92       	push	r12
 7b8:	df 92       	push	r13
 7ba:	ef 92       	push	r14
 7bc:	ff 92       	push	r15
 7be:	cf 93       	push	r28
 7c0:	df 93       	push	r29
 7c2:	ec 01       	movw	r28, r24
 7c4:	68 81       	ld	r22, Y
 7c6:	79 81       	ldd	r23, Y+1	; 0x01
 7c8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ca:	9b 81       	ldd	r25, Y+3	; 0x03
 7cc:	61 15       	cp	r22, r1
 7ce:	71 05       	cpc	r23, r1
 7d0:	81 05       	cpc	r24, r1
 7d2:	91 05       	cpc	r25, r1
 7d4:	21 f4       	brne	.+8      	; 0x7de <do_rand+0x30>
 7d6:	64 e2       	ldi	r22, 0x24	; 36
 7d8:	79 ed       	ldi	r23, 0xD9	; 217
 7da:	8b e5       	ldi	r24, 0x5B	; 91
 7dc:	97 e0       	ldi	r25, 0x07	; 7
 7de:	2d e1       	ldi	r18, 0x1D	; 29
 7e0:	33 ef       	ldi	r19, 0xF3	; 243
 7e2:	41 e0       	ldi	r20, 0x01	; 1
 7e4:	50 e0       	ldi	r21, 0x00	; 0
 7e6:	0e 94 33 04 	call	0x866	; 0x866 <__divmodsi4>
 7ea:	49 01       	movw	r8, r18
 7ec:	5a 01       	movw	r10, r20
 7ee:	9b 01       	movw	r18, r22
 7f0:	ac 01       	movw	r20, r24
 7f2:	a7 ea       	ldi	r26, 0xA7	; 167
 7f4:	b1 e4       	ldi	r27, 0x41	; 65
 7f6:	0e 94 52 04 	call	0x8a4	; 0x8a4 <__muluhisi3>
 7fa:	6b 01       	movw	r12, r22
 7fc:	7c 01       	movw	r14, r24
 7fe:	ac ee       	ldi	r26, 0xEC	; 236
 800:	b4 ef       	ldi	r27, 0xF4	; 244
 802:	a5 01       	movw	r20, r10
 804:	94 01       	movw	r18, r8
 806:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__mulohisi3>
 80a:	dc 01       	movw	r26, r24
 80c:	cb 01       	movw	r24, r22
 80e:	8c 0d       	add	r24, r12
 810:	9d 1d       	adc	r25, r13
 812:	ae 1d       	adc	r26, r14
 814:	bf 1d       	adc	r27, r15
 816:	b7 ff       	sbrs	r27, 7
 818:	03 c0       	rjmp	.+6      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 81a:	01 97       	sbiw	r24, 0x01	; 1
 81c:	a1 09       	sbc	r26, r1
 81e:	b0 48       	sbci	r27, 0x80	; 128
 820:	88 83       	st	Y, r24
 822:	99 83       	std	Y+1, r25	; 0x01
 824:	aa 83       	std	Y+2, r26	; 0x02
 826:	bb 83       	std	Y+3, r27	; 0x03
 828:	9f 77       	andi	r25, 0x7F	; 127
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	ff 90       	pop	r15
 830:	ef 90       	pop	r14
 832:	df 90       	pop	r13
 834:	cf 90       	pop	r12
 836:	bf 90       	pop	r11
 838:	af 90       	pop	r10
 83a:	9f 90       	pop	r9
 83c:	8f 90       	pop	r8
 83e:	08 95       	ret

00000840 <rand_r>:
 840:	0e 94 d7 03 	call	0x7ae	; 0x7ae <do_rand>
 844:	08 95       	ret

00000846 <rand>:
 846:	80 e6       	ldi	r24, 0x60	; 96
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <do_rand>
 84e:	08 95       	ret

00000850 <srand>:
 850:	a0 e0       	ldi	r26, 0x00	; 0
 852:	b0 e0       	ldi	r27, 0x00	; 0
 854:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 858:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 85c:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 860:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 864:	08 95       	ret

00000866 <__divmodsi4>:
 866:	05 2e       	mov	r0, r21
 868:	97 fb       	bst	r25, 7
 86a:	1e f4       	brtc	.+6      	; 0x872 <__divmodsi4+0xc>
 86c:	00 94       	com	r0
 86e:	0e 94 4a 04 	call	0x894	; 0x894 <__negsi2>
 872:	57 fd       	sbrc	r21, 7
 874:	07 d0       	rcall	.+14     	; 0x884 <__divmodsi4_neg2>
 876:	0e 94 65 04 	call	0x8ca	; 0x8ca <__udivmodsi4>
 87a:	07 fc       	sbrc	r0, 7
 87c:	03 d0       	rcall	.+6      	; 0x884 <__divmodsi4_neg2>
 87e:	4e f4       	brtc	.+18     	; 0x892 <__divmodsi4_exit>
 880:	0c 94 4a 04 	jmp	0x894	; 0x894 <__negsi2>

00000884 <__divmodsi4_neg2>:
 884:	50 95       	com	r21
 886:	40 95       	com	r20
 888:	30 95       	com	r19
 88a:	21 95       	neg	r18
 88c:	3f 4f       	sbci	r19, 0xFF	; 255
 88e:	4f 4f       	sbci	r20, 0xFF	; 255
 890:	5f 4f       	sbci	r21, 0xFF	; 255

00000892 <__divmodsi4_exit>:
 892:	08 95       	ret

00000894 <__negsi2>:
 894:	90 95       	com	r25
 896:	80 95       	com	r24
 898:	70 95       	com	r23
 89a:	61 95       	neg	r22
 89c:	7f 4f       	sbci	r23, 0xFF	; 255
 89e:	8f 4f       	sbci	r24, 0xFF	; 255
 8a0:	9f 4f       	sbci	r25, 0xFF	; 255
 8a2:	08 95       	ret

000008a4 <__muluhisi3>:
 8a4:	0e 94 87 04 	call	0x90e	; 0x90e <__umulhisi3>
 8a8:	a5 9f       	mul	r26, r21
 8aa:	90 0d       	add	r25, r0
 8ac:	b4 9f       	mul	r27, r20
 8ae:	90 0d       	add	r25, r0
 8b0:	a4 9f       	mul	r26, r20
 8b2:	80 0d       	add	r24, r0
 8b4:	91 1d       	adc	r25, r1
 8b6:	11 24       	eor	r1, r1
 8b8:	08 95       	ret

000008ba <__mulshisi3>:
 8ba:	b7 ff       	sbrs	r27, 7
 8bc:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__muluhisi3>

000008c0 <__mulohisi3>:
 8c0:	0e 94 52 04 	call	0x8a4	; 0x8a4 <__muluhisi3>
 8c4:	82 1b       	sub	r24, r18
 8c6:	93 0b       	sbc	r25, r19
 8c8:	08 95       	ret

000008ca <__udivmodsi4>:
 8ca:	a1 e2       	ldi	r26, 0x21	; 33
 8cc:	1a 2e       	mov	r1, r26
 8ce:	aa 1b       	sub	r26, r26
 8d0:	bb 1b       	sub	r27, r27
 8d2:	fd 01       	movw	r30, r26
 8d4:	0d c0       	rjmp	.+26     	; 0x8f0 <__udivmodsi4_ep>

000008d6 <__udivmodsi4_loop>:
 8d6:	aa 1f       	adc	r26, r26
 8d8:	bb 1f       	adc	r27, r27
 8da:	ee 1f       	adc	r30, r30
 8dc:	ff 1f       	adc	r31, r31
 8de:	a2 17       	cp	r26, r18
 8e0:	b3 07       	cpc	r27, r19
 8e2:	e4 07       	cpc	r30, r20
 8e4:	f5 07       	cpc	r31, r21
 8e6:	20 f0       	brcs	.+8      	; 0x8f0 <__udivmodsi4_ep>
 8e8:	a2 1b       	sub	r26, r18
 8ea:	b3 0b       	sbc	r27, r19
 8ec:	e4 0b       	sbc	r30, r20
 8ee:	f5 0b       	sbc	r31, r21

000008f0 <__udivmodsi4_ep>:
 8f0:	66 1f       	adc	r22, r22
 8f2:	77 1f       	adc	r23, r23
 8f4:	88 1f       	adc	r24, r24
 8f6:	99 1f       	adc	r25, r25
 8f8:	1a 94       	dec	r1
 8fa:	69 f7       	brne	.-38     	; 0x8d6 <__udivmodsi4_loop>
 8fc:	60 95       	com	r22
 8fe:	70 95       	com	r23
 900:	80 95       	com	r24
 902:	90 95       	com	r25
 904:	9b 01       	movw	r18, r22
 906:	ac 01       	movw	r20, r24
 908:	bd 01       	movw	r22, r26
 90a:	cf 01       	movw	r24, r30
 90c:	08 95       	ret

0000090e <__umulhisi3>:
 90e:	a2 9f       	mul	r26, r18
 910:	b0 01       	movw	r22, r0
 912:	b3 9f       	mul	r27, r19
 914:	c0 01       	movw	r24, r0
 916:	a3 9f       	mul	r26, r19
 918:	70 0d       	add	r23, r0
 91a:	81 1d       	adc	r24, r1
 91c:	11 24       	eor	r1, r1
 91e:	91 1d       	adc	r25, r1
 920:	b2 9f       	mul	r27, r18
 922:	70 0d       	add	r23, r0
 924:	81 1d       	adc	r24, r1
 926:	11 24       	eor	r1, r1
 928:	91 1d       	adc	r25, r1
 92a:	08 95       	ret

0000092c <_exit>:
 92c:	f8 94       	cli

0000092e <__stop_program>:
 92e:	ff cf       	rjmp	.-2      	; 0x92e <__stop_program>
