
project5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000095e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  0000095e  000009d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000a12  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a44  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001650  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000aab  00000000  00000000  000021f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a1f  00000000  00000000  00002ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f0  00000000  00000000  000036c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051f  00000000  00000000  000039b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b44  00000000  00000000  00003ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00004a17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e5       	ldi	r30, 0x5E	; 94
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
  7a:	0c 94 ad 04 	jmp	0x95a	; 0x95a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <is_pressed>:
  82:	9b b3       	in	r25, 0x1b	; 27
  84:	9e 7f       	andi	r25, 0xFE	; 254
  86:	9b bb       	out	0x1b, r25	; 27
  88:	14 ba       	out	0x14, r1	; 20
  8a:	90 ef       	ldi	r25, 0xF0	; 240
  8c:	95 bb       	out	0x15, r25	; 21
  8e:	44 b3       	in	r20, 0x14	; 20
  90:	21 e0       	ldi	r18, 0x01	; 1
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	f9 01       	movw	r30, r18
  96:	02 c0       	rjmp	.+4      	; 0x9c <is_pressed+0x1a>
  98:	ee 0f       	add	r30, r30
  9a:	ff 1f       	adc	r31, r31
  9c:	8a 95       	dec	r24
  9e:	e2 f7       	brpl	.-8      	; 0x98 <is_pressed+0x16>
  a0:	cf 01       	movw	r24, r30
  a2:	4e 2b       	or	r20, r30
  a4:	44 bb       	out	0x14, r20	; 20
  a6:	95 b3       	in	r25, 0x15	; 21
  a8:	80 95       	com	r24
  aa:	89 23       	and	r24, r25
  ac:	85 bb       	out	0x15, r24	; 21
  ae:	85 b3       	in	r24, 0x15	; 21
  b0:	6c 5f       	subi	r22, 0xFC	; 252
  b2:	7f 4f       	sbci	r23, 0xFF	; 255
  b4:	06 2e       	mov	r0, r22
  b6:	02 c0       	rjmp	.+4      	; 0xbc <is_pressed+0x3a>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <is_pressed+0x36>
  c0:	28 2b       	or	r18, r24
  c2:	25 bb       	out	0x15, r18	; 21
  c4:	83 b3       	in	r24, 0x13	; 19
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <is_pressed+0x4c>
  ca:	95 95       	asr	r25
  cc:	87 95       	ror	r24
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <is_pressed+0x48>
  d2:	80 fd       	sbrc	r24, 0
  d4:	06 c0       	rjmp	.+12     	; 0xe2 <is_pressed+0x60>
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	08 95       	ret
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	08 95       	ret

000000e8 <get_key>:
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	10 e0       	ldi	r17, 0x00	; 0
  f4:	18 c0       	rjmp	.+48     	; 0x126 <get_key+0x3e>
  f6:	be 01       	movw	r22, r28
  f8:	c8 01       	movw	r24, r16
  fa:	0e 94 41 00 	call	0x82	; 0x82 <is_pressed>
  fe:	89 2b       	or	r24, r25
 100:	49 f0       	breq	.+18     	; 0x114 <get_key+0x2c>
 102:	c8 01       	movw	r24, r16
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	8c 0f       	add	r24, r28
 10e:	9d 1f       	adc	r25, r29
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	0c c0       	rjmp	.+24     	; 0x12c <get_key+0x44>
 114:	21 96       	adiw	r28, 0x01	; 1
 116:	02 c0       	rjmp	.+4      	; 0x11c <get_key+0x34>
 118:	c0 e0       	ldi	r28, 0x00	; 0
 11a:	d0 e0       	ldi	r29, 0x00	; 0
 11c:	c4 30       	cpi	r28, 0x04	; 4
 11e:	d1 05       	cpc	r29, r1
 120:	54 f3       	brlt	.-44     	; 0xf6 <get_key+0xe>
 122:	0f 5f       	subi	r16, 0xFF	; 255
 124:	1f 4f       	sbci	r17, 0xFF	; 255
 126:	04 30       	cpi	r16, 0x04	; 4
 128:	11 05       	cpc	r17, r1
 12a:	b4 f3       	brlt	.-20     	; 0x118 <get_key+0x30>
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	08 95       	ret

00000136 <input>:
 136:	88 23       	and	r24, r24
 138:	21 f0       	breq	.+8      	; 0x142 <input+0xc>
 13a:	88 b3       	in	r24, 0x18	; 24
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	88 bb       	out	0x18, r24	; 24
 140:	03 c0       	rjmp	.+6      	; 0x148 <input+0x12>
 142:	88 b3       	in	r24, 0x18	; 24
 144:	8e 7f       	andi	r24, 0xFE	; 254
 146:	88 bb       	out	0x18, r24	; 24
 148:	88 b3       	in	r24, 0x18	; 24
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	88 bb       	out	0x18, r24	; 24
 14e:	11 ba       	out	0x11, r1	; 17
 150:	80 b3       	in	r24, 0x10	; 16
 152:	88 b3       	in	r24, 0x18	; 24
 154:	84 60       	ori	r24, 0x04	; 4
 156:	88 bb       	out	0x18, r24	; 24
 158:	00 00       	nop
 15a:	00 00       	nop
 15c:	00 00       	nop
 15e:	11 ba       	out	0x11, r1	; 17
 160:	80 b3       	in	r24, 0x10	; 16
 162:	98 b3       	in	r25, 0x18	; 24
 164:	9b 7f       	andi	r25, 0xFB	; 251
 166:	98 bb       	out	0x18, r25	; 24
 168:	08 95       	ret

0000016a <output>:
 16a:	66 23       	and	r22, r22
 16c:	21 f0       	breq	.+8      	; 0x176 <output+0xc>
 16e:	98 b3       	in	r25, 0x18	; 24
 170:	91 60       	ori	r25, 0x01	; 1
 172:	98 bb       	out	0x18, r25	; 24
 174:	03 c0       	rjmp	.+6      	; 0x17c <output+0x12>
 176:	98 b3       	in	r25, 0x18	; 24
 178:	9e 7f       	andi	r25, 0xFE	; 254
 17a:	98 bb       	out	0x18, r25	; 24
 17c:	98 b3       	in	r25, 0x18	; 24
 17e:	9d 7f       	andi	r25, 0xFD	; 253
 180:	98 bb       	out	0x18, r25	; 24
 182:	82 bb       	out	0x12, r24	; 18
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	81 bb       	out	0x11, r24	; 17
 188:	88 b3       	in	r24, 0x18	; 24
 18a:	84 60       	ori	r24, 0x04	; 4
 18c:	88 bb       	out	0x18, r24	; 24
 18e:	00 00       	nop
 190:	00 00       	nop
 192:	00 00       	nop
 194:	88 b3       	in	r24, 0x18	; 24
 196:	8b 7f       	andi	r24, 0xFB	; 251
 198:	88 bb       	out	0x18, r24	; 24
 19a:	08 95       	ret

0000019c <write>:
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	c8 2f       	mov	r28, r24
 1a2:	d6 2f       	mov	r29, r22
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 9b 00 	call	0x136	; 0x136 <input>
 1aa:	88 23       	and	r24, r24
 1ac:	dc f3       	brlt	.-10     	; 0x1a4 <write+0x8>
 1ae:	6d 2f       	mov	r22, r29
 1b0:	8c 2f       	mov	r24, r28
 1b2:	0e 94 b5 00 	call	0x16a	; 0x16a <output>
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <lcd_init>:
 1bc:	87 b3       	in	r24, 0x17	; 23
 1be:	81 60       	ori	r24, 0x01	; 1
 1c0:	87 bb       	out	0x17, r24	; 23
 1c2:	87 b3       	in	r24, 0x17	; 23
 1c4:	82 60       	ori	r24, 0x02	; 2
 1c6:	87 bb       	out	0x17, r24	; 23
 1c8:	87 b3       	in	r24, 0x17	; 23
 1ca:	84 60       	ori	r24, 0x04	; 4
 1cc:	87 bb       	out	0x17, r24	; 23
 1ce:	80 e1       	ldi	r24, 0x10	; 16
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 3d 01 	call	0x27a	; 0x27a <avr_wait>
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	80 e3       	ldi	r24, 0x30	; 48
 1da:	0e 94 b5 00 	call	0x16a	; 0x16a <output>
 1de:	85 e0       	ldi	r24, 0x05	; 5
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 3d 01 	call	0x27a	; 0x27a <avr_wait>
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	80 e3       	ldi	r24, 0x30	; 48
 1ea:	0e 94 b5 00 	call	0x16a	; 0x16a <output>
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 3d 01 	call	0x27a	; 0x27a <avr_wait>
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	8c e3       	ldi	r24, 0x3C	; 60
 1fa:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	8c e0       	ldi	r24, 0x0C	; 12
 202:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	86 e0       	ldi	r24, 0x06	; 6
 20a:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 216:	08 95       	ret

00000218 <lcd_clr>:
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 220:	08 95       	ret

00000222 <lcd_pos>:
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	c6 2f       	mov	r28, r22
 228:	98 e2       	ldi	r25, 0x28	; 40
 22a:	89 9f       	mul	r24, r25
 22c:	c0 0d       	add	r28, r0
 22e:	11 24       	eor	r1, r1
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 238:	05 c0       	rjmp	.+10     	; 0x244 <lcd_pos+0x22>
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	84 e1       	ldi	r24, 0x14	; 20
 23e:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 242:	cd 2f       	mov	r28, r29
 244:	df ef       	ldi	r29, 0xFF	; 255
 246:	dc 0f       	add	r29, r28
 248:	c1 11       	cpse	r28, r1
 24a:	f7 cf       	rjmp	.-18     	; 0x23a <lcd_pos+0x18>
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <lcd_put>:
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 258:	08 95       	ret

0000025a <lcd_puts2>:
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	fc 01       	movw	r30, r24
 260:	04 c0       	rjmp	.+8      	; 0x26a <lcd_puts2+0x10>
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 268:	fe 01       	movw	r30, r28
 26a:	ef 01       	movw	r28, r30
 26c:	21 96       	adiw	r28, 0x01	; 1
 26e:	80 81       	ld	r24, Z
 270:	81 11       	cpse	r24, r1
 272:	f7 cf       	rjmp	.-18     	; 0x262 <lcd_puts2+0x8>
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <avr_wait>:
}

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
 27a:	23 e0       	ldi	r18, 0x03	; 3
 27c:	23 bf       	out	0x33, r18	; 51
	while (msec--) {
 27e:	0a c0       	rjmp	.+20     	; 0x294 <avr_wait+0x1a>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.0001);
 280:	83 ef       	ldi	r24, 0xF3	; 243
 282:	82 bf       	out	0x32, r24	; 50
		SET_BIT(TIFR, TOV0);
 284:	88 b7       	in	r24, 0x38	; 56
 286:	81 60       	ori	r24, 0x01	; 1
 288:	88 bf       	out	0x38, r24	; 56
		WDR();
 28a:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
 28c:	08 b6       	in	r0, 0x38	; 56
 28e:	00 fe       	sbrs	r0, 0
 290:	fd cf       	rjmp	.-6      	; 0x28c <avr_wait+0x12>

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
 292:	c9 01       	movw	r24, r18
 294:	9c 01       	movw	r18, r24
 296:	21 50       	subi	r18, 0x01	; 1
 298:	31 09       	sbc	r19, r1
 29a:	89 2b       	or	r24, r25
 29c:	89 f7       	brne	.-30     	; 0x280 <avr_wait+0x6>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.0001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
 29e:	13 be       	out	0x33, r1	; 51
 2a0:	08 95       	ret

000002a2 <main>:
		     10, 0, 10, 10};



int main(void)
{
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
 2aa:	60 97       	sbiw	r28, 0x10	; 16
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	f8 94       	cli
 2b0:	de bf       	out	0x3e, r29	; 62
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	cd bf       	out	0x3d, r28	; 61
	lcd_init();
 2b6:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_init>
	lcd_clr();
 2ba:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_clr>
	lcd_pos(0,0);
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	0e 94 11 01 	call	0x222	; 0x222 <lcd_pos>
	Equation savedEq;
	int attempt = 0;
 2c6:	e1 2c       	mov	r14, r1
 2c8:	f1 2c       	mov	r15, r1
	int correct = 0;
	
    while (1) 
    {
		int new_sample = get_sample();
 2ca:	0e 94 b8 01 	call	0x370	; 0x370 <get_sample>
		
		if (new_sample > 400) //D to display
 2ce:	81 39       	cpi	r24, 0x91	; 145
 2d0:	91 40       	sbci	r25, 0x01	; 1
 2d2:	0c f0       	brlt	.+2      	; 0x2d6 <main+0x34>
 2d4:	43 c0       	rjmp	.+134    	; 0x35c <main+0xba>
 2d6:	47 c0       	rjmp	.+142    	; 0x366 <main+0xc4>
		{
			while(!correct)
			{
				Equation eq = randomEq(); //continuously randomized
 2d8:	0e 94 c1 01 	call	0x382	; 0x382 <randomEq>
 2dc:	29 87       	std	Y+9, r18	; 0x09
 2de:	3a 87       	std	Y+10, r19	; 0x0a
 2e0:	4b 87       	std	Y+11, r20	; 0x0b
 2e2:	5c 87       	std	Y+12, r21	; 0x0c
 2e4:	6d 87       	std	Y+13, r22	; 0x0d
 2e6:	7e 87       	std	Y+14, r23	; 0x0e
 2e8:	8f 87       	std	Y+15, r24	; 0x0f
 2ea:	98 8b       	std	Y+16, r25	; 0x10
				
				lcd_clr();
 2ec:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_clr>
				if (attempt == 0) //first attempt => new question
 2f0:	e1 14       	cp	r14, r1
 2f2:	f1 04       	cpc	r15, r1
 2f4:	49 f4       	brne	.+18     	; 0x308 <main+0x66>
				{
					savedEq = eq;
 2f6:	88 e0       	ldi	r24, 0x08	; 8
 2f8:	fe 01       	movw	r30, r28
 2fa:	39 96       	adiw	r30, 0x09	; 9
 2fc:	de 01       	movw	r26, r28
 2fe:	11 96       	adiw	r26, 0x01	; 1
 300:	01 90       	ld	r0, Z+
 302:	0d 92       	st	X+, r0
 304:	8a 95       	dec	r24
 306:	e1 f7       	brne	.-8      	; 0x300 <main+0x5e>
				}
				printEq(savedEq); //display equation
 308:	29 81       	ldd	r18, Y+1	; 0x01
 30a:	3a 81       	ldd	r19, Y+2	; 0x02
 30c:	4b 81       	ldd	r20, Y+3	; 0x03
 30e:	5c 81       	ldd	r21, Y+4	; 0x04
 310:	6d 81       	ldd	r22, Y+5	; 0x05
 312:	7e 81       	ldd	r23, Y+6	; 0x06
 314:	8f 81       	ldd	r24, Y+7	; 0x07
 316:	98 85       	ldd	r25, Y+8	; 0x08
 318:	0e 94 84 02 	call	0x508	; 0x508 <printEq>
				int ans = getAns(); //get user answer
 31c:	0e 94 c4 02 	call	0x588	; 0x588 <getAns>
			
				correct = checkAns(savedEq, ans); //check answer
 320:	8c 01       	movw	r16, r24
 322:	29 81       	ldd	r18, Y+1	; 0x01
 324:	3a 81       	ldd	r19, Y+2	; 0x02
 326:	4b 81       	ldd	r20, Y+3	; 0x03
 328:	5c 81       	ldd	r21, Y+4	; 0x04
 32a:	6d 81       	ldd	r22, Y+5	; 0x05
 32c:	7e 81       	ldd	r23, Y+6	; 0x06
 32e:	8f 81       	ldd	r24, Y+7	; 0x07
 330:	98 85       	ldd	r25, Y+8	; 0x08
 332:	0e 94 81 03 	call	0x702	; 0x702 <checkAns>
 336:	8c 01       	movw	r16, r24
				if (correct)
 338:	89 2b       	or	r24, r25
 33a:	39 f0       	breq	.+14     	; 0x34a <main+0xa8>
				{
					avr_wait(20000);
 33c:	80 e2       	ldi	r24, 0x20	; 32
 33e:	9e e4       	ldi	r25, 0x4E	; 78
 340:	0e 94 3d 01 	call	0x27a	; 0x27a <avr_wait>
					lcd_clr();
 344:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_clr>
 348:	0b c0       	rjmp	.+22     	; 0x360 <main+0xbe>
					// stop speaker noise
				} else
				{
					if (attempt == 0)
 34a:	ef 28       	or	r14, r15
 34c:	21 f4       	brne	.+8      	; 0x356 <main+0xb4>
					{
						attempt = 1;
 34e:	ee 24       	eor	r14, r14
 350:	e3 94       	inc	r14
 352:	f1 2c       	mov	r15, r1
 354:	05 c0       	rjmp	.+10     	; 0x360 <main+0xbe>
					} else //if attempt == 1
					{
						attempt = 0;
 356:	e1 2c       	mov	r14, r1
 358:	f1 2c       	mov	r15, r1
 35a:	02 c0       	rjmp	.+4      	; 0x360 <main+0xbe>
 35c:	00 e0       	ldi	r16, 0x00	; 0
 35e:	10 e0       	ldi	r17, 0x00	; 0
    {
		int new_sample = get_sample();
		
		if (new_sample > 400) //D to display
		{
			while(!correct)
 360:	01 2b       	or	r16, r17
 362:	09 f4       	brne	.+2      	; 0x366 <main+0xc4>
 364:	b9 cf       	rjmp	.-142    	; 0x2d8 <main+0x36>
				}
			}
			correct = 0;
		}
		
		avr_wait(2500);
 366:	84 ec       	ldi	r24, 0xC4	; 196
 368:	99 e0       	ldi	r25, 0x09	; 9
 36a:	0e 94 3d 01 	call	0x27a	; 0x27a <avr_wait>
    }
 36e:	ad cf       	rjmp	.-166    	; 0x2ca <main+0x28>

00000370 <get_sample>:
#include "avr.h"
#include "photoresistor.h"

int get_sample()
{
	ADMUX = 0b01000000;
 370:	80 e4       	ldi	r24, 0x40	; 64
 372:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b11000000;
 374:	80 ec       	ldi	r24, 0xC0	; 192
 376:	86 b9       	out	0x06, r24	; 6
	while (GET_BIT(ADCSRA, 6));
 378:	36 99       	sbic	0x06, 6	; 6
 37a:	fe cf       	rjmp	.-4      	; 0x378 <get_sample+0x8>
	return ADC;
 37c:	84 b1       	in	r24, 0x04	; 4
 37e:	95 b1       	in	r25, 0x05	; 5
}
 380:	08 95       	ret

00000382 <randomEq>:
	}
	
	lcd_put(hun + '0');
	lcd_put(ten + '0');
	lcd_put(ans + '0');
}
 382:	af 92       	push	r10
 384:	bf 92       	push	r11
 386:	cf 92       	push	r12
 388:	df 92       	push	r13
 38a:	ef 92       	push	r14
 38c:	ff 92       	push	r15
 38e:	0f 93       	push	r16
 390:	1f 93       	push	r17
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
 39a:	60 97       	sbiw	r28, 0x10	; 16
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	f8 94       	cli
 3a0:	de bf       	out	0x3e, r29	; 62
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	cd bf       	out	0x3d, r28	; 61
 3a6:	0e 94 3a 04 	call	0x874	; 0x874 <rand>
 3aa:	0a e0       	ldi	r16, 0x0A	; 10
 3ac:	10 e0       	ldi	r17, 0x00	; 0
 3ae:	b8 01       	movw	r22, r16
 3b0:	0e 94 c6 03 	call	0x78c	; 0x78c <__divmodhi4>
 3b4:	5c 01       	movw	r10, r24
 3b6:	0e 94 3a 04 	call	0x874	; 0x874 <rand>
 3ba:	b8 01       	movw	r22, r16
 3bc:	0e 94 c6 03 	call	0x78c	; 0x78c <__divmodhi4>
 3c0:	6c 01       	movw	r12, r24
 3c2:	0e 94 3a 04 	call	0x874	; 0x874 <rand>
 3c6:	b8 01       	movw	r22, r16
 3c8:	0e 94 c6 03 	call	0x78c	; 0x78c <__divmodhi4>
 3cc:	7c 01       	movw	r14, r24
 3ce:	0e 94 3a 04 	call	0x874	; 0x874 <rand>
 3d2:	81 70       	andi	r24, 0x01	; 1
 3d4:	90 78       	andi	r25, 0x80	; 128
 3d6:	99 23       	and	r25, r25
 3d8:	24 f4       	brge	.+8      	; 0x3e2 <randomEq+0x60>
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	8e 6f       	ori	r24, 0xFE	; 254
 3de:	9f 6f       	ori	r25, 0xFF	; 255
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	8c 01       	movw	r16, r24
 3e4:	0e 94 3a 04 	call	0x874	; 0x874 <rand>
 3e8:	81 70       	andi	r24, 0x01	; 1
 3ea:	90 78       	andi	r25, 0x80	; 128
 3ec:	99 23       	and	r25, r25
 3ee:	24 f4       	brge	.+8      	; 0x3f8 <randomEq+0x76>
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	8e 6f       	ori	r24, 0xFE	; 254
 3f4:	9f 6f       	ori	r25, 0xFF	; 255
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	21 e0       	ldi	r18, 0x01	; 1
 3fa:	01 2b       	or	r16, r17
 3fc:	09 f0       	breq	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fe:	20 e0       	ldi	r18, 0x00	; 0
 400:	31 e0       	ldi	r19, 0x01	; 1
 402:	89 2b       	or	r24, r25
 404:	09 f0       	breq	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	ba 86       	std	Y+10, r11	; 0x0a
 40a:	a9 86       	std	Y+9, r10	; 0x09
 40c:	dc 86       	std	Y+12, r13	; 0x0c
 40e:	cb 86       	std	Y+11, r12	; 0x0b
 410:	fe 86       	std	Y+14, r15	; 0x0e
 412:	ed 86       	std	Y+13, r14	; 0x0d
 414:	2f 87       	std	Y+15, r18	; 0x0f
 416:	38 8b       	std	Y+16, r19	; 0x10
 418:	88 e0       	ldi	r24, 0x08	; 8
 41a:	fe 01       	movw	r30, r28
 41c:	39 96       	adiw	r30, 0x09	; 9
 41e:	de 01       	movw	r26, r28
 420:	11 96       	adiw	r26, 0x01	; 1
 422:	01 90       	ld	r0, Z+
 424:	0d 92       	st	X+, r0
 426:	8a 95       	dec	r24
 428:	e1 f7       	brne	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 42a:	29 81       	ldd	r18, Y+1	; 0x01
 42c:	3a 81       	ldd	r19, Y+2	; 0x02
 42e:	4b 81       	ldd	r20, Y+3	; 0x03
 430:	5c 81       	ldd	r21, Y+4	; 0x04
 432:	6d 81       	ldd	r22, Y+5	; 0x05
 434:	7e 81       	ldd	r23, Y+6	; 0x06
 436:	8f 81       	ldd	r24, Y+7	; 0x07
 438:	98 85       	ldd	r25, Y+8	; 0x08
 43a:	60 96       	adiw	r28, 0x10	; 16
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	f8 94       	cli
 440:	de bf       	out	0x3e, r29	; 62
 442:	0f be       	out	0x3f, r0	; 63
 444:	cd bf       	out	0x3d, r28	; 61
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	1f 91       	pop	r17
 44c:	0f 91       	pop	r16
 44e:	ff 90       	pop	r15
 450:	ef 90       	pop	r14
 452:	df 90       	pop	r13
 454:	cf 90       	pop	r12
 456:	bf 90       	pop	r11
 458:	af 90       	pop	r10
 45a:	08 95       	ret

0000045c <calcEq>:
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
 464:	28 97       	sbiw	r28, 0x08	; 8
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	f8 94       	cli
 46a:	de bf       	out	0x3e, r29	; 62
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	cd bf       	out	0x3d, r28	; 61
 470:	29 83       	std	Y+1, r18	; 0x01
 472:	3a 83       	std	Y+2, r19	; 0x02
 474:	4b 83       	std	Y+3, r20	; 0x03
 476:	5c 83       	std	Y+4, r21	; 0x04
 478:	6d 83       	std	Y+5, r22	; 0x05
 47a:	7e 83       	std	Y+6, r23	; 0x06
 47c:	98 87       	std	Y+8, r25	; 0x08
 47e:	81 30       	cpi	r24, 0x01	; 1
 480:	e9 f4       	brne	.+58     	; 0x4bc <calcEq+0x60>
 482:	29 81       	ldd	r18, Y+1	; 0x01
 484:	3a 81       	ldd	r19, Y+2	; 0x02
 486:	8b 81       	ldd	r24, Y+3	; 0x03
 488:	9c 81       	ldd	r25, Y+4	; 0x04
 48a:	28 9f       	mul	r18, r24
 48c:	a0 01       	movw	r20, r0
 48e:	29 9f       	mul	r18, r25
 490:	50 0d       	add	r21, r0
 492:	38 9f       	mul	r19, r24
 494:	50 0d       	add	r21, r0
 496:	11 24       	eor	r1, r1
 498:	88 85       	ldd	r24, Y+8	; 0x08
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	51 f4       	brne	.+20     	; 0x4b2 <calcEq+0x56>
 49e:	2d 81       	ldd	r18, Y+5	; 0x05
 4a0:	3e 81       	ldd	r19, Y+6	; 0x06
 4a2:	42 9f       	mul	r20, r18
 4a4:	c0 01       	movw	r24, r0
 4a6:	43 9f       	mul	r20, r19
 4a8:	90 0d       	add	r25, r0
 4aa:	52 9f       	mul	r21, r18
 4ac:	90 0d       	add	r25, r0
 4ae:	11 24       	eor	r1, r1
 4b0:	22 c0       	rjmp	.+68     	; 0x4f6 <calcEq+0x9a>
 4b2:	8d 81       	ldd	r24, Y+5	; 0x05
 4b4:	9e 81       	ldd	r25, Y+6	; 0x06
 4b6:	84 0f       	add	r24, r20
 4b8:	95 1f       	adc	r25, r21
 4ba:	1d c0       	rjmp	.+58     	; 0x4f6 <calcEq+0x9a>
 4bc:	88 85       	ldd	r24, Y+8	; 0x08
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	81 f4       	brne	.+32     	; 0x4e2 <calcEq+0x86>
 4c2:	4b 81       	ldd	r20, Y+3	; 0x03
 4c4:	5c 81       	ldd	r21, Y+4	; 0x04
 4c6:	8d 81       	ldd	r24, Y+5	; 0x05
 4c8:	9e 81       	ldd	r25, Y+6	; 0x06
 4ca:	48 9f       	mul	r20, r24
 4cc:	90 01       	movw	r18, r0
 4ce:	49 9f       	mul	r20, r25
 4d0:	30 0d       	add	r19, r0
 4d2:	58 9f       	mul	r21, r24
 4d4:	30 0d       	add	r19, r0
 4d6:	11 24       	eor	r1, r1
 4d8:	89 81       	ldd	r24, Y+1	; 0x01
 4da:	9a 81       	ldd	r25, Y+2	; 0x02
 4dc:	82 0f       	add	r24, r18
 4de:	93 1f       	adc	r25, r19
 4e0:	0a c0       	rjmp	.+20     	; 0x4f6 <calcEq+0x9a>
 4e2:	29 81       	ldd	r18, Y+1	; 0x01
 4e4:	3a 81       	ldd	r19, Y+2	; 0x02
 4e6:	8b 81       	ldd	r24, Y+3	; 0x03
 4e8:	9c 81       	ldd	r25, Y+4	; 0x04
 4ea:	82 0f       	add	r24, r18
 4ec:	93 1f       	adc	r25, r19
 4ee:	2d 81       	ldd	r18, Y+5	; 0x05
 4f0:	3e 81       	ldd	r19, Y+6	; 0x06
 4f2:	82 0f       	add	r24, r18
 4f4:	93 1f       	adc	r25, r19
 4f6:	28 96       	adiw	r28, 0x08	; 8
 4f8:	0f b6       	in	r0, 0x3f	; 63
 4fa:	f8 94       	cli
 4fc:	de bf       	out	0x3e, r29	; 62
 4fe:	0f be       	out	0x3f, r0	; 63
 500:	cd bf       	out	0x3d, r28	; 61
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	08 95       	ret

00000508 <printEq>:
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
 510:	28 97       	sbiw	r28, 0x08	; 8
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	f8 94       	cli
 516:	de bf       	out	0x3e, r29	; 62
 518:	0f be       	out	0x3f, r0	; 63
 51a:	cd bf       	out	0x3d, r28	; 61
 51c:	29 83       	std	Y+1, r18	; 0x01
 51e:	3a 83       	std	Y+2, r19	; 0x02
 520:	4b 83       	std	Y+3, r20	; 0x03
 522:	5c 83       	std	Y+4, r21	; 0x04
 524:	6d 83       	std	Y+5, r22	; 0x05
 526:	7e 83       	std	Y+6, r23	; 0x06
 528:	8f 83       	std	Y+7, r24	; 0x07
 52a:	98 87       	std	Y+8, r25	; 0x08
 52c:	60 e0       	ldi	r22, 0x00	; 0
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 11 01 	call	0x222	; 0x222 <lcd_pos>
 538:	89 81       	ldd	r24, Y+1	; 0x01
 53a:	9a 81       	ldd	r25, Y+2	; 0x02
 53c:	c0 96       	adiw	r24, 0x30	; 48
 53e:	0e 94 29 01 	call	0x252	; 0x252 <lcd_put>
 542:	ef 81       	ldd	r30, Y+7	; 0x07
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	e2 56       	subi	r30, 0x62	; 98
 548:	ff 4f       	sbci	r31, 0xFF	; 255
 54a:	80 81       	ld	r24, Z
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 29 01 	call	0x252	; 0x252 <lcd_put>
 552:	8b 81       	ldd	r24, Y+3	; 0x03
 554:	9c 81       	ldd	r25, Y+4	; 0x04
 556:	c0 96       	adiw	r24, 0x30	; 48
 558:	0e 94 29 01 	call	0x252	; 0x252 <lcd_put>
 55c:	e8 85       	ldd	r30, Y+8	; 0x08
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	e2 56       	subi	r30, 0x62	; 98
 562:	ff 4f       	sbci	r31, 0xFF	; 255
 564:	80 81       	ld	r24, Z
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 29 01 	call	0x252	; 0x252 <lcd_put>
 56c:	8d 81       	ldd	r24, Y+5	; 0x05
 56e:	9e 81       	ldd	r25, Y+6	; 0x06
 570:	c0 96       	adiw	r24, 0x30	; 48
 572:	0e 94 29 01 	call	0x252	; 0x252 <lcd_put>
 576:	28 96       	adiw	r28, 0x08	; 8
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	f8 94       	cli
 57c:	de bf       	out	0x3e, r29	; 62
 57e:	0f be       	out	0x3f, r0	; 63
 580:	cd bf       	out	0x3d, r28	; 61
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	08 95       	ret

00000588 <getAns>:

int getAns(void)
{
 588:	ef 92       	push	r14
 58a:	ff 92       	push	r15
 58c:	0f 93       	push	r16
 58e:	1f 93       	push	r17
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
 598:	ac 97       	sbiw	r28, 0x2c	; 44
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	f8 94       	cli
 59e:	de bf       	out	0x3e, r29	; 62
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	cd bf       	out	0x3d, r28	; 61
	int keys[] = {1, 2, 3, 10,
 5a4:	80 e2       	ldi	r24, 0x20	; 32
 5a6:	e4 e6       	ldi	r30, 0x64	; 100
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	de 01       	movw	r26, r28
 5ac:	11 96       	adiw	r26, 0x01	; 1
 5ae:	01 90       	ld	r0, Z+
 5b0:	0d 92       	st	X+, r0
 5b2:	8a 95       	dec	r24
 5b4:	e1 f7       	brne	.-8      	; 0x5ae <getAns+0x26>
				  4, 5, 6, 10,
				  7, 8, 9, 10,
				 10, 0, 10, 10};
	
	lcd_pos(1,0);
 5b6:	60 e0       	ldi	r22, 0x00	; 0
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 11 01 	call	0x222	; 0x222 <lcd_pos>
	char buf[] = "Ans: ";
 5c2:	86 e0       	ldi	r24, 0x06	; 6
 5c4:	e4 e8       	ldi	r30, 0x84	; 132
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	de 01       	movw	r26, r28
 5ca:	91 96       	adiw	r26, 0x21	; 33
 5cc:	01 90       	ld	r0, Z+
 5ce:	0d 92       	st	X+, r0
 5d0:	8a 95       	dec	r24
 5d2:	e1 f7       	brne	.-8      	; 0x5cc <getAns+0x44>
	lcd_puts2(buf);
 5d4:	ce 01       	movw	r24, r28
 5d6:	81 96       	adiw	r24, 0x21	; 33
 5d8:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_puts2>
	
	int index = 0;
	int ans[] = {0,0,0};
 5dc:	18 a6       	std	Y+40, r1	; 0x28
 5de:	1f a2       	std	Y+39, r1	; 0x27
 5e0:	1a a6       	std	Y+42, r1	; 0x2a
 5e2:	19 a6       	std	Y+41, r1	; 0x29
 5e4:	1c a6       	std	Y+44, r1	; 0x2c
 5e6:	1b a6       	std	Y+43, r1	; 0x2b
	
	lcd_pos(1,0);
	char buf[] = "Ans: ";
	lcd_puts2(buf);
	
	int index = 0;
 5e8:	00 e0       	ldi	r16, 0x00	; 0
 5ea:	10 e0       	ldi	r17, 0x00	; 0
	int ans[] = {0,0,0};
	
	while(1)
	{
		if (is_pressed(3,3) && index != 0) { break ; } //press D for done
 5ec:	63 e0       	ldi	r22, 0x03	; 3
 5ee:	70 e0       	ldi	r23, 0x00	; 0
 5f0:	83 e0       	ldi	r24, 0x03	; 3
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	0e 94 41 00 	call	0x82	; 0x82 <is_pressed>
 5f8:	89 2b       	or	r24, r25
 5fa:	19 f0       	breq	.+6      	; 0x602 <getAns+0x7a>
 5fc:	01 15       	cp	r16, r1
 5fe:	11 05       	cpc	r17, r1
 600:	c1 f5       	brne	.+112    	; 0x672 <getAns+0xea>
			
		int k = get_key();
 602:	0e 94 74 00 	call	0xe8	; 0xe8 <get_key>
		if (k > 0 && k <= 16 && k%4 && k!=13 && k!=15 && index < 3) //key press only numbers up to 3 times
 606:	9c 01       	movw	r18, r24
 608:	21 50       	subi	r18, 0x01	; 1
 60a:	31 09       	sbc	r19, r1
 60c:	20 31       	cpi	r18, 0x10	; 16
 60e:	31 05       	cpc	r19, r1
 610:	58 f5       	brcc	.+86     	; 0x668 <getAns+0xe0>
 612:	9c 01       	movw	r18, r24
 614:	23 70       	andi	r18, 0x03	; 3
 616:	33 27       	eor	r19, r19
 618:	23 2b       	or	r18, r19
 61a:	31 f1       	breq	.+76     	; 0x668 <getAns+0xe0>
 61c:	8d 30       	cpi	r24, 0x0D	; 13
 61e:	91 05       	cpc	r25, r1
 620:	19 f1       	breq	.+70     	; 0x668 <getAns+0xe0>
 622:	8f 30       	cpi	r24, 0x0F	; 15
 624:	91 05       	cpc	r25, r1
 626:	01 f1       	breq	.+64     	; 0x668 <getAns+0xe0>
 628:	03 30       	cpi	r16, 0x03	; 3
 62a:	11 05       	cpc	r17, r1
 62c:	ec f4       	brge	.+58     	; 0x668 <getAns+0xe0>
		{
			int num = keys[k - 1];
 62e:	fc 01       	movw	r30, r24
 630:	31 97       	sbiw	r30, 0x01	; 1
 632:	ee 0f       	add	r30, r30
 634:	ff 1f       	adc	r31, r31
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	8c 0f       	add	r24, r28
 63c:	9d 1f       	adc	r25, r29
 63e:	e8 0f       	add	r30, r24
 640:	f9 1f       	adc	r31, r25
 642:	e0 80       	ld	r14, Z
 644:	f1 80       	ldd	r15, Z+1	; 0x01
			lcd_put(num + '0');
 646:	c7 01       	movw	r24, r14
 648:	c0 96       	adiw	r24, 0x30	; 48
 64a:	0e 94 29 01 	call	0x252	; 0x252 <lcd_put>
			ans[index] = num;
 64e:	f8 01       	movw	r30, r16
 650:	ee 0f       	add	r30, r30
 652:	ff 1f       	adc	r31, r31
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	8c 0f       	add	r24, r28
 65a:	9d 1f       	adc	r25, r29
 65c:	e8 0f       	add	r30, r24
 65e:	f9 1f       	adc	r31, r25
 660:	f7 a2       	std	Z+39, r15	; 0x27
 662:	e6 a2       	std	Z+38, r14	; 0x26
			index++;
 664:	0f 5f       	subi	r16, 0xFF	; 255
 666:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		avr_wait(3000);
 668:	88 eb       	ldi	r24, 0xB8	; 184
 66a:	9b e0       	ldi	r25, 0x0B	; 11
 66c:	0e 94 3d 01 	call	0x27a	; 0x27a <avr_wait>
	}
 670:	bd cf       	rjmp	.-134    	; 0x5ec <getAns+0x64>
	
	lcd_clr();
 672:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_clr>
	
	if (index == 1)
 676:	01 30       	cpi	r16, 0x01	; 1
 678:	11 05       	cpc	r17, r1
 67a:	19 f4       	brne	.+6      	; 0x682 <getAns+0xfa>
	{
		return ans[0];
 67c:	8f a1       	ldd	r24, Y+39	; 0x27
 67e:	98 a5       	ldd	r25, Y+40	; 0x28
 680:	33 c0       	rjmp	.+102    	; 0x6e8 <getAns+0x160>
	} else if (index == 2)
 682:	02 30       	cpi	r16, 0x02	; 2
 684:	11 05       	cpc	r17, r1
 686:	99 f4       	brne	.+38     	; 0x6ae <getAns+0x126>
	{
		return ans[0] * 10 + ans[1];
 688:	4f a1       	ldd	r20, Y+39	; 0x27
 68a:	58 a5       	ldd	r21, Y+40	; 0x28
 68c:	ca 01       	movw	r24, r20
 68e:	88 0f       	add	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	44 0f       	add	r20, r20
 694:	55 1f       	adc	r21, r21
 696:	44 0f       	add	r20, r20
 698:	55 1f       	adc	r21, r21
 69a:	44 0f       	add	r20, r20
 69c:	55 1f       	adc	r21, r21
 69e:	9c 01       	movw	r18, r24
 6a0:	24 0f       	add	r18, r20
 6a2:	35 1f       	adc	r19, r21
 6a4:	89 a5       	ldd	r24, Y+41	; 0x29
 6a6:	9a a5       	ldd	r25, Y+42	; 0x2a
 6a8:	82 0f       	add	r24, r18
 6aa:	93 1f       	adc	r25, r19
 6ac:	1d c0       	rjmp	.+58     	; 0x6e8 <getAns+0x160>
	} else //index == 3
	{
		return ans[0] * 100 + ans[1] * 10 + ans[2];
 6ae:	2f a1       	ldd	r18, Y+39	; 0x27
 6b0:	38 a5       	ldd	r19, Y+40	; 0x28
 6b2:	44 e6       	ldi	r20, 0x64	; 100
 6b4:	42 9f       	mul	r20, r18
 6b6:	c0 01       	movw	r24, r0
 6b8:	43 9f       	mul	r20, r19
 6ba:	90 0d       	add	r25, r0
 6bc:	11 24       	eor	r1, r1
 6be:	29 a5       	ldd	r18, Y+41	; 0x29
 6c0:	3a a5       	ldd	r19, Y+42	; 0x2a
 6c2:	b9 01       	movw	r22, r18
 6c4:	66 0f       	add	r22, r22
 6c6:	77 1f       	adc	r23, r23
 6c8:	a9 01       	movw	r20, r18
 6ca:	44 0f       	add	r20, r20
 6cc:	55 1f       	adc	r21, r21
 6ce:	44 0f       	add	r20, r20
 6d0:	55 1f       	adc	r21, r21
 6d2:	44 0f       	add	r20, r20
 6d4:	55 1f       	adc	r21, r21
 6d6:	9b 01       	movw	r18, r22
 6d8:	24 0f       	add	r18, r20
 6da:	35 1f       	adc	r19, r21
 6dc:	28 0f       	add	r18, r24
 6de:	39 1f       	adc	r19, r25
 6e0:	8b a5       	ldd	r24, Y+43	; 0x2b
 6e2:	9c a5       	ldd	r25, Y+44	; 0x2c
 6e4:	82 0f       	add	r24, r18
 6e6:	93 1f       	adc	r25, r19
	}
}
 6e8:	ac 96       	adiw	r28, 0x2c	; 44
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	f8 94       	cli
 6ee:	de bf       	out	0x3e, r29	; 62
 6f0:	0f be       	out	0x3f, r0	; 63
 6f2:	cd bf       	out	0x3d, r28	; 61
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	1f 91       	pop	r17
 6fa:	0f 91       	pop	r16
 6fc:	ff 90       	pop	r15
 6fe:	ef 90       	pop	r14
 700:	08 95       	ret

00000702 <checkAns>:

int checkAns(Equation eq, int ans)
{
 702:	0f 93       	push	r16
 704:	1f 93       	push	r17
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	cd b7       	in	r28, 0x3d	; 61
 70c:	de b7       	in	r29, 0x3e	; 62
 70e:	28 97       	sbiw	r28, 0x08	; 8
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	f8 94       	cli
 714:	de bf       	out	0x3e, r29	; 62
 716:	0f be       	out	0x3f, r0	; 63
 718:	cd bf       	out	0x3d, r28	; 61
 71a:	29 83       	std	Y+1, r18	; 0x01
 71c:	3a 83       	std	Y+2, r19	; 0x02
 71e:	4b 83       	std	Y+3, r20	; 0x03
 720:	5c 83       	std	Y+4, r21	; 0x04
 722:	6d 83       	std	Y+5, r22	; 0x05
 724:	7e 83       	std	Y+6, r23	; 0x06
 726:	8f 83       	std	Y+7, r24	; 0x07
 728:	98 87       	std	Y+8, r25	; 0x08
	lcd_clr();
 72a:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_clr>
	lcd_pos(0,0);
 72e:	60 e0       	ldi	r22, 0x00	; 0
 730:	70 e0       	ldi	r23, 0x00	; 0
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	0e 94 11 01 	call	0x222	; 0x222 <lcd_pos>
	int right = calcEq(eq);
 73a:	29 81       	ldd	r18, Y+1	; 0x01
 73c:	3a 81       	ldd	r19, Y+2	; 0x02
 73e:	4b 81       	ldd	r20, Y+3	; 0x03
 740:	5c 81       	ldd	r21, Y+4	; 0x04
 742:	6d 81       	ldd	r22, Y+5	; 0x05
 744:	7e 81       	ldd	r23, Y+6	; 0x06
 746:	8f 81       	ldd	r24, Y+7	; 0x07
 748:	98 85       	ldd	r25, Y+8	; 0x08
 74a:	0e 94 2e 02 	call	0x45c	; 0x45c <calcEq>
	if (right == ans)
 74e:	80 17       	cp	r24, r16
 750:	91 07       	cpc	r25, r17
 752:	39 f4       	brne	.+14     	; 0x762 <checkAns+0x60>
	{
		lcd_puts2("Correct!");
 754:	8a e8       	ldi	r24, 0x8A	; 138
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_puts2>
		return 1;
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	0a c0       	rjmp	.+20     	; 0x776 <checkAns+0x74>
	}
	else
	{
		lcd_puts2("Try again.");
 762:	83 e9       	ldi	r24, 0x93	; 147
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_puts2>
		avr_wait(10000);
 76a:	80 e1       	ldi	r24, 0x10	; 16
 76c:	97 e2       	ldi	r25, 0x27	; 39
 76e:	0e 94 3d 01 	call	0x27a	; 0x27a <avr_wait>
		return 0;
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	90 e0       	ldi	r25, 0x00	; 0
	}
 776:	28 96       	adiw	r28, 0x08	; 8
 778:	0f b6       	in	r0, 0x3f	; 63
 77a:	f8 94       	cli
 77c:	de bf       	out	0x3e, r29	; 62
 77e:	0f be       	out	0x3f, r0	; 63
 780:	cd bf       	out	0x3d, r28	; 61
 782:	df 91       	pop	r29
 784:	cf 91       	pop	r28
 786:	1f 91       	pop	r17
 788:	0f 91       	pop	r16
 78a:	08 95       	ret

0000078c <__divmodhi4>:
 78c:	97 fb       	bst	r25, 7
 78e:	07 2e       	mov	r0, r23
 790:	16 f4       	brtc	.+4      	; 0x796 <__divmodhi4+0xa>
 792:	00 94       	com	r0
 794:	07 d0       	rcall	.+14     	; 0x7a4 <__divmodhi4_neg1>
 796:	77 fd       	sbrc	r23, 7
 798:	09 d0       	rcall	.+18     	; 0x7ac <__divmodhi4_neg2>
 79a:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__udivmodhi4>
 79e:	07 fc       	sbrc	r0, 7
 7a0:	05 d0       	rcall	.+10     	; 0x7ac <__divmodhi4_neg2>
 7a2:	3e f4       	brtc	.+14     	; 0x7b2 <__divmodhi4_exit>

000007a4 <__divmodhi4_neg1>:
 7a4:	90 95       	com	r25
 7a6:	81 95       	neg	r24
 7a8:	9f 4f       	sbci	r25, 0xFF	; 255
 7aa:	08 95       	ret

000007ac <__divmodhi4_neg2>:
 7ac:	70 95       	com	r23
 7ae:	61 95       	neg	r22
 7b0:	7f 4f       	sbci	r23, 0xFF	; 255

000007b2 <__divmodhi4_exit>:
 7b2:	08 95       	ret

000007b4 <__udivmodhi4>:
 7b4:	aa 1b       	sub	r26, r26
 7b6:	bb 1b       	sub	r27, r27
 7b8:	51 e1       	ldi	r21, 0x11	; 17
 7ba:	07 c0       	rjmp	.+14     	; 0x7ca <__udivmodhi4_ep>

000007bc <__udivmodhi4_loop>:
 7bc:	aa 1f       	adc	r26, r26
 7be:	bb 1f       	adc	r27, r27
 7c0:	a6 17       	cp	r26, r22
 7c2:	b7 07       	cpc	r27, r23
 7c4:	10 f0       	brcs	.+4      	; 0x7ca <__udivmodhi4_ep>
 7c6:	a6 1b       	sub	r26, r22
 7c8:	b7 0b       	sbc	r27, r23

000007ca <__udivmodhi4_ep>:
 7ca:	88 1f       	adc	r24, r24
 7cc:	99 1f       	adc	r25, r25
 7ce:	5a 95       	dec	r21
 7d0:	a9 f7       	brne	.-22     	; 0x7bc <__udivmodhi4_loop>
 7d2:	80 95       	com	r24
 7d4:	90 95       	com	r25
 7d6:	bc 01       	movw	r22, r24
 7d8:	cd 01       	movw	r24, r26
 7da:	08 95       	ret

000007dc <do_rand>:
 7dc:	8f 92       	push	r8
 7de:	9f 92       	push	r9
 7e0:	af 92       	push	r10
 7e2:	bf 92       	push	r11
 7e4:	cf 92       	push	r12
 7e6:	df 92       	push	r13
 7e8:	ef 92       	push	r14
 7ea:	ff 92       	push	r15
 7ec:	cf 93       	push	r28
 7ee:	df 93       	push	r29
 7f0:	ec 01       	movw	r28, r24
 7f2:	68 81       	ld	r22, Y
 7f4:	79 81       	ldd	r23, Y+1	; 0x01
 7f6:	8a 81       	ldd	r24, Y+2	; 0x02
 7f8:	9b 81       	ldd	r25, Y+3	; 0x03
 7fa:	61 15       	cp	r22, r1
 7fc:	71 05       	cpc	r23, r1
 7fe:	81 05       	cpc	r24, r1
 800:	91 05       	cpc	r25, r1
 802:	21 f4       	brne	.+8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 804:	64 e2       	ldi	r22, 0x24	; 36
 806:	79 ed       	ldi	r23, 0xD9	; 217
 808:	8b e5       	ldi	r24, 0x5B	; 91
 80a:	97 e0       	ldi	r25, 0x07	; 7
 80c:	2d e1       	ldi	r18, 0x1D	; 29
 80e:	33 ef       	ldi	r19, 0xF3	; 243
 810:	41 e0       	ldi	r20, 0x01	; 1
 812:	50 e0       	ldi	r21, 0x00	; 0
 814:	0e 94 4a 04 	call	0x894	; 0x894 <__divmodsi4>
 818:	49 01       	movw	r8, r18
 81a:	5a 01       	movw	r10, r20
 81c:	9b 01       	movw	r18, r22
 81e:	ac 01       	movw	r20, r24
 820:	a7 ea       	ldi	r26, 0xA7	; 167
 822:	b1 e4       	ldi	r27, 0x41	; 65
 824:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__muluhisi3>
 828:	6b 01       	movw	r12, r22
 82a:	7c 01       	movw	r14, r24
 82c:	ac ee       	ldi	r26, 0xEC	; 236
 82e:	b4 ef       	ldi	r27, 0xF4	; 244
 830:	a5 01       	movw	r20, r10
 832:	94 01       	movw	r18, r8
 834:	0e 94 77 04 	call	0x8ee	; 0x8ee <__mulohisi3>
 838:	dc 01       	movw	r26, r24
 83a:	cb 01       	movw	r24, r22
 83c:	8c 0d       	add	r24, r12
 83e:	9d 1d       	adc	r25, r13
 840:	ae 1d       	adc	r26, r14
 842:	bf 1d       	adc	r27, r15
 844:	b7 ff       	sbrs	r27, 7
 846:	03 c0       	rjmp	.+6      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 848:	01 97       	sbiw	r24, 0x01	; 1
 84a:	a1 09       	sbc	r26, r1
 84c:	b0 48       	sbci	r27, 0x80	; 128
 84e:	88 83       	st	Y, r24
 850:	99 83       	std	Y+1, r25	; 0x01
 852:	aa 83       	std	Y+2, r26	; 0x02
 854:	bb 83       	std	Y+3, r27	; 0x03
 856:	9f 77       	andi	r25, 0x7F	; 127
 858:	df 91       	pop	r29
 85a:	cf 91       	pop	r28
 85c:	ff 90       	pop	r15
 85e:	ef 90       	pop	r14
 860:	df 90       	pop	r13
 862:	cf 90       	pop	r12
 864:	bf 90       	pop	r11
 866:	af 90       	pop	r10
 868:	9f 90       	pop	r9
 86a:	8f 90       	pop	r8
 86c:	08 95       	ret

0000086e <rand_r>:
 86e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <do_rand>
 872:	08 95       	ret

00000874 <rand>:
 874:	80 e6       	ldi	r24, 0x60	; 96
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 ee 03 	call	0x7dc	; 0x7dc <do_rand>
 87c:	08 95       	ret

0000087e <srand>:
 87e:	a0 e0       	ldi	r26, 0x00	; 0
 880:	b0 e0       	ldi	r27, 0x00	; 0
 882:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 886:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 88a:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 88e:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 892:	08 95       	ret

00000894 <__divmodsi4>:
 894:	05 2e       	mov	r0, r21
 896:	97 fb       	bst	r25, 7
 898:	1e f4       	brtc	.+6      	; 0x8a0 <__divmodsi4+0xc>
 89a:	00 94       	com	r0
 89c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__negsi2>
 8a0:	57 fd       	sbrc	r21, 7
 8a2:	07 d0       	rcall	.+14     	; 0x8b2 <__divmodsi4_neg2>
 8a4:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__udivmodsi4>
 8a8:	07 fc       	sbrc	r0, 7
 8aa:	03 d0       	rcall	.+6      	; 0x8b2 <__divmodsi4_neg2>
 8ac:	4e f4       	brtc	.+18     	; 0x8c0 <__divmodsi4_exit>
 8ae:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__negsi2>

000008b2 <__divmodsi4_neg2>:
 8b2:	50 95       	com	r21
 8b4:	40 95       	com	r20
 8b6:	30 95       	com	r19
 8b8:	21 95       	neg	r18
 8ba:	3f 4f       	sbci	r19, 0xFF	; 255
 8bc:	4f 4f       	sbci	r20, 0xFF	; 255
 8be:	5f 4f       	sbci	r21, 0xFF	; 255

000008c0 <__divmodsi4_exit>:
 8c0:	08 95       	ret

000008c2 <__negsi2>:
 8c2:	90 95       	com	r25
 8c4:	80 95       	com	r24
 8c6:	70 95       	com	r23
 8c8:	61 95       	neg	r22
 8ca:	7f 4f       	sbci	r23, 0xFF	; 255
 8cc:	8f 4f       	sbci	r24, 0xFF	; 255
 8ce:	9f 4f       	sbci	r25, 0xFF	; 255
 8d0:	08 95       	ret

000008d2 <__muluhisi3>:
 8d2:	0e 94 9e 04 	call	0x93c	; 0x93c <__umulhisi3>
 8d6:	a5 9f       	mul	r26, r21
 8d8:	90 0d       	add	r25, r0
 8da:	b4 9f       	mul	r27, r20
 8dc:	90 0d       	add	r25, r0
 8de:	a4 9f       	mul	r26, r20
 8e0:	80 0d       	add	r24, r0
 8e2:	91 1d       	adc	r25, r1
 8e4:	11 24       	eor	r1, r1
 8e6:	08 95       	ret

000008e8 <__mulshisi3>:
 8e8:	b7 ff       	sbrs	r27, 7
 8ea:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <__muluhisi3>

000008ee <__mulohisi3>:
 8ee:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__muluhisi3>
 8f2:	82 1b       	sub	r24, r18
 8f4:	93 0b       	sbc	r25, r19
 8f6:	08 95       	ret

000008f8 <__udivmodsi4>:
 8f8:	a1 e2       	ldi	r26, 0x21	; 33
 8fa:	1a 2e       	mov	r1, r26
 8fc:	aa 1b       	sub	r26, r26
 8fe:	bb 1b       	sub	r27, r27
 900:	fd 01       	movw	r30, r26
 902:	0d c0       	rjmp	.+26     	; 0x91e <__udivmodsi4_ep>

00000904 <__udivmodsi4_loop>:
 904:	aa 1f       	adc	r26, r26
 906:	bb 1f       	adc	r27, r27
 908:	ee 1f       	adc	r30, r30
 90a:	ff 1f       	adc	r31, r31
 90c:	a2 17       	cp	r26, r18
 90e:	b3 07       	cpc	r27, r19
 910:	e4 07       	cpc	r30, r20
 912:	f5 07       	cpc	r31, r21
 914:	20 f0       	brcs	.+8      	; 0x91e <__udivmodsi4_ep>
 916:	a2 1b       	sub	r26, r18
 918:	b3 0b       	sbc	r27, r19
 91a:	e4 0b       	sbc	r30, r20
 91c:	f5 0b       	sbc	r31, r21

0000091e <__udivmodsi4_ep>:
 91e:	66 1f       	adc	r22, r22
 920:	77 1f       	adc	r23, r23
 922:	88 1f       	adc	r24, r24
 924:	99 1f       	adc	r25, r25
 926:	1a 94       	dec	r1
 928:	69 f7       	brne	.-38     	; 0x904 <__udivmodsi4_loop>
 92a:	60 95       	com	r22
 92c:	70 95       	com	r23
 92e:	80 95       	com	r24
 930:	90 95       	com	r25
 932:	9b 01       	movw	r18, r22
 934:	ac 01       	movw	r20, r24
 936:	bd 01       	movw	r22, r26
 938:	cf 01       	movw	r24, r30
 93a:	08 95       	ret

0000093c <__umulhisi3>:
 93c:	a2 9f       	mul	r26, r18
 93e:	b0 01       	movw	r22, r0
 940:	b3 9f       	mul	r27, r19
 942:	c0 01       	movw	r24, r0
 944:	a3 9f       	mul	r26, r19
 946:	70 0d       	add	r23, r0
 948:	81 1d       	adc	r24, r1
 94a:	11 24       	eor	r1, r1
 94c:	91 1d       	adc	r25, r1
 94e:	b2 9f       	mul	r27, r18
 950:	70 0d       	add	r23, r0
 952:	81 1d       	adc	r24, r1
 954:	11 24       	eor	r1, r1
 956:	91 1d       	adc	r25, r1
 958:	08 95       	ret

0000095a <_exit>:
 95a:	f8 94       	cli

0000095c <__stop_program>:
 95c:	ff cf       	rjmp	.-2      	; 0x95c <__stop_program>
