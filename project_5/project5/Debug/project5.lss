
project5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000009d8  00000a4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000abc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019b7  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c1c  00000000  00000000  0000260f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bc9  00000000  00000000  0000322b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000038c  00000000  00000000  00003df4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a6  00000000  00000000  00004180  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c82  00000000  00000000  00004726  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  000053a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3a       	cpi	r26, 0xA0	; 160
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 59 01 	call	0x2b2	; 0x2b2 <main>
  8a:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <is_pressed>:
  92:	9b b3       	in	r25, 0x1b	; 27
  94:	9e 7f       	andi	r25, 0xFE	; 254
  96:	9b bb       	out	0x1b, r25	; 27
  98:	14 ba       	out	0x14, r1	; 20
  9a:	90 ef       	ldi	r25, 0xF0	; 240
  9c:	95 bb       	out	0x15, r25	; 21
  9e:	44 b3       	in	r20, 0x14	; 20
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	f9 01       	movw	r30, r18
  a6:	02 c0       	rjmp	.+4      	; 0xac <is_pressed+0x1a>
  a8:	ee 0f       	add	r30, r30
  aa:	ff 1f       	adc	r31, r31
  ac:	8a 95       	dec	r24
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <is_pressed+0x16>
  b0:	cf 01       	movw	r24, r30
  b2:	4e 2b       	or	r20, r30
  b4:	44 bb       	out	0x14, r20	; 20
  b6:	95 b3       	in	r25, 0x15	; 21
  b8:	80 95       	com	r24
  ba:	89 23       	and	r24, r25
  bc:	85 bb       	out	0x15, r24	; 21
  be:	85 b3       	in	r24, 0x15	; 21
  c0:	6c 5f       	subi	r22, 0xFC	; 252
  c2:	7f 4f       	sbci	r23, 0xFF	; 255
  c4:	06 2e       	mov	r0, r22
  c6:	02 c0       	rjmp	.+4      	; 0xcc <is_pressed+0x3a>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	0a 94       	dec	r0
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <is_pressed+0x36>
  d0:	28 2b       	or	r18, r24
  d2:	25 bb       	out	0x15, r18	; 21
  d4:	83 b3       	in	r24, 0x13	; 19
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <is_pressed+0x4c>
  da:	95 95       	asr	r25
  dc:	87 95       	ror	r24
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <is_pressed+0x48>
  e2:	80 fd       	sbrc	r24, 0
  e4:	06 c0       	rjmp	.+12     	; 0xf2 <is_pressed+0x60>
  e6:	8b b3       	in	r24, 0x1b	; 27
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	8b bb       	out	0x1b, r24	; 27
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	08 95       	ret
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	08 95       	ret

000000f8 <get_key>:
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	00 e0       	ldi	r16, 0x00	; 0
 102:	10 e0       	ldi	r17, 0x00	; 0
 104:	18 c0       	rjmp	.+48     	; 0x136 <get_key+0x3e>
 106:	be 01       	movw	r22, r28
 108:	c8 01       	movw	r24, r16
 10a:	0e 94 49 00 	call	0x92	; 0x92 <is_pressed>
 10e:	89 2b       	or	r24, r25
 110:	49 f0       	breq	.+18     	; 0x124 <get_key+0x2c>
 112:	c8 01       	movw	r24, r16
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	8c 0f       	add	r24, r28
 11e:	9d 1f       	adc	r25, r29
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	0c c0       	rjmp	.+24     	; 0x13c <get_key+0x44>
 124:	21 96       	adiw	r28, 0x01	; 1
 126:	02 c0       	rjmp	.+4      	; 0x12c <get_key+0x34>
 128:	c0 e0       	ldi	r28, 0x00	; 0
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 12c:	c4 30       	cpi	r28, 0x04	; 4
 12e:	d1 05       	cpc	r29, r1
 130:	54 f3       	brlt	.-44     	; 0x106 <get_key+0xe>
 132:	0f 5f       	subi	r16, 0xFF	; 255
 134:	1f 4f       	sbci	r17, 0xFF	; 255
 136:	04 30       	cpi	r16, 0x04	; 4
 138:	11 05       	cpc	r17, r1
 13a:	b4 f3       	brlt	.-20     	; 0x128 <get_key+0x30>
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	08 95       	ret

00000146 <input>:
 146:	88 23       	and	r24, r24
 148:	21 f0       	breq	.+8      	; 0x152 <input+0xc>
 14a:	88 b3       	in	r24, 0x18	; 24
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	88 bb       	out	0x18, r24	; 24
 150:	03 c0       	rjmp	.+6      	; 0x158 <input+0x12>
 152:	88 b3       	in	r24, 0x18	; 24
 154:	8e 7f       	andi	r24, 0xFE	; 254
 156:	88 bb       	out	0x18, r24	; 24
 158:	88 b3       	in	r24, 0x18	; 24
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	88 bb       	out	0x18, r24	; 24
 15e:	11 ba       	out	0x11, r1	; 17
 160:	80 b3       	in	r24, 0x10	; 16
 162:	88 b3       	in	r24, 0x18	; 24
 164:	84 60       	ori	r24, 0x04	; 4
 166:	88 bb       	out	0x18, r24	; 24
 168:	00 00       	nop
 16a:	00 00       	nop
 16c:	00 00       	nop
 16e:	11 ba       	out	0x11, r1	; 17
 170:	80 b3       	in	r24, 0x10	; 16
 172:	98 b3       	in	r25, 0x18	; 24
 174:	9b 7f       	andi	r25, 0xFB	; 251
 176:	98 bb       	out	0x18, r25	; 24
 178:	08 95       	ret

0000017a <output>:
 17a:	66 23       	and	r22, r22
 17c:	21 f0       	breq	.+8      	; 0x186 <output+0xc>
 17e:	98 b3       	in	r25, 0x18	; 24
 180:	91 60       	ori	r25, 0x01	; 1
 182:	98 bb       	out	0x18, r25	; 24
 184:	03 c0       	rjmp	.+6      	; 0x18c <output+0x12>
 186:	98 b3       	in	r25, 0x18	; 24
 188:	9e 7f       	andi	r25, 0xFE	; 254
 18a:	98 bb       	out	0x18, r25	; 24
 18c:	98 b3       	in	r25, 0x18	; 24
 18e:	9d 7f       	andi	r25, 0xFD	; 253
 190:	98 bb       	out	0x18, r25	; 24
 192:	82 bb       	out	0x12, r24	; 18
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	81 bb       	out	0x11, r24	; 17
 198:	88 b3       	in	r24, 0x18	; 24
 19a:	84 60       	ori	r24, 0x04	; 4
 19c:	88 bb       	out	0x18, r24	; 24
 19e:	00 00       	nop
 1a0:	00 00       	nop
 1a2:	00 00       	nop
 1a4:	88 b3       	in	r24, 0x18	; 24
 1a6:	8b 7f       	andi	r24, 0xFB	; 251
 1a8:	88 bb       	out	0x18, r24	; 24
 1aa:	08 95       	ret

000001ac <write>:
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	c8 2f       	mov	r28, r24
 1b2:	d6 2f       	mov	r29, r22
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 a3 00 	call	0x146	; 0x146 <input>
 1ba:	88 23       	and	r24, r24
 1bc:	dc f3       	brlt	.-10     	; 0x1b4 <write+0x8>
 1be:	6d 2f       	mov	r22, r29
 1c0:	8c 2f       	mov	r24, r28
 1c2:	0e 94 bd 00 	call	0x17a	; 0x17a <output>
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <lcd_init>:
 1cc:	87 b3       	in	r24, 0x17	; 23
 1ce:	81 60       	ori	r24, 0x01	; 1
 1d0:	87 bb       	out	0x17, r24	; 23
 1d2:	87 b3       	in	r24, 0x17	; 23
 1d4:	82 60       	ori	r24, 0x02	; 2
 1d6:	87 bb       	out	0x17, r24	; 23
 1d8:	87 b3       	in	r24, 0x17	; 23
 1da:	84 60       	ori	r24, 0x04	; 4
 1dc:	87 bb       	out	0x17, r24	; 23
 1de:	80 e1       	ldi	r24, 0x10	; 16
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 45 01 	call	0x28a	; 0x28a <avr_wait>
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	80 e3       	ldi	r24, 0x30	; 48
 1ea:	0e 94 bd 00 	call	0x17a	; 0x17a <output>
 1ee:	85 e0       	ldi	r24, 0x05	; 5
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 45 01 	call	0x28a	; 0x28a <avr_wait>
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	80 e3       	ldi	r24, 0x30	; 48
 1fa:	0e 94 bd 00 	call	0x17a	; 0x17a <output>
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 45 01 	call	0x28a	; 0x28a <avr_wait>
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	8c e3       	ldi	r24, 0x3C	; 60
 20a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <write>
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	8c e0       	ldi	r24, 0x0C	; 12
 212:	0e 94 d6 00 	call	0x1ac	; 0x1ac <write>
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	86 e0       	ldi	r24, 0x06	; 6
 21a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <write>
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	0e 94 d6 00 	call	0x1ac	; 0x1ac <write>
 226:	08 95       	ret

00000228 <lcd_clr>:
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <write>
 230:	08 95       	ret

00000232 <lcd_pos>:
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	c6 2f       	mov	r28, r22
 238:	98 e2       	ldi	r25, 0x28	; 40
 23a:	89 9f       	mul	r24, r25
 23c:	c0 0d       	add	r28, r0
 23e:	11 24       	eor	r1, r1
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	0e 94 d6 00 	call	0x1ac	; 0x1ac <write>
 248:	05 c0       	rjmp	.+10     	; 0x254 <lcd_pos+0x22>
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	84 e1       	ldi	r24, 0x14	; 20
 24e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <write>
 252:	cd 2f       	mov	r28, r29
 254:	df ef       	ldi	r29, 0xFF	; 255
 256:	dc 0f       	add	r29, r28
 258:	c1 11       	cpse	r28, r1
 25a:	f7 cf       	rjmp	.-18     	; 0x24a <lcd_pos+0x18>
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <lcd_put>:
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	0e 94 d6 00 	call	0x1ac	; 0x1ac <write>
 268:	08 95       	ret

0000026a <lcd_puts2>:
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	fc 01       	movw	r30, r24
 270:	04 c0       	rjmp	.+8      	; 0x27a <lcd_puts2+0x10>
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	0e 94 d6 00 	call	0x1ac	; 0x1ac <write>
 278:	fe 01       	movw	r30, r28
 27a:	ef 01       	movw	r28, r30
 27c:	21 96       	adiw	r28, 0x01	; 1
 27e:	80 81       	ld	r24, Z
 280:	81 11       	cpse	r24, r1
 282:	f7 cf       	rjmp	.-18     	; 0x272 <lcd_puts2+0x8>
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <avr_wait>:
}

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
 28a:	23 e0       	ldi	r18, 0x03	; 3
 28c:	23 bf       	out	0x33, r18	; 51
	while (msec--) {
 28e:	0a c0       	rjmp	.+20     	; 0x2a4 <avr_wait+0x1a>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.0001);
 290:	83 ef       	ldi	r24, 0xF3	; 243
 292:	82 bf       	out	0x32, r24	; 50
		SET_BIT(TIFR, TOV0);
 294:	88 b7       	in	r24, 0x38	; 56
 296:	81 60       	ori	r24, 0x01	; 1
 298:	88 bf       	out	0x38, r24	; 56
		WDR();
 29a:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
 29c:	08 b6       	in	r0, 0x38	; 56
 29e:	00 fe       	sbrs	r0, 0
 2a0:	fd cf       	rjmp	.-6      	; 0x29c <avr_wait+0x12>

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
 2a2:	c9 01       	movw	r24, r18
 2a4:	9c 01       	movw	r18, r24
 2a6:	21 50       	subi	r18, 0x01	; 1
 2a8:	31 09       	sbc	r19, r1
 2aa:	89 2b       	or	r24, r25
 2ac:	89 f7       	brne	.-30     	; 0x290 <avr_wait+0x6>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.0001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
 2ae:	13 be       	out	0x33, r1	; 51
 2b0:	08 95       	ret

000002b2 <main>:
		     10, 0, 10, 10};



int main(void)
{
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	cd b7       	in	r28, 0x3d	; 61
 2b8:	de b7       	in	r29, 0x3e	; 62
 2ba:	60 97       	sbiw	r28, 0x10	; 16
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	f8 94       	cli
 2c0:	de bf       	out	0x3e, r29	; 62
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	cd bf       	out	0x3d, r28	; 61
	lcd_init();
 2c6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_init>
	lcd_clr();
 2ca:	0e 94 14 01 	call	0x228	; 0x228 <lcd_clr>
	lcd_pos(0,0);
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	0e 94 19 01 	call	0x232	; 0x232 <lcd_pos>
	Equation savedEq;
	int attempt = 0;
	int correct = 0;
	PlayingNote alarm_noise = {A, W};
 2d6:	c1 2c       	mov	r12, r1
 2d8:	68 94       	set
 2da:	dd 24       	eor	r13, r13
 2dc:	d3 f8       	bld	r13, 3
	SET_BIT(DDRA, 1);
 2de:	8a b3       	in	r24, 0x1a	; 26
 2e0:	82 60       	ori	r24, 0x02	; 2
 2e2:	8a bb       	out	0x1a, r24	; 26
{
	lcd_init();
	lcd_clr();
	lcd_pos(0,0);
	Equation savedEq;
	int attempt = 0;
 2e4:	e1 2c       	mov	r14, r1
 2e6:	f1 2c       	mov	r15, r1
	PlayingNote alarm_noise = {A, W};
	SET_BIT(DDRA, 1);
	
    while (1) 
    {
		Equation eq = randomEq(); //continuously randomized
 2e8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <randomEq>
 2ec:	29 87       	std	Y+9, r18	; 0x09
 2ee:	3a 87       	std	Y+10, r19	; 0x0a
 2f0:	4b 87       	std	Y+11, r20	; 0x0b
 2f2:	5c 87       	std	Y+12, r21	; 0x0c
 2f4:	6d 87       	std	Y+13, r22	; 0x0d
 2f6:	7e 87       	std	Y+14, r23	; 0x0e
 2f8:	8f 87       	std	Y+15, r24	; 0x0f
 2fa:	98 8b       	std	Y+16, r25	; 0x10
		int new_sample = get_sample();
 2fc:	0e 94 cb 01 	call	0x396	; 0x396 <get_sample>
		
		if (new_sample > 400) //D to display
 300:	81 39       	cpi	r24, 0x91	; 145
 302:	91 40       	sbci	r25, 0x01	; 1
 304:	0c f4       	brge	.+2      	; 0x308 <main+0x56>
 306:	42 c0       	rjmp	.+132    	; 0x38c <main+0xda>
		{
			play(alarm_noise);
 308:	8c 2d       	mov	r24, r12
 30a:	9d 2d       	mov	r25, r13
 30c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <play>
			
			while(!correct)
 310:	00 e0       	ldi	r16, 0x00	; 0
 312:	10 e0       	ldi	r17, 0x00	; 0
 314:	39 c0       	rjmp	.+114    	; 0x388 <main+0xd6>
			{
				//Equation eq = randomEq(); //continuously randomized
				
				lcd_clr();
 316:	0e 94 14 01 	call	0x228	; 0x228 <lcd_clr>
				if (attempt == 0) //first attempt => new question
 31a:	e1 14       	cp	r14, r1
 31c:	f1 04       	cpc	r15, r1
 31e:	49 f4       	brne	.+18     	; 0x332 <main+0x80>
				{
					savedEq = eq;
 320:	88 e0       	ldi	r24, 0x08	; 8
 322:	fe 01       	movw	r30, r28
 324:	39 96       	adiw	r30, 0x09	; 9
 326:	de 01       	movw	r26, r28
 328:	11 96       	adiw	r26, 0x01	; 1
 32a:	01 90       	ld	r0, Z+
 32c:	0d 92       	st	X+, r0
 32e:	8a 95       	dec	r24
 330:	e1 f7       	brne	.-8      	; 0x32a <main+0x78>
				}
				printEq(savedEq); //display equation
 332:	29 81       	ldd	r18, Y+1	; 0x01
 334:	3a 81       	ldd	r19, Y+2	; 0x02
 336:	4b 81       	ldd	r20, Y+3	; 0x03
 338:	5c 81       	ldd	r21, Y+4	; 0x04
 33a:	6d 81       	ldd	r22, Y+5	; 0x05
 33c:	7e 81       	ldd	r23, Y+6	; 0x06
 33e:	8f 81       	ldd	r24, Y+7	; 0x07
 340:	98 85       	ldd	r25, Y+8	; 0x08
 342:	0e 94 97 02 	call	0x52e	; 0x52e <printEq>
				int ans = getAns(); //get user answer
 346:	0e 94 d7 02 	call	0x5ae	; 0x5ae <getAns>
			
				correct = checkAns(savedEq, ans); //check answer
 34a:	8c 01       	movw	r16, r24
 34c:	29 81       	ldd	r18, Y+1	; 0x01
 34e:	3a 81       	ldd	r19, Y+2	; 0x02
 350:	4b 81       	ldd	r20, Y+3	; 0x03
 352:	5c 81       	ldd	r21, Y+4	; 0x04
 354:	6d 81       	ldd	r22, Y+5	; 0x05
 356:	7e 81       	ldd	r23, Y+6	; 0x06
 358:	8f 81       	ldd	r24, Y+7	; 0x07
 35a:	98 85       	ldd	r25, Y+8	; 0x08
 35c:	0e 94 94 03 	call	0x728	; 0x728 <checkAns>
 360:	8c 01       	movw	r16, r24
				if (correct)
 362:	89 2b       	or	r24, r25
 364:	49 f0       	breq	.+18     	; 0x378 <main+0xc6>
				{
					avr_wait(20000);
 366:	80 e2       	ldi	r24, 0x20	; 32
 368:	9e e4       	ldi	r25, 0x4E	; 78
 36a:	0e 94 45 01 	call	0x28a	; 0x28a <avr_wait>
					lcd_clr();
 36e:	0e 94 14 01 	call	0x228	; 0x228 <lcd_clr>
					stop_playing();
 372:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <stop_playing>
 376:	08 c0       	rjmp	.+16     	; 0x388 <main+0xd6>
					
				} else
				{
					if (attempt == 0)
 378:	ef 28       	or	r14, r15
 37a:	21 f4       	brne	.+8      	; 0x384 <main+0xd2>
					{
						attempt = 1;
 37c:	ee 24       	eor	r14, r14
 37e:	e3 94       	inc	r14
 380:	f1 2c       	mov	r15, r1
 382:	02 c0       	rjmp	.+4      	; 0x388 <main+0xd6>
					} else //if attempt == 1
					{
						attempt = 0;
 384:	e1 2c       	mov	r14, r1
 386:	f1 2c       	mov	r15, r1
		
		if (new_sample > 400) //D to display
		{
			play(alarm_noise);
			
			while(!correct)
 388:	01 2b       	or	r16, r17
 38a:	29 f2       	breq	.-118    	; 0x316 <main+0x64>
				}
			}
			correct = 0;
		}
		
		avr_wait(2500);
 38c:	84 ec       	ldi	r24, 0xC4	; 196
 38e:	99 e0       	ldi	r25, 0x09	; 9
 390:	0e 94 45 01 	call	0x28a	; 0x28a <avr_wait>
    }
 394:	a9 cf       	rjmp	.-174    	; 0x2e8 <main+0x36>

00000396 <get_sample>:
#include "avr.h"
#include "photoresistor.h"

int get_sample()
{
	ADMUX = 0b01000000;
 396:	80 e4       	ldi	r24, 0x40	; 64
 398:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b11000000;
 39a:	80 ec       	ldi	r24, 0xC0	; 192
 39c:	86 b9       	out	0x06, r24	; 6
	while (GET_BIT(ADCSRA, 6));
 39e:	36 99       	sbic	0x06, 6	; 6
 3a0:	fe cf       	rjmp	.-4      	; 0x39e <get_sample+0x8>
	return ADC;
 3a2:	84 b1       	in	r24, 0x04	; 4
 3a4:	95 b1       	in	r25, 0x05	; 5
}
 3a6:	08 95       	ret

000003a8 <randomEq>:
	}
	
	lcd_put(hun + '0');
	lcd_put(ten + '0');
	lcd_put(ans + '0');
}
 3a8:	af 92       	push	r10
 3aa:	bf 92       	push	r11
 3ac:	cf 92       	push	r12
 3ae:	df 92       	push	r13
 3b0:	ef 92       	push	r14
 3b2:	ff 92       	push	r15
 3b4:	0f 93       	push	r16
 3b6:	1f 93       	push	r17
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 3c0:	60 97       	sbiw	r28, 0x10	; 16
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
 3cc:	0e 94 77 04 	call	0x8ee	; 0x8ee <rand>
 3d0:	0a e0       	ldi	r16, 0x0A	; 10
 3d2:	10 e0       	ldi	r17, 0x00	; 0
 3d4:	b8 01       	movw	r22, r16
 3d6:	0e 94 03 04 	call	0x806	; 0x806 <__divmodhi4>
 3da:	5c 01       	movw	r10, r24
 3dc:	0e 94 77 04 	call	0x8ee	; 0x8ee <rand>
 3e0:	b8 01       	movw	r22, r16
 3e2:	0e 94 03 04 	call	0x806	; 0x806 <__divmodhi4>
 3e6:	6c 01       	movw	r12, r24
 3e8:	0e 94 77 04 	call	0x8ee	; 0x8ee <rand>
 3ec:	b8 01       	movw	r22, r16
 3ee:	0e 94 03 04 	call	0x806	; 0x806 <__divmodhi4>
 3f2:	7c 01       	movw	r14, r24
 3f4:	0e 94 77 04 	call	0x8ee	; 0x8ee <rand>
 3f8:	81 70       	andi	r24, 0x01	; 1
 3fa:	90 78       	andi	r25, 0x80	; 128
 3fc:	99 23       	and	r25, r25
 3fe:	24 f4       	brge	.+8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	8e 6f       	ori	r24, 0xFE	; 254
 404:	9f 6f       	ori	r25, 0xFF	; 255
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	8c 01       	movw	r16, r24
 40a:	0e 94 77 04 	call	0x8ee	; 0x8ee <rand>
 40e:	81 70       	andi	r24, 0x01	; 1
 410:	90 78       	andi	r25, 0x80	; 128
 412:	99 23       	and	r25, r25
 414:	24 f4       	brge	.+8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	8e 6f       	ori	r24, 0xFE	; 254
 41a:	9f 6f       	ori	r25, 0xFF	; 255
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	21 e0       	ldi	r18, 0x01	; 1
 420:	01 2b       	or	r16, r17
 422:	09 f0       	breq	.+2      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 424:	20 e0       	ldi	r18, 0x00	; 0
 426:	31 e0       	ldi	r19, 0x01	; 1
 428:	89 2b       	or	r24, r25
 42a:	09 f0       	breq	.+2      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	ba 86       	std	Y+10, r11	; 0x0a
 430:	a9 86       	std	Y+9, r10	; 0x09
 432:	dc 86       	std	Y+12, r13	; 0x0c
 434:	cb 86       	std	Y+11, r12	; 0x0b
 436:	fe 86       	std	Y+14, r15	; 0x0e
 438:	ed 86       	std	Y+13, r14	; 0x0d
 43a:	2f 87       	std	Y+15, r18	; 0x0f
 43c:	38 8b       	std	Y+16, r19	; 0x10
 43e:	88 e0       	ldi	r24, 0x08	; 8
 440:	fe 01       	movw	r30, r28
 442:	39 96       	adiw	r30, 0x09	; 9
 444:	de 01       	movw	r26, r28
 446:	11 96       	adiw	r26, 0x01	; 1
 448:	01 90       	ld	r0, Z+
 44a:	0d 92       	st	X+, r0
 44c:	8a 95       	dec	r24
 44e:	e1 f7       	brne	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	29 81       	ldd	r18, Y+1	; 0x01
 452:	3a 81       	ldd	r19, Y+2	; 0x02
 454:	4b 81       	ldd	r20, Y+3	; 0x03
 456:	5c 81       	ldd	r21, Y+4	; 0x04
 458:	6d 81       	ldd	r22, Y+5	; 0x05
 45a:	7e 81       	ldd	r23, Y+6	; 0x06
 45c:	8f 81       	ldd	r24, Y+7	; 0x07
 45e:	98 85       	ldd	r25, Y+8	; 0x08
 460:	60 96       	adiw	r28, 0x10	; 16
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	f8 94       	cli
 466:	de bf       	out	0x3e, r29	; 62
 468:	0f be       	out	0x3f, r0	; 63
 46a:	cd bf       	out	0x3d, r28	; 61
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	1f 91       	pop	r17
 472:	0f 91       	pop	r16
 474:	ff 90       	pop	r15
 476:	ef 90       	pop	r14
 478:	df 90       	pop	r13
 47a:	cf 90       	pop	r12
 47c:	bf 90       	pop	r11
 47e:	af 90       	pop	r10
 480:	08 95       	ret

00000482 <calcEq>:
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	cd b7       	in	r28, 0x3d	; 61
 488:	de b7       	in	r29, 0x3e	; 62
 48a:	28 97       	sbiw	r28, 0x08	; 8
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	f8 94       	cli
 490:	de bf       	out	0x3e, r29	; 62
 492:	0f be       	out	0x3f, r0	; 63
 494:	cd bf       	out	0x3d, r28	; 61
 496:	29 83       	std	Y+1, r18	; 0x01
 498:	3a 83       	std	Y+2, r19	; 0x02
 49a:	4b 83       	std	Y+3, r20	; 0x03
 49c:	5c 83       	std	Y+4, r21	; 0x04
 49e:	6d 83       	std	Y+5, r22	; 0x05
 4a0:	7e 83       	std	Y+6, r23	; 0x06
 4a2:	98 87       	std	Y+8, r25	; 0x08
 4a4:	81 30       	cpi	r24, 0x01	; 1
 4a6:	e9 f4       	brne	.+58     	; 0x4e2 <calcEq+0x60>
 4a8:	29 81       	ldd	r18, Y+1	; 0x01
 4aa:	3a 81       	ldd	r19, Y+2	; 0x02
 4ac:	8b 81       	ldd	r24, Y+3	; 0x03
 4ae:	9c 81       	ldd	r25, Y+4	; 0x04
 4b0:	28 9f       	mul	r18, r24
 4b2:	a0 01       	movw	r20, r0
 4b4:	29 9f       	mul	r18, r25
 4b6:	50 0d       	add	r21, r0
 4b8:	38 9f       	mul	r19, r24
 4ba:	50 0d       	add	r21, r0
 4bc:	11 24       	eor	r1, r1
 4be:	88 85       	ldd	r24, Y+8	; 0x08
 4c0:	81 30       	cpi	r24, 0x01	; 1
 4c2:	51 f4       	brne	.+20     	; 0x4d8 <calcEq+0x56>
 4c4:	2d 81       	ldd	r18, Y+5	; 0x05
 4c6:	3e 81       	ldd	r19, Y+6	; 0x06
 4c8:	42 9f       	mul	r20, r18
 4ca:	c0 01       	movw	r24, r0
 4cc:	43 9f       	mul	r20, r19
 4ce:	90 0d       	add	r25, r0
 4d0:	52 9f       	mul	r21, r18
 4d2:	90 0d       	add	r25, r0
 4d4:	11 24       	eor	r1, r1
 4d6:	22 c0       	rjmp	.+68     	; 0x51c <calcEq+0x9a>
 4d8:	8d 81       	ldd	r24, Y+5	; 0x05
 4da:	9e 81       	ldd	r25, Y+6	; 0x06
 4dc:	84 0f       	add	r24, r20
 4de:	95 1f       	adc	r25, r21
 4e0:	1d c0       	rjmp	.+58     	; 0x51c <calcEq+0x9a>
 4e2:	88 85       	ldd	r24, Y+8	; 0x08
 4e4:	81 30       	cpi	r24, 0x01	; 1
 4e6:	81 f4       	brne	.+32     	; 0x508 <calcEq+0x86>
 4e8:	4b 81       	ldd	r20, Y+3	; 0x03
 4ea:	5c 81       	ldd	r21, Y+4	; 0x04
 4ec:	8d 81       	ldd	r24, Y+5	; 0x05
 4ee:	9e 81       	ldd	r25, Y+6	; 0x06
 4f0:	48 9f       	mul	r20, r24
 4f2:	90 01       	movw	r18, r0
 4f4:	49 9f       	mul	r20, r25
 4f6:	30 0d       	add	r19, r0
 4f8:	58 9f       	mul	r21, r24
 4fa:	30 0d       	add	r19, r0
 4fc:	11 24       	eor	r1, r1
 4fe:	89 81       	ldd	r24, Y+1	; 0x01
 500:	9a 81       	ldd	r25, Y+2	; 0x02
 502:	82 0f       	add	r24, r18
 504:	93 1f       	adc	r25, r19
 506:	0a c0       	rjmp	.+20     	; 0x51c <calcEq+0x9a>
 508:	29 81       	ldd	r18, Y+1	; 0x01
 50a:	3a 81       	ldd	r19, Y+2	; 0x02
 50c:	8b 81       	ldd	r24, Y+3	; 0x03
 50e:	9c 81       	ldd	r25, Y+4	; 0x04
 510:	82 0f       	add	r24, r18
 512:	93 1f       	adc	r25, r19
 514:	2d 81       	ldd	r18, Y+5	; 0x05
 516:	3e 81       	ldd	r19, Y+6	; 0x06
 518:	82 0f       	add	r24, r18
 51a:	93 1f       	adc	r25, r19
 51c:	28 96       	adiw	r28, 0x08	; 8
 51e:	0f b6       	in	r0, 0x3f	; 63
 520:	f8 94       	cli
 522:	de bf       	out	0x3e, r29	; 62
 524:	0f be       	out	0x3f, r0	; 63
 526:	cd bf       	out	0x3d, r28	; 61
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <printEq>:
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	cd b7       	in	r28, 0x3d	; 61
 534:	de b7       	in	r29, 0x3e	; 62
 536:	28 97       	sbiw	r28, 0x08	; 8
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	f8 94       	cli
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	0f be       	out	0x3f, r0	; 63
 540:	cd bf       	out	0x3d, r28	; 61
 542:	29 83       	std	Y+1, r18	; 0x01
 544:	3a 83       	std	Y+2, r19	; 0x02
 546:	4b 83       	std	Y+3, r20	; 0x03
 548:	5c 83       	std	Y+4, r21	; 0x04
 54a:	6d 83       	std	Y+5, r22	; 0x05
 54c:	7e 83       	std	Y+6, r23	; 0x06
 54e:	8f 83       	std	Y+7, r24	; 0x07
 550:	98 87       	std	Y+8, r25	; 0x08
 552:	60 e0       	ldi	r22, 0x00	; 0
 554:	70 e0       	ldi	r23, 0x00	; 0
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 19 01 	call	0x232	; 0x232 <lcd_pos>
 55e:	89 81       	ldd	r24, Y+1	; 0x01
 560:	9a 81       	ldd	r25, Y+2	; 0x02
 562:	c0 96       	adiw	r24, 0x30	; 48
 564:	0e 94 31 01 	call	0x262	; 0x262 <lcd_put>
 568:	ef 81       	ldd	r30, Y+7	; 0x07
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	e2 56       	subi	r30, 0x62	; 98
 56e:	ff 4f       	sbci	r31, 0xFF	; 255
 570:	80 81       	ld	r24, Z
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 31 01 	call	0x262	; 0x262 <lcd_put>
 578:	8b 81       	ldd	r24, Y+3	; 0x03
 57a:	9c 81       	ldd	r25, Y+4	; 0x04
 57c:	c0 96       	adiw	r24, 0x30	; 48
 57e:	0e 94 31 01 	call	0x262	; 0x262 <lcd_put>
 582:	e8 85       	ldd	r30, Y+8	; 0x08
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	e2 56       	subi	r30, 0x62	; 98
 588:	ff 4f       	sbci	r31, 0xFF	; 255
 58a:	80 81       	ld	r24, Z
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	0e 94 31 01 	call	0x262	; 0x262 <lcd_put>
 592:	8d 81       	ldd	r24, Y+5	; 0x05
 594:	9e 81       	ldd	r25, Y+6	; 0x06
 596:	c0 96       	adiw	r24, 0x30	; 48
 598:	0e 94 31 01 	call	0x262	; 0x262 <lcd_put>
 59c:	28 96       	adiw	r28, 0x08	; 8
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	f8 94       	cli
 5a2:	de bf       	out	0x3e, r29	; 62
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	cd bf       	out	0x3d, r28	; 61
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	08 95       	ret

000005ae <getAns>:

int getAns(void)
{
 5ae:	ef 92       	push	r14
 5b0:	ff 92       	push	r15
 5b2:	0f 93       	push	r16
 5b4:	1f 93       	push	r17
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	cd b7       	in	r28, 0x3d	; 61
 5bc:	de b7       	in	r29, 0x3e	; 62
 5be:	ac 97       	sbiw	r28, 0x2c	; 44
 5c0:	0f b6       	in	r0, 0x3f	; 63
 5c2:	f8 94       	cli
 5c4:	de bf       	out	0x3e, r29	; 62
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	cd bf       	out	0x3d, r28	; 61
	int keys[] = {1, 2, 3, 10,
 5ca:	80 e2       	ldi	r24, 0x20	; 32
 5cc:	e4 e6       	ldi	r30, 0x64	; 100
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	de 01       	movw	r26, r28
 5d2:	11 96       	adiw	r26, 0x01	; 1
 5d4:	01 90       	ld	r0, Z+
 5d6:	0d 92       	st	X+, r0
 5d8:	8a 95       	dec	r24
 5da:	e1 f7       	brne	.-8      	; 0x5d4 <getAns+0x26>
				  4, 5, 6, 10,
				  7, 8, 9, 10,
				 10, 0, 10, 10};
	
	lcd_pos(1,0);
 5dc:	60 e0       	ldi	r22, 0x00	; 0
 5de:	70 e0       	ldi	r23, 0x00	; 0
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	0e 94 19 01 	call	0x232	; 0x232 <lcd_pos>
	char buf[] = "Ans: ";
 5e8:	86 e0       	ldi	r24, 0x06	; 6
 5ea:	e4 e8       	ldi	r30, 0x84	; 132
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	de 01       	movw	r26, r28
 5f0:	91 96       	adiw	r26, 0x21	; 33
 5f2:	01 90       	ld	r0, Z+
 5f4:	0d 92       	st	X+, r0
 5f6:	8a 95       	dec	r24
 5f8:	e1 f7       	brne	.-8      	; 0x5f2 <getAns+0x44>
	lcd_puts2(buf);
 5fa:	ce 01       	movw	r24, r28
 5fc:	81 96       	adiw	r24, 0x21	; 33
 5fe:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_puts2>
	
	int index = 0;
	int ans[] = {0,0,0};
 602:	18 a6       	std	Y+40, r1	; 0x28
 604:	1f a2       	std	Y+39, r1	; 0x27
 606:	1a a6       	std	Y+42, r1	; 0x2a
 608:	19 a6       	std	Y+41, r1	; 0x29
 60a:	1c a6       	std	Y+44, r1	; 0x2c
 60c:	1b a6       	std	Y+43, r1	; 0x2b
	
	lcd_pos(1,0);
	char buf[] = "Ans: ";
	lcd_puts2(buf);
	
	int index = 0;
 60e:	00 e0       	ldi	r16, 0x00	; 0
 610:	10 e0       	ldi	r17, 0x00	; 0
	int ans[] = {0,0,0};
	
	while(1)
	{
		if (is_pressed(3,3) && index != 0) { break ; } //press D for done
 612:	63 e0       	ldi	r22, 0x03	; 3
 614:	70 e0       	ldi	r23, 0x00	; 0
 616:	83 e0       	ldi	r24, 0x03	; 3
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	0e 94 49 00 	call	0x92	; 0x92 <is_pressed>
 61e:	89 2b       	or	r24, r25
 620:	19 f0       	breq	.+6      	; 0x628 <getAns+0x7a>
 622:	01 15       	cp	r16, r1
 624:	11 05       	cpc	r17, r1
 626:	c1 f5       	brne	.+112    	; 0x698 <getAns+0xea>
			
		int k = get_key();
 628:	0e 94 7c 00 	call	0xf8	; 0xf8 <get_key>
		if (k > 0 && k <= 16 && k%4 && k!=13 && k!=15 && index < 3) //key press only numbers up to 3 times
 62c:	9c 01       	movw	r18, r24
 62e:	21 50       	subi	r18, 0x01	; 1
 630:	31 09       	sbc	r19, r1
 632:	20 31       	cpi	r18, 0x10	; 16
 634:	31 05       	cpc	r19, r1
 636:	58 f5       	brcc	.+86     	; 0x68e <getAns+0xe0>
 638:	9c 01       	movw	r18, r24
 63a:	23 70       	andi	r18, 0x03	; 3
 63c:	33 27       	eor	r19, r19
 63e:	23 2b       	or	r18, r19
 640:	31 f1       	breq	.+76     	; 0x68e <getAns+0xe0>
 642:	8d 30       	cpi	r24, 0x0D	; 13
 644:	91 05       	cpc	r25, r1
 646:	19 f1       	breq	.+70     	; 0x68e <getAns+0xe0>
 648:	8f 30       	cpi	r24, 0x0F	; 15
 64a:	91 05       	cpc	r25, r1
 64c:	01 f1       	breq	.+64     	; 0x68e <getAns+0xe0>
 64e:	03 30       	cpi	r16, 0x03	; 3
 650:	11 05       	cpc	r17, r1
 652:	ec f4       	brge	.+58     	; 0x68e <getAns+0xe0>
		{
			int num = keys[k - 1];
 654:	fc 01       	movw	r30, r24
 656:	31 97       	sbiw	r30, 0x01	; 1
 658:	ee 0f       	add	r30, r30
 65a:	ff 1f       	adc	r31, r31
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	8c 0f       	add	r24, r28
 662:	9d 1f       	adc	r25, r29
 664:	e8 0f       	add	r30, r24
 666:	f9 1f       	adc	r31, r25
 668:	e0 80       	ld	r14, Z
 66a:	f1 80       	ldd	r15, Z+1	; 0x01
			lcd_put(num + '0');
 66c:	c7 01       	movw	r24, r14
 66e:	c0 96       	adiw	r24, 0x30	; 48
 670:	0e 94 31 01 	call	0x262	; 0x262 <lcd_put>
			ans[index] = num;
 674:	f8 01       	movw	r30, r16
 676:	ee 0f       	add	r30, r30
 678:	ff 1f       	adc	r31, r31
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	8c 0f       	add	r24, r28
 680:	9d 1f       	adc	r25, r29
 682:	e8 0f       	add	r30, r24
 684:	f9 1f       	adc	r31, r25
 686:	f7 a2       	std	Z+39, r15	; 0x27
 688:	e6 a2       	std	Z+38, r14	; 0x26
			index++;
 68a:	0f 5f       	subi	r16, 0xFF	; 255
 68c:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		avr_wait(3000);
 68e:	88 eb       	ldi	r24, 0xB8	; 184
 690:	9b e0       	ldi	r25, 0x0B	; 11
 692:	0e 94 45 01 	call	0x28a	; 0x28a <avr_wait>
	}
 696:	bd cf       	rjmp	.-134    	; 0x612 <getAns+0x64>
	
	lcd_clr();
 698:	0e 94 14 01 	call	0x228	; 0x228 <lcd_clr>
	
	if (index == 1)
 69c:	01 30       	cpi	r16, 0x01	; 1
 69e:	11 05       	cpc	r17, r1
 6a0:	19 f4       	brne	.+6      	; 0x6a8 <getAns+0xfa>
	{
		return ans[0];
 6a2:	8f a1       	ldd	r24, Y+39	; 0x27
 6a4:	98 a5       	ldd	r25, Y+40	; 0x28
 6a6:	33 c0       	rjmp	.+102    	; 0x70e <getAns+0x160>
	} else if (index == 2)
 6a8:	02 30       	cpi	r16, 0x02	; 2
 6aa:	11 05       	cpc	r17, r1
 6ac:	99 f4       	brne	.+38     	; 0x6d4 <getAns+0x126>
	{
		return ans[0] * 10 + ans[1];
 6ae:	4f a1       	ldd	r20, Y+39	; 0x27
 6b0:	58 a5       	ldd	r21, Y+40	; 0x28
 6b2:	ca 01       	movw	r24, r20
 6b4:	88 0f       	add	r24, r24
 6b6:	99 1f       	adc	r25, r25
 6b8:	44 0f       	add	r20, r20
 6ba:	55 1f       	adc	r21, r21
 6bc:	44 0f       	add	r20, r20
 6be:	55 1f       	adc	r21, r21
 6c0:	44 0f       	add	r20, r20
 6c2:	55 1f       	adc	r21, r21
 6c4:	9c 01       	movw	r18, r24
 6c6:	24 0f       	add	r18, r20
 6c8:	35 1f       	adc	r19, r21
 6ca:	89 a5       	ldd	r24, Y+41	; 0x29
 6cc:	9a a5       	ldd	r25, Y+42	; 0x2a
 6ce:	82 0f       	add	r24, r18
 6d0:	93 1f       	adc	r25, r19
 6d2:	1d c0       	rjmp	.+58     	; 0x70e <getAns+0x160>
	} else //index == 3
	{
		return ans[0] * 100 + ans[1] * 10 + ans[2];
 6d4:	2f a1       	ldd	r18, Y+39	; 0x27
 6d6:	38 a5       	ldd	r19, Y+40	; 0x28
 6d8:	44 e6       	ldi	r20, 0x64	; 100
 6da:	42 9f       	mul	r20, r18
 6dc:	c0 01       	movw	r24, r0
 6de:	43 9f       	mul	r20, r19
 6e0:	90 0d       	add	r25, r0
 6e2:	11 24       	eor	r1, r1
 6e4:	29 a5       	ldd	r18, Y+41	; 0x29
 6e6:	3a a5       	ldd	r19, Y+42	; 0x2a
 6e8:	b9 01       	movw	r22, r18
 6ea:	66 0f       	add	r22, r22
 6ec:	77 1f       	adc	r23, r23
 6ee:	a9 01       	movw	r20, r18
 6f0:	44 0f       	add	r20, r20
 6f2:	55 1f       	adc	r21, r21
 6f4:	44 0f       	add	r20, r20
 6f6:	55 1f       	adc	r21, r21
 6f8:	44 0f       	add	r20, r20
 6fa:	55 1f       	adc	r21, r21
 6fc:	9b 01       	movw	r18, r22
 6fe:	24 0f       	add	r18, r20
 700:	35 1f       	adc	r19, r21
 702:	28 0f       	add	r18, r24
 704:	39 1f       	adc	r19, r25
 706:	8b a5       	ldd	r24, Y+43	; 0x2b
 708:	9c a5       	ldd	r25, Y+44	; 0x2c
 70a:	82 0f       	add	r24, r18
 70c:	93 1f       	adc	r25, r19
	}
}
 70e:	ac 96       	adiw	r28, 0x2c	; 44
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	f8 94       	cli
 714:	de bf       	out	0x3e, r29	; 62
 716:	0f be       	out	0x3f, r0	; 63
 718:	cd bf       	out	0x3d, r28	; 61
 71a:	df 91       	pop	r29
 71c:	cf 91       	pop	r28
 71e:	1f 91       	pop	r17
 720:	0f 91       	pop	r16
 722:	ff 90       	pop	r15
 724:	ef 90       	pop	r14
 726:	08 95       	ret

00000728 <checkAns>:

int checkAns(Equation eq, int ans)
{
 728:	0f 93       	push	r16
 72a:	1f 93       	push	r17
 72c:	cf 93       	push	r28
 72e:	df 93       	push	r29
 730:	cd b7       	in	r28, 0x3d	; 61
 732:	de b7       	in	r29, 0x3e	; 62
 734:	28 97       	sbiw	r28, 0x08	; 8
 736:	0f b6       	in	r0, 0x3f	; 63
 738:	f8 94       	cli
 73a:	de bf       	out	0x3e, r29	; 62
 73c:	0f be       	out	0x3f, r0	; 63
 73e:	cd bf       	out	0x3d, r28	; 61
 740:	29 83       	std	Y+1, r18	; 0x01
 742:	3a 83       	std	Y+2, r19	; 0x02
 744:	4b 83       	std	Y+3, r20	; 0x03
 746:	5c 83       	std	Y+4, r21	; 0x04
 748:	6d 83       	std	Y+5, r22	; 0x05
 74a:	7e 83       	std	Y+6, r23	; 0x06
 74c:	8f 83       	std	Y+7, r24	; 0x07
 74e:	98 87       	std	Y+8, r25	; 0x08
	lcd_clr();
 750:	0e 94 14 01 	call	0x228	; 0x228 <lcd_clr>
	lcd_pos(0,0);
 754:	60 e0       	ldi	r22, 0x00	; 0
 756:	70 e0       	ldi	r23, 0x00	; 0
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	0e 94 19 01 	call	0x232	; 0x232 <lcd_pos>
	int right = calcEq(eq);
 760:	29 81       	ldd	r18, Y+1	; 0x01
 762:	3a 81       	ldd	r19, Y+2	; 0x02
 764:	4b 81       	ldd	r20, Y+3	; 0x03
 766:	5c 81       	ldd	r21, Y+4	; 0x04
 768:	6d 81       	ldd	r22, Y+5	; 0x05
 76a:	7e 81       	ldd	r23, Y+6	; 0x06
 76c:	8f 81       	ldd	r24, Y+7	; 0x07
 76e:	98 85       	ldd	r25, Y+8	; 0x08
 770:	0e 94 41 02 	call	0x482	; 0x482 <calcEq>
	if (right == ans)
 774:	80 17       	cp	r24, r16
 776:	91 07       	cpc	r25, r17
 778:	39 f4       	brne	.+14     	; 0x788 <checkAns+0x60>
	{
		lcd_puts2("Correct!");
 77a:	8a e8       	ldi	r24, 0x8A	; 138
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_puts2>
		return 1;
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	0a c0       	rjmp	.+20     	; 0x79c <checkAns+0x74>
	}
	else
	{
		lcd_puts2("Try again.");
 788:	83 e9       	ldi	r24, 0x93	; 147
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_puts2>
		avr_wait(10000);
 790:	80 e1       	ldi	r24, 0x10	; 16
 792:	97 e2       	ldi	r25, 0x27	; 39
 794:	0e 94 45 01 	call	0x28a	; 0x28a <avr_wait>
		return 0;
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	90 e0       	ldi	r25, 0x00	; 0
	}
 79c:	28 96       	adiw	r28, 0x08	; 8
 79e:	0f b6       	in	r0, 0x3f	; 63
 7a0:	f8 94       	cli
 7a2:	de bf       	out	0x3e, r29	; 62
 7a4:	0f be       	out	0x3f, r0	; 63
 7a6:	cd bf       	out	0x3d, r28	; 61
 7a8:	df 91       	pop	r29
 7aa:	cf 91       	pop	r28
 7ac:	1f 91       	pop	r17
 7ae:	0f 91       	pop	r16
 7b0:	08 95       	ret

000007b2 <play>:
#include "speaker.h"


void play(PlayingNote note) {
	// Set PA1 as output
	DDRA |= (1 << PA1);
 7b2:	8a b3       	in	r24, 0x1a	; 26
 7b4:	82 60       	ori	r24, 0x02	; 2
 7b6:	8a bb       	out	0x1a, r24	; 26

	// Calculate the timer compare match value for the desired frequency
	unsigned int compare_match_value = 300;

	TCCR1A = 0;  // Normal port operation
 7b8:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10);  // CTC mode, Prescaler = 64
 7ba:	8b e0       	ldi	r24, 0x0B	; 11
 7bc:	8e bd       	out	0x2e, r24	; 46
	OCR1A = compare_match_value;  // Set compare match value
 7be:	8c e2       	ldi	r24, 0x2C	; 44
 7c0:	91 e0       	ldi	r25, 0x01	; 1
 7c2:	9b bd       	out	0x2b, r25	; 43
 7c4:	8a bd       	out	0x2a, r24	; 42

	// Enable Timer1 compare match A interrupt
	TIMSK |= (1 << OCIE1A);
 7c6:	89 b7       	in	r24, 0x39	; 57
 7c8:	80 61       	ori	r24, 0x10	; 16
 7ca:	89 bf       	out	0x39, r24	; 57

	// Enable global interrupts
	sei();
 7cc:	78 94       	sei
 7ce:	08 95       	ret

000007d0 <stop_playing>:
}

void stop_playing(void) {
	// Disable Timer1 compare match A interrupt
	TIMSK &= ~(1 << OCIE1A);
 7d0:	89 b7       	in	r24, 0x39	; 57
 7d2:	8f 7e       	andi	r24, 0xEF	; 239
 7d4:	89 bf       	out	0x39, r24	; 57

	// Set PA1 to low
	PORTA &= ~(1 << PA1);
 7d6:	8b b3       	in	r24, 0x1b	; 27
 7d8:	8d 7f       	andi	r24, 0xFD	; 253
 7da:	8b bb       	out	0x1b, r24	; 27

	// Reset Timer1 configuration
	TCCR1A = 0;
 7dc:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0;
 7de:	1e bc       	out	0x2e, r1	; 46
 7e0:	08 95       	ret

000007e2 <__vector_7>:
}

// Timer1 compare match A interrupt service routine
ISR(TIMER1_COMPA_vect) {
 7e2:	1f 92       	push	r1
 7e4:	0f 92       	push	r0
 7e6:	0f b6       	in	r0, 0x3f	; 63
 7e8:	0f 92       	push	r0
 7ea:	11 24       	eor	r1, r1
 7ec:	8f 93       	push	r24
 7ee:	9f 93       	push	r25
	// Toggle PA1
	PORTA ^= (1 << PA1);
 7f0:	9b b3       	in	r25, 0x1b	; 27
 7f2:	82 e0       	ldi	r24, 0x02	; 2
 7f4:	89 27       	eor	r24, r25
 7f6:	8b bb       	out	0x1b, r24	; 27
}
 7f8:	9f 91       	pop	r25
 7fa:	8f 91       	pop	r24
 7fc:	0f 90       	pop	r0
 7fe:	0f be       	out	0x3f, r0	; 63
 800:	0f 90       	pop	r0
 802:	1f 90       	pop	r1
 804:	18 95       	reti

00000806 <__divmodhi4>:
 806:	97 fb       	bst	r25, 7
 808:	07 2e       	mov	r0, r23
 80a:	16 f4       	brtc	.+4      	; 0x810 <__divmodhi4+0xa>
 80c:	00 94       	com	r0
 80e:	07 d0       	rcall	.+14     	; 0x81e <__divmodhi4_neg1>
 810:	77 fd       	sbrc	r23, 7
 812:	09 d0       	rcall	.+18     	; 0x826 <__divmodhi4_neg2>
 814:	0e 94 17 04 	call	0x82e	; 0x82e <__udivmodhi4>
 818:	07 fc       	sbrc	r0, 7
 81a:	05 d0       	rcall	.+10     	; 0x826 <__divmodhi4_neg2>
 81c:	3e f4       	brtc	.+14     	; 0x82c <__divmodhi4_exit>

0000081e <__divmodhi4_neg1>:
 81e:	90 95       	com	r25
 820:	81 95       	neg	r24
 822:	9f 4f       	sbci	r25, 0xFF	; 255
 824:	08 95       	ret

00000826 <__divmodhi4_neg2>:
 826:	70 95       	com	r23
 828:	61 95       	neg	r22
 82a:	7f 4f       	sbci	r23, 0xFF	; 255

0000082c <__divmodhi4_exit>:
 82c:	08 95       	ret

0000082e <__udivmodhi4>:
 82e:	aa 1b       	sub	r26, r26
 830:	bb 1b       	sub	r27, r27
 832:	51 e1       	ldi	r21, 0x11	; 17
 834:	07 c0       	rjmp	.+14     	; 0x844 <__udivmodhi4_ep>

00000836 <__udivmodhi4_loop>:
 836:	aa 1f       	adc	r26, r26
 838:	bb 1f       	adc	r27, r27
 83a:	a6 17       	cp	r26, r22
 83c:	b7 07       	cpc	r27, r23
 83e:	10 f0       	brcs	.+4      	; 0x844 <__udivmodhi4_ep>
 840:	a6 1b       	sub	r26, r22
 842:	b7 0b       	sbc	r27, r23

00000844 <__udivmodhi4_ep>:
 844:	88 1f       	adc	r24, r24
 846:	99 1f       	adc	r25, r25
 848:	5a 95       	dec	r21
 84a:	a9 f7       	brne	.-22     	; 0x836 <__udivmodhi4_loop>
 84c:	80 95       	com	r24
 84e:	90 95       	com	r25
 850:	bc 01       	movw	r22, r24
 852:	cd 01       	movw	r24, r26
 854:	08 95       	ret

00000856 <do_rand>:
 856:	8f 92       	push	r8
 858:	9f 92       	push	r9
 85a:	af 92       	push	r10
 85c:	bf 92       	push	r11
 85e:	cf 92       	push	r12
 860:	df 92       	push	r13
 862:	ef 92       	push	r14
 864:	ff 92       	push	r15
 866:	cf 93       	push	r28
 868:	df 93       	push	r29
 86a:	ec 01       	movw	r28, r24
 86c:	68 81       	ld	r22, Y
 86e:	79 81       	ldd	r23, Y+1	; 0x01
 870:	8a 81       	ldd	r24, Y+2	; 0x02
 872:	9b 81       	ldd	r25, Y+3	; 0x03
 874:	61 15       	cp	r22, r1
 876:	71 05       	cpc	r23, r1
 878:	81 05       	cpc	r24, r1
 87a:	91 05       	cpc	r25, r1
 87c:	21 f4       	brne	.+8      	; 0x886 <__stack+0x27>
 87e:	64 e2       	ldi	r22, 0x24	; 36
 880:	79 ed       	ldi	r23, 0xD9	; 217
 882:	8b e5       	ldi	r24, 0x5B	; 91
 884:	97 e0       	ldi	r25, 0x07	; 7
 886:	2d e1       	ldi	r18, 0x1D	; 29
 888:	33 ef       	ldi	r19, 0xF3	; 243
 88a:	41 e0       	ldi	r20, 0x01	; 1
 88c:	50 e0       	ldi	r21, 0x00	; 0
 88e:	0e 94 87 04 	call	0x90e	; 0x90e <__divmodsi4>
 892:	49 01       	movw	r8, r18
 894:	5a 01       	movw	r10, r20
 896:	9b 01       	movw	r18, r22
 898:	ac 01       	movw	r20, r24
 89a:	a7 ea       	ldi	r26, 0xA7	; 167
 89c:	b1 e4       	ldi	r27, 0x41	; 65
 89e:	0e 94 a6 04 	call	0x94c	; 0x94c <__muluhisi3>
 8a2:	6b 01       	movw	r12, r22
 8a4:	7c 01       	movw	r14, r24
 8a6:	ac ee       	ldi	r26, 0xEC	; 236
 8a8:	b4 ef       	ldi	r27, 0xF4	; 244
 8aa:	a5 01       	movw	r20, r10
 8ac:	94 01       	movw	r18, r8
 8ae:	0e 94 b4 04 	call	0x968	; 0x968 <__mulohisi3>
 8b2:	dc 01       	movw	r26, r24
 8b4:	cb 01       	movw	r24, r22
 8b6:	8c 0d       	add	r24, r12
 8b8:	9d 1d       	adc	r25, r13
 8ba:	ae 1d       	adc	r26, r14
 8bc:	bf 1d       	adc	r27, r15
 8be:	b7 ff       	sbrs	r27, 7
 8c0:	03 c0       	rjmp	.+6      	; 0x8c8 <__stack+0x69>
 8c2:	01 97       	sbiw	r24, 0x01	; 1
 8c4:	a1 09       	sbc	r26, r1
 8c6:	b0 48       	sbci	r27, 0x80	; 128
 8c8:	88 83       	st	Y, r24
 8ca:	99 83       	std	Y+1, r25	; 0x01
 8cc:	aa 83       	std	Y+2, r26	; 0x02
 8ce:	bb 83       	std	Y+3, r27	; 0x03
 8d0:	9f 77       	andi	r25, 0x7F	; 127
 8d2:	df 91       	pop	r29
 8d4:	cf 91       	pop	r28
 8d6:	ff 90       	pop	r15
 8d8:	ef 90       	pop	r14
 8da:	df 90       	pop	r13
 8dc:	cf 90       	pop	r12
 8de:	bf 90       	pop	r11
 8e0:	af 90       	pop	r10
 8e2:	9f 90       	pop	r9
 8e4:	8f 90       	pop	r8
 8e6:	08 95       	ret

000008e8 <rand_r>:
 8e8:	0e 94 2b 04 	call	0x856	; 0x856 <do_rand>
 8ec:	08 95       	ret

000008ee <rand>:
 8ee:	80 e6       	ldi	r24, 0x60	; 96
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 94 2b 04 	call	0x856	; 0x856 <do_rand>
 8f6:	08 95       	ret

000008f8 <srand>:
 8f8:	a0 e0       	ldi	r26, 0x00	; 0
 8fa:	b0 e0       	ldi	r27, 0x00	; 0
 8fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 900:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 904:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 908:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 90c:	08 95       	ret

0000090e <__divmodsi4>:
 90e:	05 2e       	mov	r0, r21
 910:	97 fb       	bst	r25, 7
 912:	1e f4       	brtc	.+6      	; 0x91a <__divmodsi4+0xc>
 914:	00 94       	com	r0
 916:	0e 94 9e 04 	call	0x93c	; 0x93c <__negsi2>
 91a:	57 fd       	sbrc	r21, 7
 91c:	07 d0       	rcall	.+14     	; 0x92c <__divmodsi4_neg2>
 91e:	0e 94 b9 04 	call	0x972	; 0x972 <__udivmodsi4>
 922:	07 fc       	sbrc	r0, 7
 924:	03 d0       	rcall	.+6      	; 0x92c <__divmodsi4_neg2>
 926:	4e f4       	brtc	.+18     	; 0x93a <__divmodsi4_exit>
 928:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__negsi2>

0000092c <__divmodsi4_neg2>:
 92c:	50 95       	com	r21
 92e:	40 95       	com	r20
 930:	30 95       	com	r19
 932:	21 95       	neg	r18
 934:	3f 4f       	sbci	r19, 0xFF	; 255
 936:	4f 4f       	sbci	r20, 0xFF	; 255
 938:	5f 4f       	sbci	r21, 0xFF	; 255

0000093a <__divmodsi4_exit>:
 93a:	08 95       	ret

0000093c <__negsi2>:
 93c:	90 95       	com	r25
 93e:	80 95       	com	r24
 940:	70 95       	com	r23
 942:	61 95       	neg	r22
 944:	7f 4f       	sbci	r23, 0xFF	; 255
 946:	8f 4f       	sbci	r24, 0xFF	; 255
 948:	9f 4f       	sbci	r25, 0xFF	; 255
 94a:	08 95       	ret

0000094c <__muluhisi3>:
 94c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__umulhisi3>
 950:	a5 9f       	mul	r26, r21
 952:	90 0d       	add	r25, r0
 954:	b4 9f       	mul	r27, r20
 956:	90 0d       	add	r25, r0
 958:	a4 9f       	mul	r26, r20
 95a:	80 0d       	add	r24, r0
 95c:	91 1d       	adc	r25, r1
 95e:	11 24       	eor	r1, r1
 960:	08 95       	ret

00000962 <__mulshisi3>:
 962:	b7 ff       	sbrs	r27, 7
 964:	0c 94 a6 04 	jmp	0x94c	; 0x94c <__muluhisi3>

00000968 <__mulohisi3>:
 968:	0e 94 a6 04 	call	0x94c	; 0x94c <__muluhisi3>
 96c:	82 1b       	sub	r24, r18
 96e:	93 0b       	sbc	r25, r19
 970:	08 95       	ret

00000972 <__udivmodsi4>:
 972:	a1 e2       	ldi	r26, 0x21	; 33
 974:	1a 2e       	mov	r1, r26
 976:	aa 1b       	sub	r26, r26
 978:	bb 1b       	sub	r27, r27
 97a:	fd 01       	movw	r30, r26
 97c:	0d c0       	rjmp	.+26     	; 0x998 <__udivmodsi4_ep>

0000097e <__udivmodsi4_loop>:
 97e:	aa 1f       	adc	r26, r26
 980:	bb 1f       	adc	r27, r27
 982:	ee 1f       	adc	r30, r30
 984:	ff 1f       	adc	r31, r31
 986:	a2 17       	cp	r26, r18
 988:	b3 07       	cpc	r27, r19
 98a:	e4 07       	cpc	r30, r20
 98c:	f5 07       	cpc	r31, r21
 98e:	20 f0       	brcs	.+8      	; 0x998 <__udivmodsi4_ep>
 990:	a2 1b       	sub	r26, r18
 992:	b3 0b       	sbc	r27, r19
 994:	e4 0b       	sbc	r30, r20
 996:	f5 0b       	sbc	r31, r21

00000998 <__udivmodsi4_ep>:
 998:	66 1f       	adc	r22, r22
 99a:	77 1f       	adc	r23, r23
 99c:	88 1f       	adc	r24, r24
 99e:	99 1f       	adc	r25, r25
 9a0:	1a 94       	dec	r1
 9a2:	69 f7       	brne	.-38     	; 0x97e <__udivmodsi4_loop>
 9a4:	60 95       	com	r22
 9a6:	70 95       	com	r23
 9a8:	80 95       	com	r24
 9aa:	90 95       	com	r25
 9ac:	9b 01       	movw	r18, r22
 9ae:	ac 01       	movw	r20, r24
 9b0:	bd 01       	movw	r22, r26
 9b2:	cf 01       	movw	r24, r30
 9b4:	08 95       	ret

000009b6 <__umulhisi3>:
 9b6:	a2 9f       	mul	r26, r18
 9b8:	b0 01       	movw	r22, r0
 9ba:	b3 9f       	mul	r27, r19
 9bc:	c0 01       	movw	r24, r0
 9be:	a3 9f       	mul	r26, r19
 9c0:	70 0d       	add	r23, r0
 9c2:	81 1d       	adc	r24, r1
 9c4:	11 24       	eor	r1, r1
 9c6:	91 1d       	adc	r25, r1
 9c8:	b2 9f       	mul	r27, r18
 9ca:	70 0d       	add	r23, r0
 9cc:	81 1d       	adc	r24, r1
 9ce:	11 24       	eor	r1, r1
 9d0:	91 1d       	adc	r25, r1
 9d2:	08 95       	ret

000009d4 <_exit>:
 9d4:	f8 94       	cli

000009d6 <__stop_program>:
 9d6:	ff cf       	rjmp	.-2      	; 0x9d6 <__stop_program>
