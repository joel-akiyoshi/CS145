
project5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000954  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000954  000009c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a38  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001581  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a3d  00000000  00000000  000020fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000959  00000000  00000000  00002b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  00003494  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000484  00000000  00000000  00003774  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b2c  00000000  00000000  00003bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00004724  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
  7a:	0c 94 a8 04 	jmp	0x950	; 0x950 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <is_pressed>:
	}
}

int is_pressed(int r, int c)
{
	CLR_BIT(PORTA, 0);
  82:	9b b3       	in	r25, 0x1b	; 27
  84:	9e 7f       	andi	r25, 0xFE	; 254
  86:	9b bb       	out	0x1b, r25	; 27
	// set all GPIO to 0
	DDRC = 0;
  88:	14 ba       	out	0x14, r1	; 20
	PORTC = 0xF0;
  8a:	90 ef       	ldi	r25, 0xF0	; 240
  8c:	95 bb       	out	0x15, r25	; 21

    SET_BIT(DDRC, r);  // set row pin to OUTPUT
  8e:	44 b3       	in	r20, 0x14	; 20
  90:	21 e0       	ldi	r18, 0x01	; 1
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	f9 01       	movw	r30, r18
  96:	02 c0       	rjmp	.+4      	; 0x9c <is_pressed+0x1a>
  98:	ee 0f       	add	r30, r30
  9a:	ff 1f       	adc	r31, r31
  9c:	8a 95       	dec	r24
  9e:	e2 f7       	brpl	.-8      	; 0x98 <is_pressed+0x16>
  a0:	cf 01       	movw	r24, r30
  a2:	4e 2b       	or	r20, r30
  a4:	44 bb       	out	0x14, r20	; 20
	CLR_BIT(PORTC, r);  // write a '0' to PORTC at r
  a6:	95 b3       	in	r25, 0x15	; 21
  a8:	80 95       	com	r24
  aa:	89 23       	and	r24, r25
  ac:	85 bb       	out	0x15, r24	; 21

	SET_BIT(PORTC, c + 4);  // pull up GPIO at col c
  ae:	85 b3       	in	r24, 0x15	; 21
  b0:	6c 5f       	subi	r22, 0xFC	; 252
  b2:	7f 4f       	sbci	r23, 0xFF	; 255
  b4:	06 2e       	mov	r0, r22
  b6:	02 c0       	rjmp	.+4      	; 0xbc <is_pressed+0x3a>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <is_pressed+0x36>
  c0:	28 2b       	or	r18, r24
  c2:	25 bb       	out	0x15, r18	; 21
	
	if (!GET_BIT(PINC, c + 4))  // check to see if PINC is zero at col c
  c4:	83 b3       	in	r24, 0x13	; 19
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <is_pressed+0x4c>
  ca:	95 95       	asr	r25
  cc:	87 95       	ror	r24
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <is_pressed+0x48>
  d2:	80 fd       	sbrc	r24, 0
  d4:	06 c0       	rjmp	.+12     	; 0xe2 <is_pressed+0x60>
	{
		SET_BIT(PORTA, 0);
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	8b bb       	out	0x1b, r24	; 27
		return 1;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	08 95       	ret
	}
	return 0;
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	08 95       	ret

000000e8 <get_key>:
#include "avr.h"
#include "keypad.h"
#include "stdio.h"

int get_key()
{
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
	int i, j;
	for (i = 0; i < 4; ++i)
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	10 e0       	ldi	r17, 0x00	; 0
  f4:	18 c0       	rjmp	.+48     	; 0x126 <get_key+0x3e>
	{
		for (j = 0; j < 4; ++j)
		{
			if (is_pressed(i,j))
  f6:	be 01       	movw	r22, r28
  f8:	c8 01       	movw	r24, r16
  fa:	0e 94 41 00 	call	0x82	; 0x82 <is_pressed>
  fe:	89 2b       	or	r24, r25
 100:	49 f0       	breq	.+18     	; 0x114 <get_key+0x2c>
			{
				return i * 4 + j + 1;
 102:	c8 01       	movw	r24, r16
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	8c 0f       	add	r24, r28
 10e:	9d 1f       	adc	r25, r29
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	0c c0       	rjmp	.+24     	; 0x12c <get_key+0x44>
int get_key()
{
	int i, j;
	for (i = 0; i < 4; ++i)
	{
		for (j = 0; j < 4; ++j)
 114:	21 96       	adiw	r28, 0x01	; 1
 116:	02 c0       	rjmp	.+4      	; 0x11c <get_key+0x34>
 118:	c0 e0       	ldi	r28, 0x00	; 0
 11a:	d0 e0       	ldi	r29, 0x00	; 0
 11c:	c4 30       	cpi	r28, 0x04	; 4
 11e:	d1 05       	cpc	r29, r1
 120:	54 f3       	brlt	.-44     	; 0xf6 <get_key+0xe>
#include "stdio.h"

int get_key()
{
	int i, j;
	for (i = 0; i < 4; ++i)
 122:	0f 5f       	subi	r16, 0xFF	; 255
 124:	1f 4f       	sbci	r17, 0xFF	; 255
 126:	04 30       	cpi	r16, 0x04	; 4
 128:	11 05       	cpc	r17, r1
 12a:	b4 f3       	brlt	.-20     	; 0x118 <get_key+0x30>
			{
				return i * 4 + j + 1;
			}
		}
	}
}
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	08 95       	ret

00000136 <input>:
{
	char c;
	while ((c = pgm_read_byte(s++)) != 0) {
		write(c, 1);
	}
}
 136:	88 23       	and	r24, r24
 138:	21 f0       	breq	.+8      	; 0x142 <input+0xc>
 13a:	88 b3       	in	r24, 0x18	; 24
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	88 bb       	out	0x18, r24	; 24
 140:	03 c0       	rjmp	.+6      	; 0x148 <input+0x12>
 142:	88 b3       	in	r24, 0x18	; 24
 144:	8e 7f       	andi	r24, 0xFE	; 254
 146:	88 bb       	out	0x18, r24	; 24
 148:	88 b3       	in	r24, 0x18	; 24
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	88 bb       	out	0x18, r24	; 24
 14e:	11 ba       	out	0x11, r1	; 17
 150:	80 b3       	in	r24, 0x10	; 16
 152:	88 b3       	in	r24, 0x18	; 24
 154:	84 60       	ori	r24, 0x04	; 4
 156:	88 bb       	out	0x18, r24	; 24
 158:	00 00       	nop
 15a:	00 00       	nop
 15c:	00 00       	nop
 15e:	11 ba       	out	0x11, r1	; 17
 160:	80 b3       	in	r24, 0x10	; 16
 162:	98 b3       	in	r25, 0x18	; 24
 164:	9b 7f       	andi	r25, 0xFB	; 251
 166:	98 bb       	out	0x18, r25	; 24
 168:	08 95       	ret

0000016a <output>:
 16a:	66 23       	and	r22, r22
 16c:	21 f0       	breq	.+8      	; 0x176 <output+0xc>
 16e:	98 b3       	in	r25, 0x18	; 24
 170:	91 60       	ori	r25, 0x01	; 1
 172:	98 bb       	out	0x18, r25	; 24
 174:	03 c0       	rjmp	.+6      	; 0x17c <output+0x12>
 176:	98 b3       	in	r25, 0x18	; 24
 178:	9e 7f       	andi	r25, 0xFE	; 254
 17a:	98 bb       	out	0x18, r25	; 24
 17c:	98 b3       	in	r25, 0x18	; 24
 17e:	9d 7f       	andi	r25, 0xFD	; 253
 180:	98 bb       	out	0x18, r25	; 24
 182:	82 bb       	out	0x12, r24	; 18
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	81 bb       	out	0x11, r24	; 17
 188:	88 b3       	in	r24, 0x18	; 24
 18a:	84 60       	ori	r24, 0x04	; 4
 18c:	88 bb       	out	0x18, r24	; 24
 18e:	00 00       	nop
 190:	00 00       	nop
 192:	00 00       	nop
 194:	88 b3       	in	r24, 0x18	; 24
 196:	8b 7f       	andi	r24, 0xFB	; 251
 198:	88 bb       	out	0x18, r24	; 24
 19a:	08 95       	ret

0000019c <write>:
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	c8 2f       	mov	r28, r24
 1a2:	d6 2f       	mov	r29, r22
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 9b 00 	call	0x136	; 0x136 <input>
 1aa:	88 23       	and	r24, r24
 1ac:	dc f3       	brlt	.-10     	; 0x1a4 <write+0x8>
 1ae:	6d 2f       	mov	r22, r29
 1b0:	8c 2f       	mov	r24, r28
 1b2:	0e 94 b5 00 	call	0x16a	; 0x16a <output>
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <lcd_init>:
 1bc:	87 b3       	in	r24, 0x17	; 23
 1be:	81 60       	ori	r24, 0x01	; 1
 1c0:	87 bb       	out	0x17, r24	; 23
 1c2:	87 b3       	in	r24, 0x17	; 23
 1c4:	82 60       	ori	r24, 0x02	; 2
 1c6:	87 bb       	out	0x17, r24	; 23
 1c8:	87 b3       	in	r24, 0x17	; 23
 1ca:	84 60       	ori	r24, 0x04	; 4
 1cc:	87 bb       	out	0x17, r24	; 23
 1ce:	80 e1       	ldi	r24, 0x10	; 16
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 3d 01 	call	0x27a	; 0x27a <avr_wait>
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	80 e3       	ldi	r24, 0x30	; 48
 1da:	0e 94 b5 00 	call	0x16a	; 0x16a <output>
 1de:	85 e0       	ldi	r24, 0x05	; 5
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 3d 01 	call	0x27a	; 0x27a <avr_wait>
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	80 e3       	ldi	r24, 0x30	; 48
 1ea:	0e 94 b5 00 	call	0x16a	; 0x16a <output>
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 3d 01 	call	0x27a	; 0x27a <avr_wait>
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	8c e3       	ldi	r24, 0x3C	; 60
 1fa:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	8c e0       	ldi	r24, 0x0C	; 12
 202:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	86 e0       	ldi	r24, 0x06	; 6
 20a:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 216:	08 95       	ret

00000218 <lcd_clr>:
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 220:	08 95       	ret

00000222 <lcd_pos>:
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	c6 2f       	mov	r28, r22
 228:	98 e2       	ldi	r25, 0x28	; 40
 22a:	89 9f       	mul	r24, r25
 22c:	c0 0d       	add	r28, r0
 22e:	11 24       	eor	r1, r1
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 238:	05 c0       	rjmp	.+10     	; 0x244 <lcd_pos+0x22>
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	84 e1       	ldi	r24, 0x14	; 20
 23e:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 242:	cd 2f       	mov	r28, r29
 244:	df ef       	ldi	r29, 0xFF	; 255
 246:	dc 0f       	add	r29, r28
 248:	c1 11       	cpse	r28, r1
 24a:	f7 cf       	rjmp	.-18     	; 0x23a <lcd_pos+0x18>
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <lcd_put>:
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	0e 94 ce 00 	call	0x19c	; 0x19c <write>
 258:	08 95       	ret

0000025a <lcd_puts2>:

void
lcd_puts2(const char *s)
{
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	fc 01       	movw	r30, r24
	char c;
	while ((c = *(s++)) != 0) {
 260:	04 c0       	rjmp	.+8      	; 0x26a <lcd_puts2+0x10>
		write(c, 1);
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	0e 94 ce 00 	call	0x19c	; 0x19c <write>

void
lcd_puts2(const char *s)
{
	char c;
	while ((c = *(s++)) != 0) {
 268:	fe 01       	movw	r30, r28
 26a:	ef 01       	movw	r28, r30
 26c:	21 96       	adiw	r28, 0x01	; 1
 26e:	80 81       	ld	r24, Z
 270:	81 11       	cpse	r24, r1
 272:	f7 cf       	rjmp	.-18     	; 0x262 <lcd_puts2+0x8>
		write(c, 1);
	}
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <avr_wait>:
}

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
 27a:	23 e0       	ldi	r18, 0x03	; 3
 27c:	23 bf       	out	0x33, r18	; 51
	while (msec--) {
 27e:	0a c0       	rjmp	.+20     	; 0x294 <avr_wait+0x1a>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.0001);
 280:	83 ef       	ldi	r24, 0xF3	; 243
 282:	82 bf       	out	0x32, r24	; 50
		SET_BIT(TIFR, TOV0);
 284:	88 b7       	in	r24, 0x38	; 56
 286:	81 60       	ori	r24, 0x01	; 1
 288:	88 bf       	out	0x38, r24	; 56
		WDR();
 28a:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
 28c:	08 b6       	in	r0, 0x38	; 56
 28e:	00 fe       	sbrs	r0, 0
 290:	fd cf       	rjmp	.-6      	; 0x28c <avr_wait+0x12>

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
 292:	c9 01       	movw	r24, r18
 294:	9c 01       	movw	r18, r24
 296:	21 50       	subi	r18, 0x01	; 1
 298:	31 09       	sbc	r19, r1
 29a:	89 2b       	or	r24, r25
 29c:	89 f7       	brne	.-30     	; 0x280 <avr_wait+0x6>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.0001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
 29e:	13 be       	out	0x33, r1	; 51
 2a0:	08 95       	ret

000002a2 <main>:
    		  4, 5, 6, 10,
			  7, 8, 9, 10,
		     10, 0, 10, 10};

int main(void)
{
 2a2:	ef 92       	push	r14
 2a4:	ff 92       	push	r15
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
 2b2:	60 97       	sbiw	r28, 0x10	; 16
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	f8 94       	cli
 2b8:	de bf       	out	0x3e, r29	; 62
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	cd bf       	out	0x3d, r28	; 61
	lcd_init();
 2be:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_init>
	lcd_clr();
 2c2:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_clr>
	lcd_pos(0,0);
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 11 01 	call	0x222	; 0x222 <lcd_pos>
	Equation savedEq;
	int attempt = 0;
 2ce:	e1 2c       	mov	r14, r1
 2d0:	f1 2c       	mov	r15, r1
	
    while (1) 
    {
		Equation eq = randomEq(); //continuously randomized
 2d2:	0e 94 c0 01 	call	0x380	; 0x380 <randomEq>
 2d6:	29 87       	std	Y+9, r18	; 0x09
 2d8:	3a 87       	std	Y+10, r19	; 0x0a
 2da:	4b 87       	std	Y+11, r20	; 0x0b
 2dc:	5c 87       	std	Y+12, r21	; 0x0c
 2de:	6d 87       	std	Y+13, r22	; 0x0d
 2e0:	7e 87       	std	Y+14, r23	; 0x0e
 2e2:	8f 87       	std	Y+15, r24	; 0x0f
 2e4:	98 8b       	std	Y+16, r25	; 0x10
		
		if (get_key() == 16) //D to display
 2e6:	0e 94 74 00 	call	0xe8	; 0xe8 <get_key>
 2ea:	40 97       	sbiw	r24, 0x10	; 16
 2ec:	79 f5       	brne	.+94     	; 0x34c <main+0xaa>
		{
			lcd_clr();
 2ee:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_clr>
			if (attempt == 0) //first attempt => new question
 2f2:	e1 14       	cp	r14, r1
 2f4:	f1 04       	cpc	r15, r1
 2f6:	49 f4       	brne	.+18     	; 0x30a <main+0x68>
			{
				savedEq = eq;
 2f8:	88 e0       	ldi	r24, 0x08	; 8
 2fa:	fe 01       	movw	r30, r28
 2fc:	39 96       	adiw	r30, 0x09	; 9
 2fe:	de 01       	movw	r26, r28
 300:	11 96       	adiw	r26, 0x01	; 1
 302:	01 90       	ld	r0, Z+
 304:	0d 92       	st	X+, r0
 306:	8a 95       	dec	r24
 308:	e1 f7       	brne	.-8      	; 0x302 <main+0x60>
			}
			printEq(savedEq); //display equation
 30a:	29 81       	ldd	r18, Y+1	; 0x01
 30c:	3a 81       	ldd	r19, Y+2	; 0x02
 30e:	4b 81       	ldd	r20, Y+3	; 0x03
 310:	5c 81       	ldd	r21, Y+4	; 0x04
 312:	6d 81       	ldd	r22, Y+5	; 0x05
 314:	7e 81       	ldd	r23, Y+6	; 0x06
 316:	8f 81       	ldd	r24, Y+7	; 0x07
 318:	98 85       	ldd	r25, Y+8	; 0x08
 31a:	0e 94 83 02 	call	0x506	; 0x506 <printEq>
			int ans = getAns(); //get user answer
 31e:	0e 94 c3 02 	call	0x586	; 0x586 <getAns>
			int correct = checkAns(savedEq, ans); //check answer
 322:	8c 01       	movw	r16, r24
 324:	29 81       	ldd	r18, Y+1	; 0x01
 326:	3a 81       	ldd	r19, Y+2	; 0x02
 328:	4b 81       	ldd	r20, Y+3	; 0x03
 32a:	5c 81       	ldd	r21, Y+4	; 0x04
 32c:	6d 81       	ldd	r22, Y+5	; 0x05
 32e:	7e 81       	ldd	r23, Y+6	; 0x06
 330:	8f 81       	ldd	r24, Y+7	; 0x07
 332:	98 85       	ldd	r25, Y+8	; 0x08
 334:	0e 94 80 03 	call	0x700	; 0x700 <checkAns>
			if (correct)
 338:	89 2b       	or	r24, r25
 33a:	69 f4       	brne	.+26     	; 0x356 <main+0xb4>
			{
				break;
			} else
			{
				if (attempt == 0)
 33c:	ef 28       	or	r14, r15
 33e:	21 f4       	brne	.+8      	; 0x348 <main+0xa6>
				{
					attempt = 1;
 340:	ee 24       	eor	r14, r14
 342:	e3 94       	inc	r14
 344:	f1 2c       	mov	r15, r1
 346:	02 c0       	rjmp	.+4      	; 0x34c <main+0xaa>
				} else //if attempt == 1
				{
					attempt = 0;
 348:	e1 2c       	mov	r14, r1
 34a:	f1 2c       	mov	r15, r1
				}
			}
	
		}
		
		avr_wait(2500);
 34c:	84 ec       	ldi	r24, 0xC4	; 196
 34e:	99 e0       	ldi	r25, 0x09	; 9
 350:	0e 94 3d 01 	call	0x27a	; 0x27a <avr_wait>
    }
 354:	be cf       	rjmp	.-132    	; 0x2d2 <main+0x30>
	
	avr_wait(20000);
 356:	80 e2       	ldi	r24, 0x20	; 32
 358:	9e e4       	ldi	r25, 0x4E	; 78
 35a:	0e 94 3d 01 	call	0x27a	; 0x27a <avr_wait>
	lcd_clr();
 35e:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_clr>
}
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	60 96       	adiw	r28, 0x10	; 16
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	f8 94       	cli
 36c:	de bf       	out	0x3e, r29	; 62
 36e:	0f be       	out	0x3f, r0	; 63
 370:	cd bf       	out	0x3d, r28	; 61
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	ff 90       	pop	r15
 37c:	ef 90       	pop	r14
 37e:	08 95       	ret

00000380 <randomEq>:
	}
	
	lcd_put(hun + '0');
	lcd_put(ten + '0');
	lcd_put(ans + '0');
}
 380:	af 92       	push	r10
 382:	bf 92       	push	r11
 384:	cf 92       	push	r12
 386:	df 92       	push	r13
 388:	ef 92       	push	r14
 38a:	ff 92       	push	r15
 38c:	0f 93       	push	r16
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
 398:	60 97       	sbiw	r28, 0x10	; 16
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	de bf       	out	0x3e, r29	; 62
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	cd bf       	out	0x3d, r28	; 61
 3a4:	0e 94 35 04 	call	0x86a	; 0x86a <rand>
 3a8:	0a e0       	ldi	r16, 0x0A	; 10
 3aa:	10 e0       	ldi	r17, 0x00	; 0
 3ac:	b8 01       	movw	r22, r16
 3ae:	0e 94 c1 03 	call	0x782	; 0x782 <__divmodhi4>
 3b2:	5c 01       	movw	r10, r24
 3b4:	0e 94 35 04 	call	0x86a	; 0x86a <rand>
 3b8:	b8 01       	movw	r22, r16
 3ba:	0e 94 c1 03 	call	0x782	; 0x782 <__divmodhi4>
 3be:	6c 01       	movw	r12, r24
 3c0:	0e 94 35 04 	call	0x86a	; 0x86a <rand>
 3c4:	b8 01       	movw	r22, r16
 3c6:	0e 94 c1 03 	call	0x782	; 0x782 <__divmodhi4>
 3ca:	7c 01       	movw	r14, r24
 3cc:	0e 94 35 04 	call	0x86a	; 0x86a <rand>
 3d0:	81 70       	andi	r24, 0x01	; 1
 3d2:	90 78       	andi	r25, 0x80	; 128
 3d4:	99 23       	and	r25, r25
 3d6:	24 f4       	brge	.+8      	; 0x3e0 <randomEq+0x60>
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	8e 6f       	ori	r24, 0xFE	; 254
 3dc:	9f 6f       	ori	r25, 0xFF	; 255
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	8c 01       	movw	r16, r24
 3e2:	0e 94 35 04 	call	0x86a	; 0x86a <rand>
 3e6:	81 70       	andi	r24, 0x01	; 1
 3e8:	90 78       	andi	r25, 0x80	; 128
 3ea:	99 23       	and	r25, r25
 3ec:	24 f4       	brge	.+8      	; 0x3f6 <randomEq+0x76>
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	8e 6f       	ori	r24, 0xFE	; 254
 3f2:	9f 6f       	ori	r25, 0xFF	; 255
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	21 e0       	ldi	r18, 0x01	; 1
 3f8:	01 2b       	or	r16, r17
 3fa:	09 f0       	breq	.+2      	; 0x3fe <randomEq+0x7e>
 3fc:	20 e0       	ldi	r18, 0x00	; 0
 3fe:	31 e0       	ldi	r19, 0x01	; 1
 400:	89 2b       	or	r24, r25
 402:	09 f0       	breq	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	ba 86       	std	Y+10, r11	; 0x0a
 408:	a9 86       	std	Y+9, r10	; 0x09
 40a:	dc 86       	std	Y+12, r13	; 0x0c
 40c:	cb 86       	std	Y+11, r12	; 0x0b
 40e:	fe 86       	std	Y+14, r15	; 0x0e
 410:	ed 86       	std	Y+13, r14	; 0x0d
 412:	2f 87       	std	Y+15, r18	; 0x0f
 414:	38 8b       	std	Y+16, r19	; 0x10
 416:	88 e0       	ldi	r24, 0x08	; 8
 418:	fe 01       	movw	r30, r28
 41a:	39 96       	adiw	r30, 0x09	; 9
 41c:	de 01       	movw	r26, r28
 41e:	11 96       	adiw	r26, 0x01	; 1
 420:	01 90       	ld	r0, Z+
 422:	0d 92       	st	X+, r0
 424:	8a 95       	dec	r24
 426:	e1 f7       	brne	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 428:	29 81       	ldd	r18, Y+1	; 0x01
 42a:	3a 81       	ldd	r19, Y+2	; 0x02
 42c:	4b 81       	ldd	r20, Y+3	; 0x03
 42e:	5c 81       	ldd	r21, Y+4	; 0x04
 430:	6d 81       	ldd	r22, Y+5	; 0x05
 432:	7e 81       	ldd	r23, Y+6	; 0x06
 434:	8f 81       	ldd	r24, Y+7	; 0x07
 436:	98 85       	ldd	r25, Y+8	; 0x08
 438:	60 96       	adiw	r28, 0x10	; 16
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	f8 94       	cli
 43e:	de bf       	out	0x3e, r29	; 62
 440:	0f be       	out	0x3f, r0	; 63
 442:	cd bf       	out	0x3d, r28	; 61
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	1f 91       	pop	r17
 44a:	0f 91       	pop	r16
 44c:	ff 90       	pop	r15
 44e:	ef 90       	pop	r14
 450:	df 90       	pop	r13
 452:	cf 90       	pop	r12
 454:	bf 90       	pop	r11
 456:	af 90       	pop	r10
 458:	08 95       	ret

0000045a <calcEq>:
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	cd b7       	in	r28, 0x3d	; 61
 460:	de b7       	in	r29, 0x3e	; 62
 462:	28 97       	sbiw	r28, 0x08	; 8
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	f8 94       	cli
 468:	de bf       	out	0x3e, r29	; 62
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	cd bf       	out	0x3d, r28	; 61
 46e:	29 83       	std	Y+1, r18	; 0x01
 470:	3a 83       	std	Y+2, r19	; 0x02
 472:	4b 83       	std	Y+3, r20	; 0x03
 474:	5c 83       	std	Y+4, r21	; 0x04
 476:	6d 83       	std	Y+5, r22	; 0x05
 478:	7e 83       	std	Y+6, r23	; 0x06
 47a:	98 87       	std	Y+8, r25	; 0x08
 47c:	81 30       	cpi	r24, 0x01	; 1
 47e:	e9 f4       	brne	.+58     	; 0x4ba <calcEq+0x60>
 480:	29 81       	ldd	r18, Y+1	; 0x01
 482:	3a 81       	ldd	r19, Y+2	; 0x02
 484:	8b 81       	ldd	r24, Y+3	; 0x03
 486:	9c 81       	ldd	r25, Y+4	; 0x04
 488:	28 9f       	mul	r18, r24
 48a:	a0 01       	movw	r20, r0
 48c:	29 9f       	mul	r18, r25
 48e:	50 0d       	add	r21, r0
 490:	38 9f       	mul	r19, r24
 492:	50 0d       	add	r21, r0
 494:	11 24       	eor	r1, r1
 496:	88 85       	ldd	r24, Y+8	; 0x08
 498:	81 30       	cpi	r24, 0x01	; 1
 49a:	51 f4       	brne	.+20     	; 0x4b0 <calcEq+0x56>
 49c:	2d 81       	ldd	r18, Y+5	; 0x05
 49e:	3e 81       	ldd	r19, Y+6	; 0x06
 4a0:	42 9f       	mul	r20, r18
 4a2:	c0 01       	movw	r24, r0
 4a4:	43 9f       	mul	r20, r19
 4a6:	90 0d       	add	r25, r0
 4a8:	52 9f       	mul	r21, r18
 4aa:	90 0d       	add	r25, r0
 4ac:	11 24       	eor	r1, r1
 4ae:	22 c0       	rjmp	.+68     	; 0x4f4 <calcEq+0x9a>
 4b0:	8d 81       	ldd	r24, Y+5	; 0x05
 4b2:	9e 81       	ldd	r25, Y+6	; 0x06
 4b4:	84 0f       	add	r24, r20
 4b6:	95 1f       	adc	r25, r21
 4b8:	1d c0       	rjmp	.+58     	; 0x4f4 <calcEq+0x9a>
 4ba:	88 85       	ldd	r24, Y+8	; 0x08
 4bc:	81 30       	cpi	r24, 0x01	; 1
 4be:	81 f4       	brne	.+32     	; 0x4e0 <calcEq+0x86>
 4c0:	4b 81       	ldd	r20, Y+3	; 0x03
 4c2:	5c 81       	ldd	r21, Y+4	; 0x04
 4c4:	8d 81       	ldd	r24, Y+5	; 0x05
 4c6:	9e 81       	ldd	r25, Y+6	; 0x06
 4c8:	48 9f       	mul	r20, r24
 4ca:	90 01       	movw	r18, r0
 4cc:	49 9f       	mul	r20, r25
 4ce:	30 0d       	add	r19, r0
 4d0:	58 9f       	mul	r21, r24
 4d2:	30 0d       	add	r19, r0
 4d4:	11 24       	eor	r1, r1
 4d6:	89 81       	ldd	r24, Y+1	; 0x01
 4d8:	9a 81       	ldd	r25, Y+2	; 0x02
 4da:	82 0f       	add	r24, r18
 4dc:	93 1f       	adc	r25, r19
 4de:	0a c0       	rjmp	.+20     	; 0x4f4 <calcEq+0x9a>
 4e0:	29 81       	ldd	r18, Y+1	; 0x01
 4e2:	3a 81       	ldd	r19, Y+2	; 0x02
 4e4:	8b 81       	ldd	r24, Y+3	; 0x03
 4e6:	9c 81       	ldd	r25, Y+4	; 0x04
 4e8:	82 0f       	add	r24, r18
 4ea:	93 1f       	adc	r25, r19
 4ec:	2d 81       	ldd	r18, Y+5	; 0x05
 4ee:	3e 81       	ldd	r19, Y+6	; 0x06
 4f0:	82 0f       	add	r24, r18
 4f2:	93 1f       	adc	r25, r19
 4f4:	28 96       	adiw	r28, 0x08	; 8
 4f6:	0f b6       	in	r0, 0x3f	; 63
 4f8:	f8 94       	cli
 4fa:	de bf       	out	0x3e, r29	; 62
 4fc:	0f be       	out	0x3f, r0	; 63
 4fe:	cd bf       	out	0x3d, r28	; 61
 500:	df 91       	pop	r29
 502:	cf 91       	pop	r28
 504:	08 95       	ret

00000506 <printEq>:
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
 50e:	28 97       	sbiw	r28, 0x08	; 8
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	f8 94       	cli
 514:	de bf       	out	0x3e, r29	; 62
 516:	0f be       	out	0x3f, r0	; 63
 518:	cd bf       	out	0x3d, r28	; 61
 51a:	29 83       	std	Y+1, r18	; 0x01
 51c:	3a 83       	std	Y+2, r19	; 0x02
 51e:	4b 83       	std	Y+3, r20	; 0x03
 520:	5c 83       	std	Y+4, r21	; 0x04
 522:	6d 83       	std	Y+5, r22	; 0x05
 524:	7e 83       	std	Y+6, r23	; 0x06
 526:	8f 83       	std	Y+7, r24	; 0x07
 528:	98 87       	std	Y+8, r25	; 0x08
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 11 01 	call	0x222	; 0x222 <lcd_pos>
 536:	89 81       	ldd	r24, Y+1	; 0x01
 538:	9a 81       	ldd	r25, Y+2	; 0x02
 53a:	c0 96       	adiw	r24, 0x30	; 48
 53c:	0e 94 29 01 	call	0x252	; 0x252 <lcd_put>
 540:	ef 81       	ldd	r30, Y+7	; 0x07
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	e2 56       	subi	r30, 0x62	; 98
 546:	ff 4f       	sbci	r31, 0xFF	; 255
 548:	80 81       	ld	r24, Z
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 29 01 	call	0x252	; 0x252 <lcd_put>
 550:	8b 81       	ldd	r24, Y+3	; 0x03
 552:	9c 81       	ldd	r25, Y+4	; 0x04
 554:	c0 96       	adiw	r24, 0x30	; 48
 556:	0e 94 29 01 	call	0x252	; 0x252 <lcd_put>
 55a:	e8 85       	ldd	r30, Y+8	; 0x08
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	e2 56       	subi	r30, 0x62	; 98
 560:	ff 4f       	sbci	r31, 0xFF	; 255
 562:	80 81       	ld	r24, Z
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 29 01 	call	0x252	; 0x252 <lcd_put>
 56a:	8d 81       	ldd	r24, Y+5	; 0x05
 56c:	9e 81       	ldd	r25, Y+6	; 0x06
 56e:	c0 96       	adiw	r24, 0x30	; 48
 570:	0e 94 29 01 	call	0x252	; 0x252 <lcd_put>
 574:	28 96       	adiw	r28, 0x08	; 8
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	f8 94       	cli
 57a:	de bf       	out	0x3e, r29	; 62
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	cd bf       	out	0x3d, r28	; 61
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	08 95       	ret

00000586 <getAns>:

int getAns(void)
{
 586:	ef 92       	push	r14
 588:	ff 92       	push	r15
 58a:	0f 93       	push	r16
 58c:	1f 93       	push	r17
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	cd b7       	in	r28, 0x3d	; 61
 594:	de b7       	in	r29, 0x3e	; 62
 596:	ac 97       	sbiw	r28, 0x2c	; 44
 598:	0f b6       	in	r0, 0x3f	; 63
 59a:	f8 94       	cli
 59c:	de bf       	out	0x3e, r29	; 62
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	cd bf       	out	0x3d, r28	; 61
	int keys[] = {1, 2, 3, 10,
 5a2:	80 e2       	ldi	r24, 0x20	; 32
 5a4:	e4 e6       	ldi	r30, 0x64	; 100
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	de 01       	movw	r26, r28
 5aa:	11 96       	adiw	r26, 0x01	; 1
 5ac:	01 90       	ld	r0, Z+
 5ae:	0d 92       	st	X+, r0
 5b0:	8a 95       	dec	r24
 5b2:	e1 f7       	brne	.-8      	; 0x5ac <getAns+0x26>
				  4, 5, 6, 10,
				  7, 8, 9, 10,
				 10, 0, 10, 10};
	
	lcd_pos(1,0);
 5b4:	60 e0       	ldi	r22, 0x00	; 0
 5b6:	70 e0       	ldi	r23, 0x00	; 0
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	0e 94 11 01 	call	0x222	; 0x222 <lcd_pos>
	char buf[] = "Ans: ";
 5c0:	86 e0       	ldi	r24, 0x06	; 6
 5c2:	e4 e8       	ldi	r30, 0x84	; 132
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	de 01       	movw	r26, r28
 5c8:	91 96       	adiw	r26, 0x21	; 33
 5ca:	01 90       	ld	r0, Z+
 5cc:	0d 92       	st	X+, r0
 5ce:	8a 95       	dec	r24
 5d0:	e1 f7       	brne	.-8      	; 0x5ca <getAns+0x44>
	lcd_puts2(buf);
 5d2:	ce 01       	movw	r24, r28
 5d4:	81 96       	adiw	r24, 0x21	; 33
 5d6:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_puts2>
	
	int index = 0;
	int ans[] = {0,0,0};
 5da:	18 a6       	std	Y+40, r1	; 0x28
 5dc:	1f a2       	std	Y+39, r1	; 0x27
 5de:	1a a6       	std	Y+42, r1	; 0x2a
 5e0:	19 a6       	std	Y+41, r1	; 0x29
 5e2:	1c a6       	std	Y+44, r1	; 0x2c
 5e4:	1b a6       	std	Y+43, r1	; 0x2b
	
	lcd_pos(1,0);
	char buf[] = "Ans: ";
	lcd_puts2(buf);
	
	int index = 0;
 5e6:	00 e0       	ldi	r16, 0x00	; 0
 5e8:	10 e0       	ldi	r17, 0x00	; 0
	int ans[] = {0,0,0};
	
	while(1)
	{
		if (is_pressed(3,3) && index != 0) { break ; } //press D for done
 5ea:	63 e0       	ldi	r22, 0x03	; 3
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	83 e0       	ldi	r24, 0x03	; 3
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	0e 94 41 00 	call	0x82	; 0x82 <is_pressed>
 5f6:	89 2b       	or	r24, r25
 5f8:	19 f0       	breq	.+6      	; 0x600 <getAns+0x7a>
 5fa:	01 15       	cp	r16, r1
 5fc:	11 05       	cpc	r17, r1
 5fe:	c1 f5       	brne	.+112    	; 0x670 <getAns+0xea>
			
		int k = get_key();
 600:	0e 94 74 00 	call	0xe8	; 0xe8 <get_key>
		if (k > 0 && k <= 16 && k%4 && k!=13 && k!=15 && index < 3) //key press only numbers up to 3 times
 604:	9c 01       	movw	r18, r24
 606:	21 50       	subi	r18, 0x01	; 1
 608:	31 09       	sbc	r19, r1
 60a:	20 31       	cpi	r18, 0x10	; 16
 60c:	31 05       	cpc	r19, r1
 60e:	58 f5       	brcc	.+86     	; 0x666 <getAns+0xe0>
 610:	9c 01       	movw	r18, r24
 612:	23 70       	andi	r18, 0x03	; 3
 614:	33 27       	eor	r19, r19
 616:	23 2b       	or	r18, r19
 618:	31 f1       	breq	.+76     	; 0x666 <getAns+0xe0>
 61a:	8d 30       	cpi	r24, 0x0D	; 13
 61c:	91 05       	cpc	r25, r1
 61e:	19 f1       	breq	.+70     	; 0x666 <getAns+0xe0>
 620:	8f 30       	cpi	r24, 0x0F	; 15
 622:	91 05       	cpc	r25, r1
 624:	01 f1       	breq	.+64     	; 0x666 <getAns+0xe0>
 626:	03 30       	cpi	r16, 0x03	; 3
 628:	11 05       	cpc	r17, r1
 62a:	ec f4       	brge	.+58     	; 0x666 <getAns+0xe0>
		{
			int num = keys[k - 1];
 62c:	fc 01       	movw	r30, r24
 62e:	31 97       	sbiw	r30, 0x01	; 1
 630:	ee 0f       	add	r30, r30
 632:	ff 1f       	adc	r31, r31
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	8c 0f       	add	r24, r28
 63a:	9d 1f       	adc	r25, r29
 63c:	e8 0f       	add	r30, r24
 63e:	f9 1f       	adc	r31, r25
 640:	e0 80       	ld	r14, Z
 642:	f1 80       	ldd	r15, Z+1	; 0x01
			lcd_put(num + '0');
 644:	c7 01       	movw	r24, r14
 646:	c0 96       	adiw	r24, 0x30	; 48
 648:	0e 94 29 01 	call	0x252	; 0x252 <lcd_put>
			ans[index] = num;
 64c:	f8 01       	movw	r30, r16
 64e:	ee 0f       	add	r30, r30
 650:	ff 1f       	adc	r31, r31
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	8c 0f       	add	r24, r28
 658:	9d 1f       	adc	r25, r29
 65a:	e8 0f       	add	r30, r24
 65c:	f9 1f       	adc	r31, r25
 65e:	f7 a2       	std	Z+39, r15	; 0x27
 660:	e6 a2       	std	Z+38, r14	; 0x26
			index++;
 662:	0f 5f       	subi	r16, 0xFF	; 255
 664:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		avr_wait(3000);
 666:	88 eb       	ldi	r24, 0xB8	; 184
 668:	9b e0       	ldi	r25, 0x0B	; 11
 66a:	0e 94 3d 01 	call	0x27a	; 0x27a <avr_wait>
	}
 66e:	bd cf       	rjmp	.-134    	; 0x5ea <getAns+0x64>
	
	lcd_clr();
 670:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_clr>
	
	if (index == 1)
 674:	01 30       	cpi	r16, 0x01	; 1
 676:	11 05       	cpc	r17, r1
 678:	19 f4       	brne	.+6      	; 0x680 <getAns+0xfa>
	{
		return ans[0];
 67a:	8f a1       	ldd	r24, Y+39	; 0x27
 67c:	98 a5       	ldd	r25, Y+40	; 0x28
 67e:	33 c0       	rjmp	.+102    	; 0x6e6 <getAns+0x160>
	} else if (index == 2)
 680:	02 30       	cpi	r16, 0x02	; 2
 682:	11 05       	cpc	r17, r1
 684:	99 f4       	brne	.+38     	; 0x6ac <getAns+0x126>
	{
		return ans[0] * 10 + ans[1];
 686:	4f a1       	ldd	r20, Y+39	; 0x27
 688:	58 a5       	ldd	r21, Y+40	; 0x28
 68a:	ca 01       	movw	r24, r20
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	44 0f       	add	r20, r20
 692:	55 1f       	adc	r21, r21
 694:	44 0f       	add	r20, r20
 696:	55 1f       	adc	r21, r21
 698:	44 0f       	add	r20, r20
 69a:	55 1f       	adc	r21, r21
 69c:	9c 01       	movw	r18, r24
 69e:	24 0f       	add	r18, r20
 6a0:	35 1f       	adc	r19, r21
 6a2:	89 a5       	ldd	r24, Y+41	; 0x29
 6a4:	9a a5       	ldd	r25, Y+42	; 0x2a
 6a6:	82 0f       	add	r24, r18
 6a8:	93 1f       	adc	r25, r19
 6aa:	1d c0       	rjmp	.+58     	; 0x6e6 <getAns+0x160>
	} else //index == 3
	{
		return ans[0] * 100 + ans[1] * 10 + ans[2];
 6ac:	2f a1       	ldd	r18, Y+39	; 0x27
 6ae:	38 a5       	ldd	r19, Y+40	; 0x28
 6b0:	44 e6       	ldi	r20, 0x64	; 100
 6b2:	42 9f       	mul	r20, r18
 6b4:	c0 01       	movw	r24, r0
 6b6:	43 9f       	mul	r20, r19
 6b8:	90 0d       	add	r25, r0
 6ba:	11 24       	eor	r1, r1
 6bc:	29 a5       	ldd	r18, Y+41	; 0x29
 6be:	3a a5       	ldd	r19, Y+42	; 0x2a
 6c0:	b9 01       	movw	r22, r18
 6c2:	66 0f       	add	r22, r22
 6c4:	77 1f       	adc	r23, r23
 6c6:	a9 01       	movw	r20, r18
 6c8:	44 0f       	add	r20, r20
 6ca:	55 1f       	adc	r21, r21
 6cc:	44 0f       	add	r20, r20
 6ce:	55 1f       	adc	r21, r21
 6d0:	44 0f       	add	r20, r20
 6d2:	55 1f       	adc	r21, r21
 6d4:	9b 01       	movw	r18, r22
 6d6:	24 0f       	add	r18, r20
 6d8:	35 1f       	adc	r19, r21
 6da:	28 0f       	add	r18, r24
 6dc:	39 1f       	adc	r19, r25
 6de:	8b a5       	ldd	r24, Y+43	; 0x2b
 6e0:	9c a5       	ldd	r25, Y+44	; 0x2c
 6e2:	82 0f       	add	r24, r18
 6e4:	93 1f       	adc	r25, r19
	}
}
 6e6:	ac 96       	adiw	r28, 0x2c	; 44
 6e8:	0f b6       	in	r0, 0x3f	; 63
 6ea:	f8 94       	cli
 6ec:	de bf       	out	0x3e, r29	; 62
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	cd bf       	out	0x3d, r28	; 61
 6f2:	df 91       	pop	r29
 6f4:	cf 91       	pop	r28
 6f6:	1f 91       	pop	r17
 6f8:	0f 91       	pop	r16
 6fa:	ff 90       	pop	r15
 6fc:	ef 90       	pop	r14
 6fe:	08 95       	ret

00000700 <checkAns>:

int checkAns(Equation eq, int ans)
{
 700:	0f 93       	push	r16
 702:	1f 93       	push	r17
 704:	cf 93       	push	r28
 706:	df 93       	push	r29
 708:	cd b7       	in	r28, 0x3d	; 61
 70a:	de b7       	in	r29, 0x3e	; 62
 70c:	28 97       	sbiw	r28, 0x08	; 8
 70e:	0f b6       	in	r0, 0x3f	; 63
 710:	f8 94       	cli
 712:	de bf       	out	0x3e, r29	; 62
 714:	0f be       	out	0x3f, r0	; 63
 716:	cd bf       	out	0x3d, r28	; 61
 718:	29 83       	std	Y+1, r18	; 0x01
 71a:	3a 83       	std	Y+2, r19	; 0x02
 71c:	4b 83       	std	Y+3, r20	; 0x03
 71e:	5c 83       	std	Y+4, r21	; 0x04
 720:	6d 83       	std	Y+5, r22	; 0x05
 722:	7e 83       	std	Y+6, r23	; 0x06
 724:	8f 83       	std	Y+7, r24	; 0x07
 726:	98 87       	std	Y+8, r25	; 0x08
	lcd_clr();
 728:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_clr>
	lcd_pos(0,0);
 72c:	60 e0       	ldi	r22, 0x00	; 0
 72e:	70 e0       	ldi	r23, 0x00	; 0
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	0e 94 11 01 	call	0x222	; 0x222 <lcd_pos>
	int right = calcEq(eq);
 738:	29 81       	ldd	r18, Y+1	; 0x01
 73a:	3a 81       	ldd	r19, Y+2	; 0x02
 73c:	4b 81       	ldd	r20, Y+3	; 0x03
 73e:	5c 81       	ldd	r21, Y+4	; 0x04
 740:	6d 81       	ldd	r22, Y+5	; 0x05
 742:	7e 81       	ldd	r23, Y+6	; 0x06
 744:	8f 81       	ldd	r24, Y+7	; 0x07
 746:	98 85       	ldd	r25, Y+8	; 0x08
 748:	0e 94 2d 02 	call	0x45a	; 0x45a <calcEq>
	if (right == ans)
 74c:	80 17       	cp	r24, r16
 74e:	91 07       	cpc	r25, r17
 750:	39 f4       	brne	.+14     	; 0x760 <checkAns+0x60>
	{
		lcd_puts2("Correct!");
 752:	8a e8       	ldi	r24, 0x8A	; 138
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_puts2>
		return 1;
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	06 c0       	rjmp	.+12     	; 0x76c <checkAns+0x6c>
	}
	else
	{
		lcd_puts2("Try again.");
 760:	83 e9       	ldi	r24, 0x93	; 147
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_puts2>
		return 0;
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	90 e0       	ldi	r25, 0x00	; 0
	}
 76c:	28 96       	adiw	r28, 0x08	; 8
 76e:	0f b6       	in	r0, 0x3f	; 63
 770:	f8 94       	cli
 772:	de bf       	out	0x3e, r29	; 62
 774:	0f be       	out	0x3f, r0	; 63
 776:	cd bf       	out	0x3d, r28	; 61
 778:	df 91       	pop	r29
 77a:	cf 91       	pop	r28
 77c:	1f 91       	pop	r17
 77e:	0f 91       	pop	r16
 780:	08 95       	ret

00000782 <__divmodhi4>:
 782:	97 fb       	bst	r25, 7
 784:	07 2e       	mov	r0, r23
 786:	16 f4       	brtc	.+4      	; 0x78c <__divmodhi4+0xa>
 788:	00 94       	com	r0
 78a:	07 d0       	rcall	.+14     	; 0x79a <__divmodhi4_neg1>
 78c:	77 fd       	sbrc	r23, 7
 78e:	09 d0       	rcall	.+18     	; 0x7a2 <__divmodhi4_neg2>
 790:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__udivmodhi4>
 794:	07 fc       	sbrc	r0, 7
 796:	05 d0       	rcall	.+10     	; 0x7a2 <__divmodhi4_neg2>
 798:	3e f4       	brtc	.+14     	; 0x7a8 <__divmodhi4_exit>

0000079a <__divmodhi4_neg1>:
 79a:	90 95       	com	r25
 79c:	81 95       	neg	r24
 79e:	9f 4f       	sbci	r25, 0xFF	; 255
 7a0:	08 95       	ret

000007a2 <__divmodhi4_neg2>:
 7a2:	70 95       	com	r23
 7a4:	61 95       	neg	r22
 7a6:	7f 4f       	sbci	r23, 0xFF	; 255

000007a8 <__divmodhi4_exit>:
 7a8:	08 95       	ret

000007aa <__udivmodhi4>:
 7aa:	aa 1b       	sub	r26, r26
 7ac:	bb 1b       	sub	r27, r27
 7ae:	51 e1       	ldi	r21, 0x11	; 17
 7b0:	07 c0       	rjmp	.+14     	; 0x7c0 <__udivmodhi4_ep>

000007b2 <__udivmodhi4_loop>:
 7b2:	aa 1f       	adc	r26, r26
 7b4:	bb 1f       	adc	r27, r27
 7b6:	a6 17       	cp	r26, r22
 7b8:	b7 07       	cpc	r27, r23
 7ba:	10 f0       	brcs	.+4      	; 0x7c0 <__udivmodhi4_ep>
 7bc:	a6 1b       	sub	r26, r22
 7be:	b7 0b       	sbc	r27, r23

000007c0 <__udivmodhi4_ep>:
 7c0:	88 1f       	adc	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	5a 95       	dec	r21
 7c6:	a9 f7       	brne	.-22     	; 0x7b2 <__udivmodhi4_loop>
 7c8:	80 95       	com	r24
 7ca:	90 95       	com	r25
 7cc:	bc 01       	movw	r22, r24
 7ce:	cd 01       	movw	r24, r26
 7d0:	08 95       	ret

000007d2 <do_rand>:
 7d2:	8f 92       	push	r8
 7d4:	9f 92       	push	r9
 7d6:	af 92       	push	r10
 7d8:	bf 92       	push	r11
 7da:	cf 92       	push	r12
 7dc:	df 92       	push	r13
 7de:	ef 92       	push	r14
 7e0:	ff 92       	push	r15
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
 7e6:	ec 01       	movw	r28, r24
 7e8:	68 81       	ld	r22, Y
 7ea:	79 81       	ldd	r23, Y+1	; 0x01
 7ec:	8a 81       	ldd	r24, Y+2	; 0x02
 7ee:	9b 81       	ldd	r25, Y+3	; 0x03
 7f0:	61 15       	cp	r22, r1
 7f2:	71 05       	cpc	r23, r1
 7f4:	81 05       	cpc	r24, r1
 7f6:	91 05       	cpc	r25, r1
 7f8:	21 f4       	brne	.+8      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7fa:	64 e2       	ldi	r22, 0x24	; 36
 7fc:	79 ed       	ldi	r23, 0xD9	; 217
 7fe:	8b e5       	ldi	r24, 0x5B	; 91
 800:	97 e0       	ldi	r25, 0x07	; 7
 802:	2d e1       	ldi	r18, 0x1D	; 29
 804:	33 ef       	ldi	r19, 0xF3	; 243
 806:	41 e0       	ldi	r20, 0x01	; 1
 808:	50 e0       	ldi	r21, 0x00	; 0
 80a:	0e 94 45 04 	call	0x88a	; 0x88a <__divmodsi4>
 80e:	49 01       	movw	r8, r18
 810:	5a 01       	movw	r10, r20
 812:	9b 01       	movw	r18, r22
 814:	ac 01       	movw	r20, r24
 816:	a7 ea       	ldi	r26, 0xA7	; 167
 818:	b1 e4       	ldi	r27, 0x41	; 65
 81a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__muluhisi3>
 81e:	6b 01       	movw	r12, r22
 820:	7c 01       	movw	r14, r24
 822:	ac ee       	ldi	r26, 0xEC	; 236
 824:	b4 ef       	ldi	r27, 0xF4	; 244
 826:	a5 01       	movw	r20, r10
 828:	94 01       	movw	r18, r8
 82a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__mulohisi3>
 82e:	dc 01       	movw	r26, r24
 830:	cb 01       	movw	r24, r22
 832:	8c 0d       	add	r24, r12
 834:	9d 1d       	adc	r25, r13
 836:	ae 1d       	adc	r26, r14
 838:	bf 1d       	adc	r27, r15
 83a:	b7 ff       	sbrs	r27, 7
 83c:	03 c0       	rjmp	.+6      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 83e:	01 97       	sbiw	r24, 0x01	; 1
 840:	a1 09       	sbc	r26, r1
 842:	b0 48       	sbci	r27, 0x80	; 128
 844:	88 83       	st	Y, r24
 846:	99 83       	std	Y+1, r25	; 0x01
 848:	aa 83       	std	Y+2, r26	; 0x02
 84a:	bb 83       	std	Y+3, r27	; 0x03
 84c:	9f 77       	andi	r25, 0x7F	; 127
 84e:	df 91       	pop	r29
 850:	cf 91       	pop	r28
 852:	ff 90       	pop	r15
 854:	ef 90       	pop	r14
 856:	df 90       	pop	r13
 858:	cf 90       	pop	r12
 85a:	bf 90       	pop	r11
 85c:	af 90       	pop	r10
 85e:	9f 90       	pop	r9
 860:	8f 90       	pop	r8
 862:	08 95       	ret

00000864 <rand_r>:
 864:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <do_rand>
 868:	08 95       	ret

0000086a <rand>:
 86a:	80 e6       	ldi	r24, 0x60	; 96
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <do_rand>
 872:	08 95       	ret

00000874 <srand>:
 874:	a0 e0       	ldi	r26, 0x00	; 0
 876:	b0 e0       	ldi	r27, 0x00	; 0
 878:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 87c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 880:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 884:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 888:	08 95       	ret

0000088a <__divmodsi4>:
 88a:	05 2e       	mov	r0, r21
 88c:	97 fb       	bst	r25, 7
 88e:	1e f4       	brtc	.+6      	; 0x896 <__divmodsi4+0xc>
 890:	00 94       	com	r0
 892:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__negsi2>
 896:	57 fd       	sbrc	r21, 7
 898:	07 d0       	rcall	.+14     	; 0x8a8 <__divmodsi4_neg2>
 89a:	0e 94 77 04 	call	0x8ee	; 0x8ee <__udivmodsi4>
 89e:	07 fc       	sbrc	r0, 7
 8a0:	03 d0       	rcall	.+6      	; 0x8a8 <__divmodsi4_neg2>
 8a2:	4e f4       	brtc	.+18     	; 0x8b6 <__divmodsi4_exit>
 8a4:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__negsi2>

000008a8 <__divmodsi4_neg2>:
 8a8:	50 95       	com	r21
 8aa:	40 95       	com	r20
 8ac:	30 95       	com	r19
 8ae:	21 95       	neg	r18
 8b0:	3f 4f       	sbci	r19, 0xFF	; 255
 8b2:	4f 4f       	sbci	r20, 0xFF	; 255
 8b4:	5f 4f       	sbci	r21, 0xFF	; 255

000008b6 <__divmodsi4_exit>:
 8b6:	08 95       	ret

000008b8 <__negsi2>:
 8b8:	90 95       	com	r25
 8ba:	80 95       	com	r24
 8bc:	70 95       	com	r23
 8be:	61 95       	neg	r22
 8c0:	7f 4f       	sbci	r23, 0xFF	; 255
 8c2:	8f 4f       	sbci	r24, 0xFF	; 255
 8c4:	9f 4f       	sbci	r25, 0xFF	; 255
 8c6:	08 95       	ret

000008c8 <__muluhisi3>:
 8c8:	0e 94 99 04 	call	0x932	; 0x932 <__umulhisi3>
 8cc:	a5 9f       	mul	r26, r21
 8ce:	90 0d       	add	r25, r0
 8d0:	b4 9f       	mul	r27, r20
 8d2:	90 0d       	add	r25, r0
 8d4:	a4 9f       	mul	r26, r20
 8d6:	80 0d       	add	r24, r0
 8d8:	91 1d       	adc	r25, r1
 8da:	11 24       	eor	r1, r1
 8dc:	08 95       	ret

000008de <__mulshisi3>:
 8de:	b7 ff       	sbrs	r27, 7
 8e0:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__muluhisi3>

000008e4 <__mulohisi3>:
 8e4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__muluhisi3>
 8e8:	82 1b       	sub	r24, r18
 8ea:	93 0b       	sbc	r25, r19
 8ec:	08 95       	ret

000008ee <__udivmodsi4>:
 8ee:	a1 e2       	ldi	r26, 0x21	; 33
 8f0:	1a 2e       	mov	r1, r26
 8f2:	aa 1b       	sub	r26, r26
 8f4:	bb 1b       	sub	r27, r27
 8f6:	fd 01       	movw	r30, r26
 8f8:	0d c0       	rjmp	.+26     	; 0x914 <__udivmodsi4_ep>

000008fa <__udivmodsi4_loop>:
 8fa:	aa 1f       	adc	r26, r26
 8fc:	bb 1f       	adc	r27, r27
 8fe:	ee 1f       	adc	r30, r30
 900:	ff 1f       	adc	r31, r31
 902:	a2 17       	cp	r26, r18
 904:	b3 07       	cpc	r27, r19
 906:	e4 07       	cpc	r30, r20
 908:	f5 07       	cpc	r31, r21
 90a:	20 f0       	brcs	.+8      	; 0x914 <__udivmodsi4_ep>
 90c:	a2 1b       	sub	r26, r18
 90e:	b3 0b       	sbc	r27, r19
 910:	e4 0b       	sbc	r30, r20
 912:	f5 0b       	sbc	r31, r21

00000914 <__udivmodsi4_ep>:
 914:	66 1f       	adc	r22, r22
 916:	77 1f       	adc	r23, r23
 918:	88 1f       	adc	r24, r24
 91a:	99 1f       	adc	r25, r25
 91c:	1a 94       	dec	r1
 91e:	69 f7       	brne	.-38     	; 0x8fa <__udivmodsi4_loop>
 920:	60 95       	com	r22
 922:	70 95       	com	r23
 924:	80 95       	com	r24
 926:	90 95       	com	r25
 928:	9b 01       	movw	r18, r22
 92a:	ac 01       	movw	r20, r24
 92c:	bd 01       	movw	r22, r26
 92e:	cf 01       	movw	r24, r30
 930:	08 95       	ret

00000932 <__umulhisi3>:
 932:	a2 9f       	mul	r26, r18
 934:	b0 01       	movw	r22, r0
 936:	b3 9f       	mul	r27, r19
 938:	c0 01       	movw	r24, r0
 93a:	a3 9f       	mul	r26, r19
 93c:	70 0d       	add	r23, r0
 93e:	81 1d       	adc	r24, r1
 940:	11 24       	eor	r1, r1
 942:	91 1d       	adc	r25, r1
 944:	b2 9f       	mul	r27, r18
 946:	70 0d       	add	r23, r0
 948:	81 1d       	adc	r24, r1
 94a:	11 24       	eor	r1, r1
 94c:	91 1d       	adc	r25, r1
 94e:	08 95       	ret

00000950 <_exit>:
 950:	f8 94       	cli

00000952 <__stop_program>:
 952:	ff cf       	rjmp	.-2      	; 0x952 <__stop_program>
