
project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006fe  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063b  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000350  00000000  00000000  00000f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  000012e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031a  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000127  00000000  00000000  00001686  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000017ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 90 00 	call	0x120	; 0x120 <main>
  64:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <is_pressed>:
	}
}

int is_pressed(int r, int c)
{
	DDRC = 0;
  6c:	14 ba       	out	0x14, r1	; 20
	PORTC = 0;
  6e:	15 ba       	out	0x15, r1	; 21
	//set r to 0
	CLR_BIT(PORTC, r);
  70:	95 b3       	in	r25, 0x15	; 21
  72:	21 e0       	ldi	r18, 0x01	; 1
  74:	30 e0       	ldi	r19, 0x00	; 0
  76:	a9 01       	movw	r20, r18
  78:	02 c0       	rjmp	.+4      	; 0x7e <is_pressed+0x12>
  7a:	44 0f       	add	r20, r20
  7c:	55 1f       	adc	r21, r21
  7e:	8a 95       	dec	r24
  80:	e2 f7       	brpl	.-8      	; 0x7a <is_pressed+0xe>
  82:	40 95       	com	r20
  84:	94 23       	and	r25, r20
  86:	95 bb       	out	0x15, r25	; 21
	//set c to w1
	SET_BIT(PORTC, c);
  88:	85 b3       	in	r24, 0x15	; 21
  8a:	02 c0       	rjmp	.+4      	; 0x90 <is_pressed+0x24>
  8c:	22 0f       	add	r18, r18
  8e:	33 1f       	adc	r19, r19
  90:	6a 95       	dec	r22
  92:	e2 f7       	brpl	.-8      	; 0x8c <is_pressed+0x20>
  94:	28 2b       	or	r18, r24
  96:	25 bb       	out	0x15, r18	; 21
	if (!PORTC)
  98:	85 b3       	in	r24, 0x15	; 21
  9a:	81 11       	cpse	r24, r1
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <is_pressed+0x38>
	{
		return 1;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	08 95       	ret
	}
	return 0;
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	08 95       	ret

000000aa <get_key>:

#include "avr.h"
#include "keypad.h"

int get_key()
{
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
	int i, j;
	for (i = 0; i < 4; ++i)
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	10 e0       	ldi	r17, 0x00	; 0
  b6:	18 c0       	rjmp	.+48     	; 0xe8 <get_key+0x3e>
	{
		for (j = 0; j < 4; ++j)
		{
			if (is_pressed(i,j))
  b8:	be 01       	movw	r22, r28
  ba:	c8 01       	movw	r24, r16
  bc:	0e 94 36 00 	call	0x6c	; 0x6c <is_pressed>
  c0:	89 2b       	or	r24, r25
  c2:	49 f0       	breq	.+18     	; 0xd6 <get_key+0x2c>
			{
				return i * 4 + j + 1;
  c4:	c8 01       	movw	r24, r16
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	8c 0f       	add	r24, r28
  d0:	9d 1f       	adc	r25, r29
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	0c c0       	rjmp	.+24     	; 0xee <get_key+0x44>
int get_key()
{
	int i, j;
	for (i = 0; i < 4; ++i)
	{
		for (j = 0; j < 4; ++j)
  d6:	21 96       	adiw	r28, 0x01	; 1
  d8:	02 c0       	rjmp	.+4      	; 0xde <get_key+0x34>
  da:	c0 e0       	ldi	r28, 0x00	; 0
  dc:	d0 e0       	ldi	r29, 0x00	; 0
  de:	c4 30       	cpi	r28, 0x04	; 4
  e0:	d1 05       	cpc	r29, r1
  e2:	54 f3       	brlt	.-44     	; 0xb8 <get_key+0xe>
#include "keypad.h"

int get_key()
{
	int i, j;
	for (i = 0; i < 4; ++i)
  e4:	0f 5f       	subi	r16, 0xFF	; 255
  e6:	1f 4f       	sbci	r17, 0xFF	; 255
  e8:	04 30       	cpi	r16, 0x04	; 4
  ea:	11 05       	cpc	r17, r1
  ec:	b4 f3       	brlt	.-20     	; 0xda <get_key+0x30>
			{
				return i * 4 + j + 1;
			}
		}
	}
}
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	1f 91       	pop	r17
  f4:	0f 91       	pop	r16
  f6:	08 95       	ret

000000f8 <avr_wait>:
}

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
  f8:	23 e0       	ldi	r18, 0x03	; 3
  fa:	23 bf       	out	0x33, r18	; 51
	while (msec--) {
  fc:	0a c0       	rjmp	.+20     	; 0x112 <avr_wait+0x1a>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
  fe:	83 e8       	ldi	r24, 0x83	; 131
 100:	82 bf       	out	0x32, r24	; 50
		SET_BIT(TIFR, TOV0);
 102:	88 b7       	in	r24, 0x38	; 56
 104:	81 60       	ori	r24, 0x01	; 1
 106:	88 bf       	out	0x38, r24	; 56
		WDR();
 108:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
 10a:	08 b6       	in	r0, 0x38	; 56
 10c:	00 fe       	sbrs	r0, 0
 10e:	fd cf       	rjmp	.-6      	; 0x10a <avr_wait+0x12>

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
 110:	c9 01       	movw	r24, r18
 112:	9c 01       	movw	r18, r24
 114:	21 50       	subi	r18, 0x01	; 1
 116:	31 09       	sbc	r19, r1
 118:	89 2b       	or	r24, r25
 11a:	89 f7       	brne	.-30     	; 0xfe <avr_wait+0x6>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
 11c:	13 be       	out	0x33, r1	; 51
 11e:	08 95       	ret

00000120 <main>:

main()
{
	for (;;)
	{
		avr_wait(1000);
 120:	88 ee       	ldi	r24, 0xE8	; 232
 122:	93 e0       	ldi	r25, 0x03	; 3
 124:	0e 94 7c 00 	call	0xf8	; 0xf8 <avr_wait>
		int k = 0;
		k = get_key();
 128:	0e 94 55 00 	call	0xaa	; 0xaa <get_key>
		if (!k)
 12c:	89 2b       	or	r24, r25
 12e:	c1 f7       	brne	.-16     	; 0x120 <main>
		{
			SET_BIT(PORTB, 0);
 130:	88 b3       	in	r24, 0x18	; 24
 132:	81 60       	ori	r24, 0x01	; 1
 134:	88 bb       	out	0x18, r24	; 24
 136:	f4 cf       	rjmp	.-24     	; 0x120 <main>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
